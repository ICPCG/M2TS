{
    "321": "\t/**\n\t * Returns the pushes lowerbound of this board position.\n\t * \n\t * @return the pushes lowerbound\n\t */\n",
    "323": "\t/**\n\t * Sets the pushes lowerbound of this board position.\n\t * \n\t * @param pushesLowerbound\n\t */\n",
    "324": "\t\t/**\n\t\t * Play a sound.\n\t\t */\n",
    "343": "\t/**\n\t * Returns the influence value between the positions of the passed boxes.\n\t * <p>\n\t * The LOWER the influence value the more influence has the box on the other box.\n\t * \n\t * @param boxNo1  the position of the first  box whose position is considered\n\t * @param boxNo2  the position of the second box whose position is considered\n\t * @return the influence value \n\t */\n",
    "351": "\t/**\n\t * Sets the box positions and the player position.\n\t *     \n\t * @param positions positions of the boxes and the player\n\t */\n",
    "352": "\t/**\n\t * Returns the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "355": "\t/**\n\t * Returns the number of the moved box.\n\t * \n\t * @return the number of the moved box\n\t */\n",
    "357": "\t/**\n\t * Returns the start position of the pulled box.\n\t * \n\t * @return the position of the box before it was pulled.\n\t */\n",
    "359": "\t/**\n\t * Returns the target position of the pulled box.\n\t * \n\t * @return the position of the box after it was pulled.\n\t */\n",
    "361": "    /**\n     * Returns the preceding board position of this board position.\n     *\n     * @return the preceding board position of this board position\n     */\n",
    "364": "\t/**\n\t * Compares both board positions. Note: lower values means high priority\n\t * in the <code>PriorityQueue</code>.\n\t */\n",
    "373": "\t/**\n\t * Returns whether the push is a forced push, that means a box \n\t * must be pushed from the start position to the target position.\n\t */\n",
    "376": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "412": "\t/**\n\t * Returns whether the solver has been stopped due to insufficient memory.\n\t * \n\t * @return <code>true</code> if the solver stopped due to insufficient memory, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "428": "\t/**\n\t * Returns the board position with the shortest determined solution path length.\n\t *\n     * @return board position with the shortest determined solution path length.\n     */\n",
    "437": "\t/**\n\t * Returns the preceding board position of this board position.\n\t * \n\t * @return preceding board position\n\t */\n",
    "440": "\t/**\n\t * Returns the direction the box has been pushed.\n\t * \n\t * @return Direction of the push\n\t */\n",
    "442": "\t/**\n\t * Returns the number of the pushed box.\n\t * \n\t * @return Number of the pushed box\n\t */\n",
    "445": "\t/**\n\t * Gives the name of this solver as used to tag new solutions.\n\t * @return the name of this solver\n\t */\n",
    "446": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "448": "\t/**\n\t * Sets the box- and the player positions.\n\t *     \n\t * @param positions Positions of the boxes and the player\n\t */\n",
    "450": "\t/**\n\t * An absolute board position usually hasn't a preceding board position. This method is\n\t * implemented for easier working with linked lists.\n\t *\n\t * @return always null\n\t */\n",
    "454": "\t/**\n\t * Sets the searchdirection of the solutionsearch this class is created in.\n\t * \n\t * @param searchDirection Direction of the search\n\t */\n",
    "458": "\t/**\n\t * For avoiding some casts this method is implemented here. Actually, this method\n\t * is only needed for relative board positions.\n\t *\n\t * @return always 0\n\t */\n",
    "459": "\t/** \n\t * Returns the number of pushes of this board position.\n\t * \n\t * @return number of pushes\n\t */\n",
    "461": "\t/**\n\t * Absolute board positions are only created when no box has been pushed. This value is interpreted \n\t * during a search for a solution (no box has been pushed so no tunnel check has to be performed).\n\t *\n\t * @return always <code>NO_BOX_PUSHED</code>\n\t */\n",
    "463": "\t/**\n\t * Sets the maximum solution length. \n\t * This is a value representing the iteration depth during the search for a solution.\n\t * (first all board positions are created that have a maximum solution length of x pushes.\n\t * Then all board positions are created with a maximum solution length of x+1, ...\n\t *  \n\t * @param maximumSolutionLength\tthe maximum solution length to be set\n\t */\n",
    "464": "\t/**\n\t * Return the player position of this board position.\n\t * \n\t * @return the player position\n\t */\n",
    "466": "\t/**\n\t * Returns the maximum solution length (= iteration depth).\n\t * \n\t * @return\tthe maximum solution length stored in this board position\n\t */\n",
    "467": "\t/**\n\t * Returns the number of pushes that were made to reach this board position.\n\t * An absolute board position is only created at the beginning, so this is\n\t * always 0.\n\t * This number is used in the solving methods.\n\t * \n\t * @return always 0\n\t */\n",
    "472": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution at the passed point in time.\n\t * \n\t * @param date the creation time point, or <code>null</code> for \"now\"\n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "476": "\t/**\n\t * Sets the number of moves.\n\t * \n\t * @param movesCount\tNumber of moves the player has done\n\t */\n",
    "487": "\t/**\n\t * Returns the index in the packing sequence that has already been reached.\n\t * \n\t * @return index in the packing sequence\n\t */\n",
    "489": "\t/**\n\t * Sets the index in the packing sequence that has been reached.\n\t * \n\t * @param indexPackingSequence the index in the packing sequence\n\t */\n",
    "494": "\t/**\n\t * Returns, whether a box is inactive, and therefore a position value 0\n\t * has to be assumed.\n\t *\n\t * @param  boxNo number of the box to be checked for being inactive\n\t * @return <code>true</code> if the box is inactive, and\n\t * \t\t  <code>false</code> if the box is active\n\t */\n",
    "496": "\t/**\n\t *  Returns whether the pushed box has been inactive.\n\t *\n\t * @return <code>true</code> the box is inactive\n\t * \t\t\t<code>false</code> the box is active\n\t */\n",
    "497": "\t/**\n\t * Mark this board position to be a deadlock.\n\t */\n",
    "498": "\t/**\n\t * Mark this board position not to be a deadlock.\n\t * <p>\n\t * Attention: this board position is only for the current\n\t * investigated corral assumed not to be a deadlock.\n\t * Nevertheless it can be a deadlock, because not all\n\t * deadlocks are detected.\n\t */\n",
    "499": "\t\t/**\n\t\t * Retrieves the current value of the debug variable\n\t\t * described by this object, by using reflection.\n\t\t * \n\t\t * @return current value of the described debug variable\n\t\t */\n",
    "500": "\t/**\n\t * Returns a string to be attached to a solution, which says that this\n\t * solver did create the solution \"now\".\n\t * \n\t * @return string identifying the solver as solution creator\n\t * @see Solution#name\n\t */\n",
    "501": "\t/**\n\t * Sets the number of the corral this board position belongs to.\n\t * \n\t * @param corralNo the number of the corral\n\t */\n",
    "503": "\t/**\n\t * Sets the status bar text.\n\t * \n\t * @param text\n\t *            the text to be shown in the status bar\n\t */\n",
    "504": "\t/**\n\t * Returns the number of the corral this board position belongs to.\n\t * \n\t * @return the number of the corral\n\t */\n",
    "506": "\t/**\n\t * Returns whether this board position has been proven to be a corral deadlock.\n\t * \n\t * @return <code>true</code> if this board position is a corral deadlock, and\n\t * \t     <code>false</code> if this board position has not been proven to be a deadlock\n\t */\n",
    "507": "\t/**\n\t * Returns whether this board position is classified not to be a corral deadlock.\n\t * <p>\n\t * This board position can be a corral deadlock, anyhow. For example the corral\n\t * detection could be aborted due to a reached time limit. Nevertheless it would\n\t * be classified as not to be a corral deadlock.\n\t * \n\t * @return <code>true</code> this board position has been classified not to be a corral deadlock\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "508": "\t/**\n\t * Returns whether this board position has been classified (deadlock or no deadlock).\n\t * <p>\n\t * This method returns the same value as <code>!isBeeingAnalyzed()</code>\n\t * \n\t * @return <code>true</code> this board position has been classified.\n\t * \t\t<code>false</code> this board position has not been classified yet.\n\t */\n",
    "510": "\t/**\n\t * Returns whether is currently beeing analyzed to be a corral deadlock or not.\n\t * <p>\n\t * Every corral (= board position) not classified counts as \"beeingAnalyzed\". Due to every\n\t * board position occured during the corral detection getting a corral number - even if it\n\t * isn't a corral at all - finally there can be board positions still having the status\n\t * \"isBeeingAnalyzed\".\n\t * \n\t * @return <code>true</code> if the deadlock status of this board position\n\t *                           is currently beeing analyzed, and\n\t * \t\t  <code>false</code> otherwise\n\t */\n",
    "513": "\t/**\n\t * Returns a deep clone of the current board.\n\t * \n\t * @return the clone of this board\n\t */\n",
    "514": "\t\t/**\n\t\t * Sets the value of the debug variable described by this object\n\t\t * by using reflection.\n\t\t * \n\t\t * @param value  to be assigned to the described debug variable\n\t\t */\n",
    "517": "\t/**\n\t * Returns whether the two box configurations are equal.\n\t * \n\t * @param boxConfigurationNumber logical index into our flat data array\n\t * @param boxConfiguration the candidate box configuration to compare with\n\t * @return <code>true</code> if both box configurations are equal, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "523": "\t/**\n\t * Returns the maximal capacity of this storage.\n\t * \n\t * @return the maximal capacity of this storage\n\t */\n",
    "524": "\t/**\n\t * Adds data to the queue.\n\t * \n\t * @param boardPositionIndex the board position to be added\n\t * @param boardPositionPredecessor the predecessor to be added\n\t */\n",
    "531": "\t/**\n\t * Logically removes all board positions from the queue\n\t * until a board position different to the passed one occurs in the queue.\n\t * \n\t * @param boardPosition the board position to be over jumped\n\t */\n",
    "535": "\t/**\n\t * Retrieves and removes the last board position of this queue.\n\t * \n\t * @return the previous board position\n\t */\n",
    "538": "\t/**\n\t * Jumps backwards in the queue by the passed number of board positions.\n\t * \n\t * @param jumpCount number of board positions to be skipped backwards\n\t */\n",
    "542": "\t/**\n\t * Returns whether the queue is empty.\n\t * \n\t * @return <code>true</code> when queue is empty, and<br>\n\t *        <code>false</code> otherwise\n\t */\n",
    "547": "\t/**\n\t * Returns whether all box configurations could be generated. \n\t * \n\t * @return <code>true</code> if all box configurations have been generated,\n\t * \t      <code>false</code> if there is insufficient memory available,\n\t *        and not all box configurations have been generated.\n\t */\n",
    "551": "\t/**\n\t * Every object of this class gets passed a pushes depth. This depth holds\n\t * the number of pushes needed to reach the box configuration passed\n\t * to the constructor. This value is unique because there is only one\n\t * generation Runnable for every box configuration of the solution\n\t * to be optimized. By reading this value the optimizer can identify\n\t * each object of this class.\n\t * \n\t * @return the pushes depth that has been passed to the constructor of this object\n\t */\n",
    "561": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to moves and then pushes.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "563": "\t/**\n\t * Determine, whether this solution is better than the passed solution,\n\t * with respect to pushes and then moves.\n\t * \n\t * @param other the other solution we compare against\n\t * @return whether this solution is better\n\t */\n",
    "568": "\t/**\n\t * Adds the specified board position into this priority queue.\n\t */\n",
    "570": "\t/**\n\t * Returns the number of stored <code>OptimizerBoardPositions</code>.\n\t * \n\t * @return the number of stored <code>OptimizerBoardPositions</code>\n\t */\n",
    "572": "\t/**\n\t * Removes and returns the board position having the lowest metrics (moves, pushes, ...).\n\t * \n\t * @return  board position having the lowest metrics \n\t */\n",
    "576": "\t/**\n\t * Adds the passed <code>String</code> to the log texts of the optimizer\n\t * to inform the user about the progress of the optimizer,\n\t * or to inform the developer about statistical data.\n\t * \n\t * @param text       text to be added to the log\n\t * @param stylename  registered name of style to be used\n\t */\n",
    "577": "\t /**\n\t  *Inserts the passed board position at the passed position.\n\t  * <p>\n\t  * This method moves the passed board position down until \n\t  * it is less than or equal to its children (or is a leaf).\n\t  *\n\t  * @param position the position to start the search for the correct position to insert into\n\t  * @param boardPosition the board position to be inserted\n\t  */\n",
    "580": "\t/**\n\t * Returns the number of board positions stored in this hash table.\n\t *\n\t * @return  the number of board positions stored in this hash table.\n\t */\n",
    "601": "\t/**\n\t * Removes all markings of squares.  \n\t */\n",
    "608": "\t/**\n\t * Debug method: without {@link Settings#isDebugModeActivated} nothing\n\t * visible happens.\n\t * In debug mode we print the current statistics to the optimizer logging.\n\t */\n",
    "610": "\t/**\n\t * Returns the box configuration index of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the index the box configuration is stored at in the box configuration storage\n\t */\n",
    "613": "\t/**\n\t * Returns whether the second passed box configuration is a subset\n\t * of the first passed box configuration.\n\t * \n\t * @param boxConfiguration1\n\t *            box configuration 1\n\t * @param boxConfigurationArray\n\t *            array which contains the box configuration to be checked for\n\t *            being a subset\n\t * @param indexInArray\n\t *            index of the box configuration in the array\n\t * \n\t * @return <code>true</code> if the second passed box configuration is a subset\n\t *         of the first passed box configuration, and <code>false</code> otherwise\n\t */\n",
    "617": "\t/**\n\t * Returns the player position of the passed board position.\n\t * \n\t * @param boardPositionIndex  the index of the board position\n\t * @return the player position of the passed board position\n\t */\n",
    "619": "\t\t/**\n\t\t * Doubles the tree size.\n\t\t */\n",
    "626": "\t\t/**\n\t\t * Fills the sorted list with the box configurations from the tree.\n\t\t * \n\t\t * @param indexInTree index of the box configuration in the tree\n\t\t * @param last\t\n\t\t * @return \"lowest\" boxConfiguration at the moment in the tree\n\t\t */\n",
    "637": "\t/**\n\t * Returns the number of the currently selected object.\n\t * \n\t * @return number of the currently selected obj\n\t */\n",
    "638": "\t\t/**\n\t\t * Transforms the tree to a binary heap.\n\t\t * This method destroys the tree. That means:\n\t\t * only the binary heap can be used after this method has been called.\n\t\t */\n",
    "641": "\t/**\n\t * Using the mouse wheel is interpreted as a move through the selectable objects. \n\t *\n\t * @param evt the <code>MouseWheelEvent</code> fired\n\t */\n",
    "643": "\t/**\n\t * Sets the \"is already processed\" status of the passed board position.\n\t * \n\t * @param boardPositionIndex  index of the board position in this storage\n\t * @param processedStatus processed status to set\n\t */\n",
    "648": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "651": "\t\t/**\n\t\t * Sets all variables to null for the garbage collection.\n\t\t */\n",
    "653": "    /**\n\t * This method is called when the user selects another view.\n\t */\n",
    "656": "\t/**\n\t * Creates all things this panel needs.\n\t */\n",
    "663": "\t/**\n\t * Use the current value of the check box to enable or disable\n\t * the text field and label components.\n\t */\n",
    "666": "\t/**\n\t * Returns the value of the input field as double.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "669": "\t/**\n\t * Returns the value of the input field as integer.\n\t * \n\t * @return the value of the input field, or {@code null}\n\t */\n",
    "670": "\t/**\n\t * Convenience function: enters this object as the default table cell\n\t * renderer for type {@link java.util.Date}.\n\t * This is the expected usage for this class.\n\t * \n\t * @param table\n\t */\n",
    "672": "\t/**\n\t * Adds a level to be displayed\n\t * @param level level to be displayed\n\t */\n",
    "675": "\t/**\n\t * Returns whether the field is set \"active\".\n\t * \n\t * @return <code>true</code> if the field is active, and\n\t *        <code>false</code> otherwise\n\t */\n",
    "676": "\t/**\n\t * Adds a collection of levels to be displayed\n\t * @param collection collection of levels\n\t * @param startNumber index of the start level in the collection\n\t * @param endNumber index of the end level in the collection\n\t */\n",
    "677": "\t/**\n\t * Sets a new value for the display field.<br>\n\t * If the value is higher than the maximum or lower than the minimum,\n\t * the maximum or minimum value is used, respectively.\n\t * In any case the effectively used value is returned.\n\t * \n\t * @param value the value to be set\n\t * @return the set value\n\t */\n",
    "684": "\t/**\n\t * Method for closing the window after the ok-button has been clicked\n\t * \n\t * @param actionevent the action event to be analyzed\n\t */\n",
    "685": "\t/**\n\t * Informs all listeners using objects generated by the passed generator.\n\t * While calling the listener method for this notification this\n\t * ListenerSet object is not synchronized, any more.\n\t * Only the initial copying of the listener list is synchronized.\n\t * \n\t * @param eventgen generates the events to be passed to the listeners\n\t *                  ({@code null} is taken to generate {@code nulls})\n\t */\n",
    "687": "\t/**\n\t * Sets up the button for the \"start\" version.\n\t */\n",
    "688": "\t/**\n\t * Sets up the button for the \"stop\" version.\n\t */\n",
    "690": "\t/**\n\t * Sets up the button for the indicated version.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "693": "\t/**\n\t * Partial setup regarding the border.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "694": "\t/**\n\t * Partial setup regarding the background color.\n\t * \n\t * @param forStart whether to set up for the \"start\" version\n\t */\n",
    "696": "\t/**\n\t * Create the border for the indicated version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @param forStart whether to create it for the \"start\" version\n\t * @return         border for the indicated version\n\t */\n",
    "697": "\t/**\n\t * Creates and returns a border for the \"start\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"start\" version\n\t */\n",
    "699": "\t/**\n\t * Creates and returns a border for the \"stop\" version.\n\t * Does <em>not</em> look at {@link #useBorder}.\n\t * \n\t * @return border for a \"stop\" version\n\t */\n",
    "703": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBorder the useBorder to set\n\t */\n",
    "706": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}\n\t * or {@link #setToStop()}.\n\t * @param useBgColor the useBgColor to set\n\t */\n",
    "710": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param borderColorStart the borderColorStart to set\n\t */\n",
    "715": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param borderColorStop the borderColorStop to set\n\t */\n",
    "718": "\t/**\n\t * Does not have effect before the next {@link #setToStart()}.\n\t * @param bgColorStart the bgColorStart to set\n\t */\n",
    "721": "\t/**\n\t * Does not have effect before the next {@link #setToStop()}.\n\t * @param bgColorStop the bgColorStop to set\n\t */\n",
    "722": "\t/**\n\t * Computes and returns whether the rectangle given by the left upper corner\n\t * and both dimensions is completely outside the specified clip rectangle.\n\t * When the clip rectangle is missing, it is considered to be arbitrarily large.\n\t * \n\t * @param x    x of upper left corner\n\t * @param y    y of upper left corner\n\t * @param xlen width\n\t * @param ylen height\n\t * @param clip rectangle we compare against\n\t * @return whether (x,y,xlen,ylen) is completely outside of \"clip\"\n\t */\n",
    "741": "\t/**\n\t * Returns whether this shortcut has an alias.\n\t * \n\t * @return <code>true</code> if this shortcut has an alias,\n\t *        <code>false</code> otherwise\n\t */\n",
    "743": "\t/**\n\t * Returns the alias of this shortcut.\n\t * \n\t * @return the alias of this shortcut\n\t */\n",
    "746": "\t/**\n\t * Sets the alias of this shortcut.\n\t * \n\t * @param newAlias the new alias of this shortcut\n\t */\n",
    "747": "\t/**\n\t * Returns the path stored in this shortcut.\n\t * \n\t * @return the path\n\t */\n",
    "750": "\t/**\n\t * Returns the name of this shortcut.\n\t * <p>\n\t * If there is an alias this alias is returned. Otherwise the path is returned.\n\t * \n\t * @return the name of this shortcut\n\t */\n",
    "752": "\t/**\n\t * Returns formatted shortcut's name for display.\n\t *\n\t * @return the display name of this shortcut\n\t */\n",
    "753": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that the position of the graphic to be extracted\n\t * is stored in the settings as \"x, y\" coordinates.\n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "754": "\t/**\n\t * Returns the color of this shortcut.\n\t * \n\t * @return the color of this shortcut\n\t */\n",
    "755": "\t/**\n\t * Sets the color of this shortcut.\n\t * \n\t * @param color color to be set\n\t */\n",
    "756": "\t/**\n\t * Sets the board this GUI shows.\n\t * \n\t * @param board board to be shown\n\t */\n",
    "758": "\t/**\n\t * Returns the <code>String</code> representation of the shortcut's color.\n\t * \n\t * @return color of this shortcut as <code>String</code>\n\t */\n",
    "759": "\t/**\n\t * Extracts the graphic specified by the passed name from the passed graphic\n\t * which contains all graphics of the skin.\n\t * <p>\n\t * This method is only used for reducing the lines of code when extracting\n\t * the graphics from the entire graphic containing all skin graphics.\n\t * This method assumes that only the x-coordinate is relevant for locating\n\t * a sub graphic in the entire graphic. \n\t * \n\t * @param entireGraphic  skin graphic containing all skin graphics\n\t * @param graphicName  the name of the graphic to extract\n\t * @return the extracted <code>BufferedImage</code>\n\t */\n",
    "764": "\t/**\n\t * Erase any comments of the passed property string.\n\t * A comment starts at the first '#' (hash sign).\n\t * Also, blanks and tabs are trimmed from the (right) end of the result.\n\t * \n\t * @param propertyValue value of a property as a String\n\t * @return trimmed value\n\t */\n",
    "772": "\t/**\n\t * Returns the current transformation as String.\n\t * This String is saved into the file of the level as information.\n\t * Note: this string is NOT influenced by any language settings.\n\t * \n\t * @return the transformation as <code>String</code>\n\t * @see #newlevel()\n\t */\n",
    "774": "\t/**\n\t * This default generator implementation just returns the {@link #base}\n\t * object reference.\n\t * That probably works only for immutable types T.\n\t * <p>\n\t * Most implementations should override this method by something that\n\t * clones the {@link #base} or uses it as basis for a constructor.\n\t * E.g. ActionEvents are neither immutable nor do they support cloning.\n\t * \n\t * @return the next generated object\n\t */\n",
    "779": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName\t\tthe name of the icon for the button\n\t * @param actionCommand the action command of the button\n\t * @param toolTipText \tthe tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButtonByKey(String, String, String)\n\t */\n",
    "781": "\t/**\n\t * Returns the currently used skin.\n\t * \n\t * @return the <code>Skin</code> currently used\n\t */\n",
    "784": "\t/**\n\t * Returns the string corresponding to the passed property name.\n\t * \n\t * @param name name of property\t\n\t * @param defaultValue value to be set if the property value can't be set\n\t * @return value of the property as string or null, if no property is found\n\t */\n",
    "785": "\t/**\n\t * Creates a button for the tool bar.\n\t * \n\t * @param iconName       the name of the icon for the button\n\t * @param actionCommand  the action command of the button\n\t * @param toolTipTextKey the text key for the tool tip text for the button\n\t * @return the created button\n\t * @see #createToolBarButton(String, String, String)\n\t */\n",
    "787": "\t/**\n\t * Sets a new delay for the animations that are shown.\n\t * <p>\n\t * Depending on the skin there may be an animation for a selected box and\n\t * the selected player.\n\t * \n\t * @param delay\n\t *            the delay in milliseconds\n\t */\n",
    "793": "\t/**\n\t * Sets the view direction of the player to the passed direction.\n\t * <p>\n\t * The view direction is important for some skins in order to be able to\n\t * show the correct graphic.\n\t * \n\t * @param viewDirection\n\t *            the view direction of the player\n\t */\n",
    "800": "\t/**\n\t * Sets the maximum factor for scaling the graphics.\n\t * <p>\n\t * Some skins offer bad quality graphics which shouldn't be scaled too much.\n\t * Hence the user can set a maximum scaling factor. This way the graphics\n\t * aren't scaled beyond this factor even if there is enough space for the\n\t * graphics to be drawn.\n\t * \n\t * @param maximumScalingFactor\n\t *            the new factor to be set\n\t */\n",
    "805": "\t/**\n\t * Sets the flag that a recalculation has to be done.\n\t */\n",
    "806": "\t/**\n\t * Transforms the board (rotation and mirroring)\n\t * \n\t * @param transformationValue  kind of transformation\n\t */\n",
    "808": "\t/**\n\t * Sets the passed level as level to be displayed in this Panel.\n\t * \n\t * @param levelToBeDisplayed  the <code>Level</code> to be displayed\n\t */\n",
    "810": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param boardAsString the board data as <code>String</code>\n\t */\n",
    "813": "\t/**\n\t * Sets the flag specifying whether the infobar is to be shown or not.\n\t * \n\t * @param visibleStatus\n\t *            visibility status of the infobar to set\n\t */\n",
    "814": "\t/**\n\t * Sets the passed board to be displayed.\n\t * \n\t * @param board the board to be displayed\n\t */\n",
    "816": "\t/**\n\t * Returns the <code>Board</code> displayed in this class.\n\t * \n\t * @return the <code>Board</code> of this class\n\t */\n",
    "819": "\t/**\n\t * Returns the <code>Level</code> displayed in this class\n\t * \n\t * @return the <code>Level</code> of this class\n\t */\n",
    "821": "\t/**\n\t * Returns the current width of a square from the current scaled skin.\n\t * @return width of a square\n\t */\n",
    "823": "\t/**\n\t * Returns the current height of a square from the current scaled skin.\n\t * @return height of a square\n\t */\n",
    "824": "\t/**\n\t * Sets the flag indication that the sizes must be recalculated.\n\t * If e.g. we switch into editor mode, we have less space for the board,\n\t * since we have to draw some objects for the editor.\n\t */\n",
    "827": "\t/**\n\t * Resets the <code>board</code> and the player position members\n\t * from the <code>boardInitial</code> member.\n\t */\n",
    "835": "\t/**\n\t * Repaints the GUI immediately.\n\t * This is the sledge-hammer method: everything is painted, again.\n\t */\n",
    "840": "\t/**\n\t * Packs the passed unpacked box configuration into a new packed box configuration.\n\t * \n\t * @param newPackedBoxConfiguration\n\t * @param unpackedBoxConfiguration\n\t */\n",
    "856": "\t/**\n\t * Marks the passed board position as visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t */\n",
    "863": "\t/**\n\t * Sets the cursor image to the specified cursor.\n\t * \n\t * @param cursor The value of the cursor to be set\n\t */\n",
    "865": "\t/**\n\t * If the coordinates of the point aren't located on the board\n\t * they are adjusted so they are on the edge of the board.\n\t * \n\t * @param p  <code>Point</code> containing the data which is adjusted\n\t */\n",
    "866": "\t/**\n\t * Repaints part of the GUI immediately.  Only a rectangle inside the board is\n\t * considered to be changed, specified in external board square coordinates.\n\t * But, the number of moves and pushes has also be considered to be changed,\n\t * which implies some more updates.\n\t * \n\t * @param xmin      upper left X of board square rectangle\n\t * @param ymin      upper left Y of board square rectangle\n\t * @param extWidth  width  of rectangle in board squares\n\t * @param extHeight height of rectangle in board squares\n\t */\n",
    "870": "\t/**\n\t * Returns the influence distance between the start and the target square.\n\t * The higher the distance the less influence the target square has\n\t * on the start square.\n\t * \n\t * @param startSquare  position of the start square\n\t * @param targetSquare position of the target square\n\t * \n\t * @return influence distance from the start square to the target square\n\t */\n",
    "871": "\t/**\n\t * This method sets the currently set language in all menu bar\n\t * and tool bar components.\n\t */\n",
    "872": "\t/**\n\t * Returns whether the board position (box + player positions) is marked as\n\t * visited.\n\t * \n\t * @param boardPositionIndex\n\t *            index of the board position in the visitedData array\n\t * @return <code>true</code>board position has already been visited;\n\t *         <code>false</code>otherwise\n\t */\n",
    "874": "\t/**\n\t * Inserts a move of the player into the history.\n\t * \n\t * @param direction\tinto which the player moved\n\t */\n",
    "876": "\t\t/**\n\t\t * Set the collected values back to the initial values,\n\t\t * indicating an empty range.\n\t\t */\n",
    "877": "\t/**\n\t * Returns the next movement from the history,\n\t * and advances the \"current\" pointer to it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the next movement of the history\n\t */\n",
    "878": "\t/**\n\t * Returns the previously executed movement from the history,\n\t * and moves back the \"current\" pointer before it.\n\t * \n\t * @return <code>null</code>, or the <code>HistoryElement</code> containing the data\n\t *         for the previously executed movement \n\t */\n",
    "881": "\t/**\n\t * Returns the movement with the given number.\n\t * \n\t * @param movementNo number of the movement to be returned\n\t * @return  <code>null</code>, or the <code>HistoryElement</code> of the movement\n\t *          with the given number\n\t */\n",
    "882": "\t/**\n\t * Returns the index of the last executed movement.\n\t * That is also the count of the player moves up to now/here. \n\t * \n\t * @return index of the last executed movement\n\t */\n",
    "883": "\t\t/**\n\t\t * Returns whether the collected area is empty.\n\t\t * \n\t\t * @return whether the area is empty\n\t\t */\n",
    "884": "\t/**\n\t * Returns the total count of the stored movements.\n\t * \n\t * @return total count of movements\n\t */\n",
    "885": "\t/**\n\t * Returns the (total) number of pushes contained in the history.\n\t * \n\t * @return number of pushes in the history\n\t */\n",
    "889": "\t/**\n\t * Returns the LURD string of all movements up to the current movement.\n\t * \n\t * @return LURD string till the current movement (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "890": "\t\t/**\n\t\t * Adds a point to the area, given by its components.\n\t\t * \n\t\t * @param x\n\t\t * @param y\n\t\t */\n",
    "891": "\t/**\n\t * Returns the complete LURD string of all movements, independent from the\n\t * current point inside of the history.\n\t * \n\t * @return LURD string till the end (inclusive)\n\t * @see #getLURDString(int, int)\n\t */\n",
    "893": "\t/**\n\t * Sets the history to the first movement.\n\t */\n",
    "895": "\t/**\n\t * Sets the \"current\" pointer to the specified index.\n\t * This changes to reference point for further \"undo\" and \"redo\" operations.\n\t * This is the way to quickly jump to an arbitrary point in the history.\n\t *\n\t * @param movementNo the movement number to be set\n\t */\n",
    "897": "\t/**\n\t * Sets the marker which indicates that the next movement will be the start\n\t * of a combined movement.\n\t */\n",
    "898": "\t\t/**\n\t\t * Collect another external position.\n\t\t * External positions are what is handled in the GUI, they reflect screen\n\t\t * positions after any transformation.\n\t\t * \n\t\t * @param externalPos <code>-1</code>. or external position to collect\n\t\t */\n",
    "900": "\t/**\n\t * Sets back the \"current\" pointer to the previous movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "903": "\t/**\n\t * Sets forward the \"current\" pointer to the next movement.\n\t * This operation is unchecked / unconditional.\n\t */\n",
    "904": "\t\t/**\n\t\t * Collect another internal position (from the model).\n\t\t * Before it is collected, it must be translated to an external position\n\t\t * according to the current transformation.\n\t\t * \n\t\t * @param internalPos <code>-1</code>. or internal position to collect\n\t\t */\n",
    "905": "\t/**\n\t * Returns whether there is a preceding movement.\n\t * \n\t * @return <code>true</code>, if there is a  preceding movement,<br>\n\t *   \t  <code>false</code>, if there is no preceding movement\n\t */\n",
    "908": "\t/**\n\t * Returns whether there is a successor movement.\n\t * \n\t * @return <code>true</code> if there is a  successor movement,<br>\n\t * \t\t  <code>false</code> if there is no successor movement\n\t */\n",
    "910": "\t/**\n\t * Repaints part of the GUI.\n\t * Just the number of moves and the number of pushes is considered changed.\n\t */\n",
    "911": "\t/**\n\t * Return the number of steps to the preceding element one can do,\n\t * until the first movement is reached, or one that is marked to be\n\t * the start of a combined movement.\n\t * \n\t * @return length of the last combined movement\n\t */\n",
    "913": "\t/**\n\t * Return the length of the next combined movement, i.e. how many steps\n\t * forward can we do until we find an element which is marked to be\n\t * the start of a combined movement (excluding the current element).\n\t * \n\t * @return length of the next combined movement\n\t */\n",
    "915": "\t/**\n\t * Starting with the current movement, count the number of combined\n\t * segments.  Even when the first (current) movement is not marked\n\t * to be the start of a combined movement, we count it as start\n\t * of such a segment.\n\t * \n\t * @return count of segments starting at current movement\n\t */\n",
    "918": "\t/**\n\t * Starting with the current movement we scan forward and compute the\n\t * average length of combined segments.\n\t * @return average length of movement segments starting at current movement\n\t */\n",
    "932": "\t/**\n\t * Returns if a box has been pushed.\n\t * \n\t * @return true = A box has been pushed, false = no box has been pushed\n\t */\n",
    "939": "\t/**\n\t * Returns the mouse listener for this class.\n\t * \n\t * @return the mouse listener\n\t */\n",
    "941": "\t/**\n\t * Sets whether the editor menu item is enabled.\n\t * @param enabled\n\t */\n",
    "948": "\t/**\n\t * Returns the menu item for saving a level.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "954": "\t/**\n\t * Returns the button for showing info in the menu bar.\n\t * <p>\n\t * The caller can fully access this button.\n\t * \n\t * @return the <code>JMenuItem</code> for saving a level\n\t */\n",
    "960": "\t/**\n\t * Sets the objects enabled or disabled depending on the current mode\n\t * (play or editor mode). \n\t */\n",
    "966": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boardPositionIndex\n\t *            index of the board position in the visited data array\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "969": "\t/**\n\t * Sets a color for the passed <code>Solution</code> in this GUI.\n\t * <p>\n\t * If \"null\" is passed as color the solution is set back to the default color.\n\t * \n\t * @param solution the <code>Solution</code> to be colored\n\t * @param color the <code>Color</code>\n\t */\n",
    "971": "\t/**\n\t * Sets the status of the solver mode dependent objects.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "972": "\t\t/**\n\t\t * Returns whether the the current solution type is a valid\n\t\t * and new solution.\n\t\t * @return <code>true</code> if the solution is a valid new solution,\n\t\t *   or<br><code>false</code> otherwise\n\t\t */\n",
    "973": "\t/**\n\t * Sets the background color for all solutions to the default color.\n\t */\n",
    "974": "\t/**\n\t * Makes a single row \"selected\".\n\t * When the passed view row index is negative (e.g. as result of a\n\t * failed conversion) the current selection remains unchanged.\n\t * \n\t * @param viewrowindex the view index of the row to be selected\n\t */\n",
    "976": "\t/**\n\t * Adds the passed {@code ActionListener} to the listeners being informed\n\t * when an action is fired. \n\t * \n\t * @param actionListener  the {@code ActionListener} to be added\n\t */\n",
    "979": "\t/**\n\t * Shows an information dialog with translated title \"note\" and the message text\n\t * for the text key \"solutionList.noSolutionSelected\".\n\t */\n",
    "980": "\t/**\n\t * Removes the passed {@code ActionListener} from the listeners of this object.\n\t * \n\t * @param actionListener  the {@code ActionListener} to be removed\n\t */\n",
    "982": "\t/**\n\t * Displays the passed board position for debug purposes.\n\t * \n\t * @param storage\n\t *            storage the box configuration is stored in\n\t * @param boxConfigurationIndex\n\t *            index of the box configurtaion in the visited data array\n\t * @param playerPosition\n\t * \t\t      position of the player in internal format\n\t * @param graphicOutput\n\t *            flag, indicating whether there should be a graphical display\n\t *            or not\n\t * @param waitForEnter\n\t *            flag, indicating whether the program has to wait for \"enter\"\n\t *            after displaying the box configuration\n\t */\n",
    "984": "\t/**\n\t * Sets the enabled status of the undo buttons.\n\t * \n\t * @param enabledStatus <code>true</code>, if the objects are enabled, and\n\t * \t\t\t\t\t\t<code>false</code> if the objects are disabled\n\t */\n",
    "985": "\t\t/**\n\t\t * Handles the mouse event \"mouseDragged\".\n\t\t * \n\t\t * @param evt  the event that has been fired\n\t\t */\n",
    "987": "\t/**\n\t * This is the kernel of {@link #informListeners(Solution, String)},\n\t * after that method has decided, in which thread we have to work.\n\t * @param solution\n\t * @param action\n\t */\n",
    "989": "\t/**\n\t * Informs all listeners about a change of the stored solutions.\n\t * <p>\n\t * The listeners must know which actions can be caught from this class\n\t * (this avoids an extra interface containing methods for the different actions).\n\t */\n",
    "993": "\t/**\n\t * Sets the visibility of the \"take solution as history\" menu item.\n\t * \n\t * @param isVisible <code>true</code> sets the \"take solution as history\" menu item visible\n\t * \t\t\t\t   <code>false</code> sets the \"take solution as history\" menu item invisible\n\t */\n",
    "996": "\t/**\n\t * Sets the enabled status of the redo buttons.\n\t * \n\t * @param enabledStatus <code>true</code> if the objects are enabled, and\n\t * \t\t\t\t\t   <code>false</code> if the objects are disabled\n\t */\n",
    "1000": "\t\t/**\n\t\t * Add the passed solution as solution to be highlighted.\n\t\t * \n\t\t * @param solution <code>Solution</code> to be highlighted\n\t\t */\n",
    "1002": "\t\t/**\n\t\t * Removes all solutions to be highlighted.\n\t\t */\n",
    "1006": "\t\t/**\n\t\t * Returns the intensity the passed solution is to be highlighted.\n\t\t *\n\t\t * @param solution the <code>Solution</code> whose highlight intensity is returned\n\t\t * @return the highlight intensity or null if the passed solution isn't to be highlighted\n\t\t */\n",
    "1014": "\t/**\n\t * This methods sets the enabled status of specific GUI elements.\n\t * <p>\n\t * If the current loaded level is invalid then some of the GUI elements\n\t * have to be disabled.\n\t * \n\t * @param enabledStatus  whether the GUI elements are to be enabled\n\t */\n",
    "1015": "\t/**\n\t * Tell whether we currently have a valid {@code lastChanged} data.\n\t * \n\t * @return whether the {@code lastChanged} data is valid\n\t */\n",
    "1025": "\t/**\n\t * Sets the debug menu visible or invisible.\n\t * \n\t * @param isToBeVisible <code>true</code>, if the debug menu shall be visible, and\n\t * \t\t\t\t\t\t<code>false</code> if the debug menu shall be invisible\n\t */\n",
    "1035": "\t/**\n\t * Returns the solutions view.\n\t * <p>\n\t * The solutions are shown in an own JPanel at the left of the main GUI.\n\t * \n\t * @return the <code>solutionsGUI</code> displaying the solutions\n\t */\n",
    "1041": "\t/**\n\t * Method used for the SQL commands CREATE, DROP, INSERT and UPDATE\n\t * \n\t * @param expression the SQL command to be executed\n\t */\n",
    "1046": "\t/**\n\t * Wait for the deadlock identification (detection) to be ready.\n\t * This must be done prior to generation of box configurations,\n\t * since the results of deadlock computation are used there\n\t * without any further checks.\n\t */\n",
    "1049": "\t/**\n\t * Saves the passed level using the passed file name.\n\t *\n\t * @param level the <code>Level</code> to save\n\t * @param fileName the file the level is to be saved to\n\t * @throws IOException thrown when the level couldn't be saved\n\t */\n",
    "1055": "\t/**\n\t * Returns the char code of the square at the specified location.\n\t *  \n\t * @param xPosition X coordinate of the square to return a char for\n\t * @param yPosition Y coordinate of the square to return a char for\n\t * @return\t\t\tchar code for the square, or a blank if the position is outside\n\t *                  the implemented part of the board\n\t */\n",
    "1066": "\t/**\n\t * Reload the data of this view from the database.\n\t */\n",
    "1071": "\t\t/**\n\t\t * Return the ID of the stored string.\n\t\t * \n\t\t * @return the ID\n\t\t */\n",
    "1092": "\t/**\n\t * Adds all author names to the author <code>ComboxBox</code>es.\n\t */\n",
    "1097": "\t/**\n     * Close this dialog and return to the caller of this dialog. \n     */\n",
    "1098": "    \t/**\n    \t * Called from the author view when the user has changed data\n    \t * for the authors that is relevant for the other views.\n    \t */\n",
    "1100": "    \t/**\n    \t * Called from collection view when the user has changed something\n    \t * that is relevant for the other views.\n    \t */\n",
    "1102": "    \t/**\n    \t * Called from level assignment view when the user has changed\n    \t * something that is relevant for the other views. \n    \t */\n",
    "1103": "    \t/**\n    \t * Called from level view when the user has changed something that is\n    \t * relevant for the other views.\n    \t */\n",
    "1107": "    \t/**\n    \t * After a view has been refreshed the data is up-to-date again.\n    \t * Hence all update flags for this view can be reset. \n    \t */\n",
    "1108": "    \t/**\n    \t * Marks the passed view for being refreshed because data have changed. \n    \t */\n",
    "1114": "\t/**\n\t * This method is called whenever the additional information of a selected\n\t * level has changed.\n\t * (For example, when a solution has been deleted)\n\t */\n",
    "1115": "\t/**\n\t * Returns the number of board positions in this hash table.\n\t *\n\t * @return  the number of board positions in this hash table.\n\t */\n",
    "1120": "\t/**\n\t * Clears the storage so that it contains no board positions anymore.\n\t */\n",
    "1123": "\t\t/**\n\t\t * Returns the stored board positions.\n\t\t * \n\t\t * @return\tthe board position that is stored in this entry.\n\t\t */\n",
    "1125": "\t/**\n\t * Returns the selected collection.\n\t * \n\t * @return the currently selected collection item\n\t */\n",
    "1127": "\t/** This class has 4 bytes per atom */\n",
    "1129": "\t/** Any multiple of 4 will do, 72 might be common */\n",
    "1135": "\t\t/**\n\t\t * This method should return, if it knows, the number of bytes\n\t\t * that will be decoded. Many formats such as uuencoding provide\n\t\t * this information. By default we return the maximum bytes that\n\t\t * could have been encoded on the line.\n\t\t */\n",
    "1138": "\t\t/**\n\t\t * This method does an actual decode. It takes the decoded bytes and\n\t\t * writes them to the OutputStream. The integer <i>l</i> tells the\n\t\t * method how many bytes are required. This is always <= bytesPerAtom().\n\t\t */\n",
    "1144": "\t\t/**\n\t\t * Alternate decode interface that takes a String containing the encoded\n\t\t * buffer and returns a byte array containing the data.\n\t\t * @exception CEFormatException An error has occurred while decoding\n\t\t */\n",
    "1146": "\t\t/**\n\t\t * Decode the contents of the inputstream into a buffer.\n\t\t */\n",
    "1150": "\t/**\n\t * Sets the basic delay step to be used, in milliseconds.\n\t * \n\t * @param msStep delay time in milliseconds\n\t */\n",
    "1152": "\t/**\n\t * Returns the current delay time in milliseconds.\n\t * \n\t * @return current delay time in milliseconds\n\t */\n",
    "1153": "\t/**\n\t * Sets the intended sequence length of delay steps.\n\t * Positive values are used to somewhat reduce the total time of the\n\t * sequence by reducing the effective single step delay time.\n\t * \n\t * @param len intended sequence length of delay steps\n\t */\n",
    "1155": "\t/**\n\t * Returns the current intended sequence length of delay steps.\n\t * @return the current intended sequence length of delay steps\n\t */\n",
    "1157": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings.\n\t * \n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1158": "\t/**\n\t * Construct and return a new object for the standard step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new standard <code>Delays</code> object\n\t */\n",
    "1159": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1161": "\t/**\n\t * Handle save button action.\n\t */\n",
    "1162": "\t/**\n\t * Construct and return a new object for the undo/redo step delay\n\t * from the Settings, and the indicated intended sequence length.\n\t * \n\t * @param seqLength intended length of the sequence\n\t * @return new undo/redo <code>Delays</code> object\n\t */\n",
    "1163": "\t/**\n\t * Start the Delay object.  If not yet started, this determines and\n\t * remembers \"now\" as the base time stamp for the next (first) delay.\n\t */\n",
    "1164": "\t/**\n\t * Stops the Delay object.\n\t * This just invalidates the last remembered wall clock time.\n\t */\n",
    "1169": "\t/**\n\t * Based of the mathematical value from {@link #effStep(boolean)}\n\t * we compute a meaningful approximation,\n\t * and return an <code>int</code> value.\n\t * \n\t * @param slowstep whether this delay shall be extra large\n\t * @return integral approximation of current delay in milliseconds\n\t */\n",
    "1172": "\t\t\t/**\n\t\t\t * Starts a new backward search.\n\t\t\t */\n",
    "1173": "\t/**\n\t * The main method of this application.\n\t * <p>\n\t * \n\t * @param argv passed parameters\n\t */\n",
    "1174": "\t/**\n\t * We are going to wait somewhat to create an observable motion.\n\t * If the wait amount is zero, we do not even call {@link Thread#sleep(long)}.\n\t * \n\t * @param reassertIntr whether a possible <code>InterruptedException</code>\n\t *                      is to be reasserted (<em>not</em> rethrown).\n\t *                      Else it is ignored.\n\t */\n",
    "1177": "\t/**\n\t * Decrypts special character regions of the ascii code.\n\t * \n\t * @param c  <code>Character</code> to be decrypted\n\t * @param start minimum ascii value to be used for decrypting\n\t * @param end   maximum ascii value to be used for decrypting\n\t * @param offset  offset the character has to be shifted by\n\t * @return the decrypted <code>Character</code>\n\t */\n",
    "1179": "\t/**\n\t * Restores the last saved properties.\n\t * \n\t * @param evt\n\t */\n",
    "1183": "\t/**\n\t * Inform every listener about the change of the state.\n\t */\n",
    "1186": "\t/**\n\t * Adds the passed listener.\n\t * \n\t * @param listener  listener to be added\n\t */\n",
    "1188": "\t/**\n\t * Returns the value of the spinner as double.\n\t * \n\t * @return the value\n\t */\n",
    "1189": "\t/**\n\t * Returns the value of the spinner as integer.\n\t * \n\t * @return the value\n\t */\n",
    "1193": "\t/**\n\t * If the available memory (RAM) is less than this bound,\n\t * then we are going to remove the eldest entry whenever we add a new one,\n\t * i.e. we do not expand our memory foot print.\n\t * <p>\n\t * Negative values indicate \"no such limit exists\".\n\t * \n\t * @param minRAMinMiB the minRAMinMiB to set\n\t * @see Utilities#getMaxUsableRAMinMiB()\n\t */\n",
    "1194": "\t/**\n\t * Inside this method (we override it) we implement our deletion strategy.\n\t * Either we return {@code true}, indicating the caller shall delete\n\t * that eldest entry, but in that case we are not allowed to change\n\t * the object ourselves.\n\t * <p>\n\t * Or we decide to take our own steps, return {@code false} to hinder\n\t * the caller to take any action, but may have removed one or more\n\t * elements ourselves.\n\t * \n\t * @param eldest   the currently eldest element, deletion candidate\n\t * @return whether the caller shall really remove that eldest entry\n\t */\n",
    "1197": "\t/**\n\t * This is like {@link LinkedHashMap#get(Object)}, but forces the\n\t * correct type of the key.\n\t * \n\t * @param key the key for which we search the mapped value\n\t * @return the mapped value, or {@code null}.\n\t */\n",
    "1199": "\t/**\n\t * Adds a key/value pair to the cache mapping.\n\t * We expect the key to be new, but we do not enforce (or check) that,\n\t * since the typical cache user will first use {@link #getV(Object)},\n\t * anyhow.\n\t * \n\t * @param key   key of the new cache entry\n\t * @param value value of the new cache entry\n\t */\n",
    "1200": "\t/**\n\t * Trim down the memory usage to the currently needed amount.\n\t * This is a user hint, and we need not really take any action,\n\t * e.g. if the implementation does not know how to do that.\n\t * @see ArrayList#trimToSize()\n\t */\n",
    "1215": "\t/**\n\t * Creation of a box data clone.\n\t *\n\t *@return  the cloned box data object\n\t */\n",
    "1216": "\t/**\n\t * Define the initial location (position) of a box.\n\t *\n\t *@param boxNo       number of the box, the location of which is to be set\n\t *@param boxPosition position of the box\n\t */\n",
    "1218": "\t/**\n\t * Change the location (position) of a box.\n\t *\n\t *@param boxNo\t\t number of the box, the location of which is to be set\n\t *@param boxPosition new position of the box\n\t */\n",
    "1219": "\t/**\n\t * Set / change the position of all boxes at once.\n\t * The passed array often contains an additional player position\n\t * (at the end of the array).  We don't care much, the array is\n\t * just one larger than necessary.\n\t *\n\t *@param  newBoxPositions the new box positions to be set\n\t */\n",
    "1221": "\t/**\n\t * Activate a box.\n\t *\n\t *@param  boxNo number of the box that shall be activated\n\t */\n",
    "1223": "\t/**\n\t * Deactivate a box.\n\t * Implies {@link #removeBoxFromCorral(int)}.\n\t *\n\t *@param  boxNo number of the box that shall be set inactive\n\t */\n",
    "1224": "\t/**\n\t * Tell whether a box is active.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is active\n\t */\n",
    "1225": "\t/**\n\t * Tell whether a box is inactive.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return state of the box: <code>true</code> = is inactive\n\t */\n",
    "1226": "\t/**\n\t * Mark a specified box to be frozen.\n\t * <p>\n\t * Such a box can never again be moved (pushed), regardless all other\n\t * possible changes on the board... except for an \"undo\" action.\n\t * <p>\n\t * Only boxes on goals are to be marked as frozen, as otherwise\n\t * it would constitute a deadlock condition.\n\t *\n\t *@param  boxNo number of the box to be marked \"frozen\"\n\t */\n",
    "1227": "\t/**\n\t * Sets a new level for playing.\n\t * \n\t * @param levelNo\n\t *            number of the level to set (first is 1)\n\t */\n",
    "1228": "\t/**\n\t * Tell whether a box is frozen.\n\t * A box can be frozen on a goal, only, since otherwise it would be\n\t * a deadlock condition.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       whether the box is frozen\n\t */\n",
    "1230": "\t/**\n\t * Mark a specified box to not be frozen, anymore\n\t * This method is used for \"undo\" (on a frozen box).\n\t *\n\t *@param  boxNo number of the box to be unmarked\n\t */\n",
    "1231": "\t/**\n\t * Mark a specified box to be part of a corral.\n\t *\n\t *@param  boxNo number of the box which is part of a corral\n\t */\n",
    "1232": "\t/**\n\t * Mark a specified box to not be part of any corral.\n\t *\n\t *@param  boxNo number of the box which is not part of any corral\n\t */\n",
    "1233": "\t/**\n\t * Tell whether a box is part of a corral.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return <code>true</code> = box is part of a corral\n\t */\n",
    "1234": "\t/**\n\t * Tell the location of a box by its number.\n\t *\n\t *@param  boxNo number of the box we want to investigate\n\t *@return       position (location) of the box\n\t */\n",
    "1236": "\t/**\n\t * Tells whether all our boxes are on some goal.\n\t *\n\t *@return <code>true</code> if all boxes are on a goal, and\n\t *       <code>false</code> if at least one box is on a non-goal\n\t */\n",
    "1237": "\t/**\n\t * Returns the number of boxes on a goal.\n\t * \n\t * @return number of boxes on a goal\n\t */\n",
    "1238": "\t/**\n\t * Returns whether all active boxes are located on a backward goal.\n\t * \n\t * @return <code>true</code> if all active boxes are on backward goals, and\n\t * <code>false</code> if at least one active box not on a backward goal.\n\t */\n",
    "1239": "\t/**\n\t * Tell whether all corral boxes are located on goals.\n\t *\n\t *@return <code>true</code> if all corral boxes are on goals, and\n\t *\t\t <code>false</code> if at least one corral box is on a non-goal\n\t */\n",
    "1242": "\t/**\n\t * Mark all boxes as not frozen.\n\t */\n",
    "1243": "\t/**\n\t * Tell the overall size of the large index byte array.\n\t * Corresponds to the member of same name of array objects.\n\t * @return size of the array\n\t */\n",
    "1244": "\t/**\n\t * Reads the element value at the passed large index.\n\t * Models the array read access.\n\t * \n\t * @param lax large index of the array member\n\t * @return value of the array member at the index {@code lax}\n\t */\n",
    "1246": "\t/**\n\t * Writes an element value at the passed large index.\n\t * \n\t * @param lax large index of the array member\n\t * @param val the value to store\n\t * @return the just stored value\n\t */\n",
    "1248": "\t/**\n\t * Modifies the byte at the specified large array index\n\t * by \"oring in\" the passed byte value.\n\t * Models the operation {@code (arr[lax] |= val)}.\n\t * \n\t * @param lax large index of the array member to modify\n\t * @param val the value to \"or in\"\n\t * @return the resulting (stored) byte value\n\t */\n",
    "1253": "\t/**\n\t * Fetch a bit sized fragment of a {@code long} from a contiguous series\n\t * of bits from this \"array\".\n\t * The result is presented in unsigned interpretation (except the\n\t * {@code bitcnt} is 64).\n\t * \n\t * @param bitlax index of the first bit (not byte) to fetch\n\t * @param totbits number of bits to fetch (at most 64)\n\t * @return the indicated bits as unsigned value\n\t */\n",
    "1257": "\t/**\n\t * Shows dialog which informs about missing file.\n\t * <p>\n\t * If error is critical (it is when <code>messageType</code> equals\n\t * <code>JOptionPane.ERROR_MESSAGE</code> then application is closed.\n\t *\n\t * @param filePath\tpath of the missing file\n\t * @param messageType\t<code>JOptionPane.WARNING_MESSAGE</code> if missing file is non-critical;\n\t *\t\t\t\t\t\t<code>JOptionPane.ERROR_MESSAGE</code> if missing file is critical\n\t */\n",
    "1258": "\t/**\n\t * Tells, whether the SparseArray does not contain any non-{@code null}\n\t * element.\n\t * <p>\n\t * This is also part of the {@link Map} interface.\n\t * \n\t * @return whether the SparseArray is empty\n\t */\n",
    "1259": "\t/**\n\t * Removes all entries from the object.\n\t * <p>\n\t * This method is also part of the map interface.\n\t */\n",
    "1264": "\t/**\n\t * Load properties from a file.\n\t *\n\t * @param fileName\tname of the file\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1268": "\t/**\n\t * Load the properties corresponding to the passed language code.\n\t *\n\t * @param languageCode code of the language (example: \"en\")\n\t * @return\t<code>Properties</code> variable containing loaded properties\n\t */\n",
    "1275": "\t/**\n\t * Read the array element at the specified index.\n\t * \n\t * @param inx indexes the (sparse) array\n\t * @return {@code null}, or the element at index {@code inx}\n\t */\n",
    "1277": "\t/**\n\t * This is a helper method for {@link #wr(Node, byte, long, Object)}.\n\t * We store a new reference where we fetched the last {@code Node}\n\t * reference during tree path scanning: at {@code Node pa}\n\t * with index {@code painx}.\n\t * If {@code pa} is {@code null}, we must have fetched from the\n\t * {@link #root} and thus we here store to it.\n\t * \n\t * @param pa    the node to which we store a new reference, or {@code null}\n\t * @param painx the index of the store\n\t * @param nref  the new reference to store\n\t */\n",
    "1278": "\t/**\n\t * Reloads all non-static GUI components.\n\t */\n",
    "1279": "\t/**\n\t * Redraws the screen and waits for \"enter\" if needed.\n\t * \n\t * @param waitForEnter  whether the method is to wait for enter after drawing\n\t */\n",
    "1281": "\t/**\n\t * Stores the specified value into the array slot with the specified index,\n\t * and returns the former value of that array slot.\n\t * <p>\n\t * Storing a {@code null} value means to remove any former value\n\t * from the indexed array slot.\n\t * \n\t * @param inx the index of the array slot to write to\n\t * @param val the value to store at index {@code inx}\n\t * @return the former content of the array slot at index {@code inx}\n\t */\n",
    "1283": "\t/**\n\t * Removes a box from the passed position.\n\t * \n\t * @param position the position a box is to be removed from.\n\t */\n",
    "1287": "\t/**\n\t * Debug: Calculates and displays the lower bound for all levels.\n\t */\n",
    "1290": "\t\t\t/**\n\t\t\t * Starts a new forward search.\n\t\t\t */\n",
    "1291": "\t/**\n\t * Removes the box having the passed number.\n\t * \n\t * @param boxNo the number of the box that is to be removed.\n\t */\n",
    "1296": "\t/**\n\t * Returns whether the game is in play mode, just now.\n\t * \n\t * @return <code>true</code>, if the game is in play mode\n\t */\n",
    "1300": "\t/**\n\t * Removes a box from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the box is to be removed from.\n\t * @param y the y-coordinate of the position the box is to be removed from.\n\t */\n",
    "1304": "\t/**\n\t * Returns whether the game is in editor mode, just now.\n\t * \n\t * @return <code>true</code>, iff the game is in editor mode\n\t */\n",
    "1308": "\t/**\n\t * Removes a wall from the passed position.\n\t * \n\t * @param position the position a wall is to be removed from.\n\t */\n",
    "1313": "\t/**\n\t * Sets the \"invalid level\" mode. The current level is invalid. Therefore\n\t * the user isn't allowed to play it. Furthermore the solver and the optimizer are disabled.\n\t */\n",
    "1319": "\t/**\n\t * Removes a wall from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the wall is to be removed from.\n\t * @param y the y-coordinate of the position the wall is to be removed from.\n\t */\n",
    "1344": "\t/**\n\t * Removes a goal from the passed position.\n\t * \n\t * @param position the position a goal is to be removed from.\n\t */\n",
    "1373": "\t/**\n\t * Removes a goal from the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x\tthe x-coordinate of the position the goal is to be removed from.\n\t * @param y the y-coordinate of the position the goal is to be removed from.\n\t */\n",
    "1378": "\t/**\n\t * Determines the first key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the first key in the sparse array\n\t * @see SortedMap#firstKey()\n\t */\n",
    "1384": "\t/**\n\t * Determines the last key associated with a non-{@code null} value.\n\t * Sorting order is native: signed.\n\t * @return the last key in the sparse array\n\t * @see SortedMap#lastKey()\n\t */\n",
    "1393": "\t/**\n\t * Removes the player from the board.\n\t */\n",
    "1453": "\t/**\n\t * Sets a box at the passed position.\n\t * \n\t * @param position the position a box is to be set.\n\t */\n",
    "1496": "    /**\n     * Method that is backed to a submit button of a form.\n     */\n",
    "1503": "\t/**\n\t * Sets a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t */\n",
    "1518": "\t/**\n\t * Generate an id for a new lock. Uniqueness per cache instance is very \n\t * desirable but not absolutely critical. Must be called from one of the \n\t * synchronized methods of this class.\n\t */\n",
    "1519": "\t/**\n\t * decrement a lock and put it back in the cache\n\t */\n",
    "1534": "    /**\n     * Gets a value of an element which matches the given key.\n     * @param key the key of the element to return.\n     * @return The value placed into the cache with an earlier put, or null if not found or expired\n     * @throws CacheException\n     */\n",
    "1536": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * \n\t * @param position the position a box is to be set.\t \n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1537": "    /**\n     * Puts an object into the cache.\n     * @param key a {@link Serializable} key\n     * @param value a {@link Serializable} value\n     * @throws CacheException if the parameters are not {@link Serializable}, the {@link CacheManager}\n     * is shutdown or another {@link Exception} occurs.\n     */\n",
    "1538": "    /**\n     * Removes the element which matches the key.\n     * <p>\n     * If no element matches, nothing is removed and no Exception is thrown.\n     * @param key the key of the element to remove\n     * @throws CacheException\n     */\n",
    "1540": "    /**\n     * Remove all elements in the cache, but leave the cache\n     * in a useable state.\n     * @throws CacheException\n     */\n",
    "1542": "    /**\n     * Remove the cache and make it unuseable.\n     * @throws CacheException\n     */\n",
    "1543": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1545": "    /**\n     * Calls to this method should perform there own synchronization.\n     * It is provided for distributed caches. Because EHCache is not distributed\n     * this method does nothing.\n     */\n",
    "1546": "\t/**\n\t * Enables or disables the buttons for \"undo\" and \"redo\" by inspection of\n\t * the history, i.e. whether there is something to undo or redo.\n\t */\n",
    "1547": "\t\t/**\n\t\t * The timestamp on the cached data\n\t\t */\n",
    "1548": "    /**\n     * Gets the next timestamp;\n     */\n",
    "1549": "    /**\n     * Returns the lock timeout for this cache.\n     */\n",
    "1550": "\t\t/**\n\t\t * The actual cached data\n\t\t */\n",
    "1552": "\t\t/**\n\t\t * Lock the item\n\t\t */\n",
    "1554": "\t\t/**\n\t\t * Not a lock!\n\t\t */\n",
    "1555": "\t\t/**\n\t\t * Is this item visible to the timestamped\n\t\t * transaction?\n\t\t */\n",
    "1558": "\t\t/**\n\t\t * Don't overwite already cached items\n\t\t */\n",
    "1561": "\t/**\n\t * Sets a box with the passed number at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a box is to be set.\n\t * @param y the y-coordinate of the position a box is to be set.\n\t * @param boxNo\tthe number of the box to be set\n\t */\n",
    "1563": "\t/**\n\t * Check if this lock mode is more restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is more restrictive than given lock mode\n\t */\n",
    "1564": "\t/**\n\t * Check if this lock mode is less restrictive than the given lock mode.\n\t *\n\t * @param mode LockMode to check\n\t * @return true if this lock mode is less restrictive than given lock mode\n\t */\n",
    "1572": "\t\t/**\n\t\t * Increment the lock, setting the\n\t\t * new lock timeout\n\t\t */\n",
    "1579": "\t\t/**\n\t\t * Decrement the lock, setting the unlock\n\t\t * timestamp if now unlocked\n\t\t * @param currentTimestamp\n\t\t */\n",
    "1587": "\t\t/**\n\t\t * Can the timestamped transaction re-cache this\n\t\t * locked item now?\n\t\t */\n",
    "1592": "\t\t/**\n\t\t * Was this lock held concurrently by multiple\n\t\t * transactions?\n\t\t */\n",
    "1599": "\t\t/**\n\t\t * Yes, this is a lock\n\t\t */\n",
    "1605": "\t\t/**\n\t\t * locks are not returned to the client!\n\t\t */\n",
    "1617": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * \n\t * @param position the position the objects are to be set.\n\t */\n",
    "1634": "\t/**\n     * Defines the mapper to map source to destination files.\n     */\n",
    "1638": "\t/**\n\t * Copies the data of the current level to the clipboard, optionally\n\t * using run length encoding (RLE).\n\t * \n\t * @param withRLE whether to use RLE\n\t * @see #exportLevelToClipboard(boolean, boolean)\n\t */\n",
    "1647": "\t/**\n\t * Sets a box and a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the objects are to be set.\n\t * @param y the y-coordinate of the position the objects are to be set.\n\t */\n",
    "1665": "\t/**\n\t * Sets a a goal at the passed position.\n\t * \n\t * @param position the position the goal is to be set.\n\t */\n",
    "1680": "\t/**\n\t * Sets a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a goal is to be set.\n\t * @param y the y-coordinate of the position a goal is to be set.\n\t */\n",
    "1692": "\t/**\n\t * Sets a wall at the passed position.\n\t * \n\t * @param position the position the wall is to be set.\n\t */\n",
    "1704": "\t/**\n\t * Sets a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position a wall is to be set.\n\t * @param y the y-coordinate of the position a wall is to be set.\n\t */\n",
    "1716": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param position the position the box number is to be set.\n\t */\n",
    "1727": "\t/**\n\t * Sets the number of a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param boxNo\tthe box number to be set\n\t * @param x the x-coordinate of the position the box number is to be set.\n\t * @param y the y-coordinate of the position the box number is to be set.\n\t */\n",
    "1738": "\t/**\n\t * Sets the square at the the passed position to be an advanced deadlock\n\t * square.\n\t * \n\t * @param position the position of the square\n\t */\n",
    "1761": "\t/**\n\t * Sets the player to the passed position.\n\t * \n\t * @param position Position the player is to be set at.\n\t */\n",
    "1778": "\t/**\n\t * Sets the player to the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position the player is to be set at.\n\t * @param y the y-coordinate of the position the player is to be set at.\n\t */\n",
    "1808": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1837": "\t/**\n\t * Returns whether the square at the the passed position is a corral\n\t * forcer square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a corral forcer square at the\n\t *                           passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a corral forcer square at the\n\t *                           passed position\n\t */\n",
    "1865": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1889": "\t/**\n\t * Returns whether there is a box at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a box at the passed position,\n\t * or<br> <code>false</code> if there isn't a box at the passed position\n\t */\n",
    "1911": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1916": "\t/**\n\t * Returns if a box has been selected.\n\t * \n\t * @return <code>true</code> a box has been selected <code>false</code> no box\n\t *         has been selected\n\t */\n",
    "1931": "\t/**\n\t * Returns whether there is a wall at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a wall at the passed position,\n\t * or<br> <code>false</code> if there isn't a wall at the passed position\n\t */\n",
    "1946": "\t/**\n\t * Returns whether the player reachable squares are to be highlighted.\n\t * \n\t * @return <code>true</code> if the player reachable squares are to be highlighted,<br>\n\t * \t      <code>false</code> otherwise\n\t */\n",
    "1956": "\t/**\n\t * The location of ant-installer.jar and sysout.jar and possibly jgoodies-edited-1_2_2.jar\n\t * @param antInstallLib The antInstallLib to set.\n\t */\n",
    "1958": "\t/**\n\t * The location of ant.jar and ant-launcher.jar\n\t * @param antLib The antLib to set.\n\t */\n",
    "1959": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "1991": "\t/**\n\t * Returns the position of the selected box.\n\t * \n\t * @return the position of the selected box\n\t */\n",
    "2003": "\t/**\n\t * Returns whether there is a goal at the passed position.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a goal at the passed position,\n\t * or<br> <code>false</code> if there isn't a goal at the passed position\n\t */\n",
    "2086": "\t/**\n\t * Returns whether the square at the passed position is either a goal\n\t * or a wall.\n\t * \n\t * @param position  the position of the square\n\t * @return <code>true</code> if the square is a goal or a wall, or<br>\n\t * \t\t  <code>false</code> otherwise\n\t */\t\n",
    "2156": "\t/**\n\t * Plays the next movements from the history movements, in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t * \n\t * @param redoAllMovements whether all movements have to be redone\n\t */\n",
    "2159": "\t/**\n\t * Returns whether there is a corral forcer at the passed position.\n\t * A corral forcer divides the board into areas the player can reach\n\t * and can't reach.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a corral forcer at the position,\n\t * or<br> <code>false</code> if there isn't a corral forcer at the position \n\t */\n",
    "2165": "    /**\n     * Returns a list of all elements in the cache. Only keys of non-expired\n     * elements are returned.\n     * <p/>\n     * The returned keys are unique and can be considered a set.\n     * <p/>\n     * The List returned is not live. It is a copy.\n     * <p/>\n     * The time taken is O(n), where n is the number of elements in the cache. On\n     * a 1.8Ghz P4, the time taken is approximately 200ms per 1000 entries. This method\n     * is not syncrhonized, because it relies on a non-live list returned from {@link #getKeys()}\n     * , which is synchronised, and which takes 8ms per 1000 entries. This way\n     * cache liveness is preserved, even if this method is very slow to return.\n     * <p/>\n     * Consider whether your usage requires checking for expired keys. Because\n     * this method takes so long, depending on cache settings, the list could be\n     * quite out of date by the time you get it.\n     *\n     * @return a list of {@link Serializable} keys\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2169": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2175": "    /**\n     * Returns the number of elements in the memory store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2177": "    /**\n     * Returns the number of elements in the disk store.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2180": "\t/**\n\t * Returns whether there is a backward search goal at the passed position.\n\t * The backward search goals are the positions of the boxes\n\t * at the beginning of a level.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is a backward search goal\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't a backward search goal\n\t *                           at the passed position\n\t */\n",
    "2181": "    /**\n     * Gets the status attribute of the Cache\n     *\n     * @return The status value from the Status enum class\n     */\n",
    "2186": "\t/**\n\t * Undoes the last movement in an own thread,\n\t * in order to avoid blocking the event dispatcher thread (EDT).\n\t */\n",
    "2187": "    /**\n     * Receive a Locator object for document events.\n     */\n",
    "2191": "    /**\n     * Number of times a requested item was found in the Memory Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2193": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2195": "    /**\n     * Number of times a requested item was found in the Disk Store\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2196": "    /**\n     * Finds a creator method.\n     */\n",
    "2197": "    /**\n     * Builds a method name from an element or attribute name.\n     */\n",
    "2198": "    /**\n     * Number of times a requested element was not found in the cache. This\n     * may be because it expired, in which case this will also be recorded in {@link #getMissCountExpired},\n     * or because it was simply not there.\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2203": "    /**\n     * Number of times a requested element was found but was expired\n     *\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     */\n",
    "2205": "\t/**\n\t * Returns whether there is an empty square at the passed position.\n\t * NB: a goal is <em>not</em> considered to be empty.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if there is an empty square\n\t *                           at the passed position, or<br>\n\t * \t\t  <code>false</code> if there isn't an empty square\n\t *                           at the passed position\n\t */\n",
    "2207": "    /**\n     * Gets the cache name\n     */\n",
    "2208": "    /**\n     * Formats the current document location.\n     */\n",
    "2209": "    /**\n     * Gets timeToIdleSeconds\n     */\n",
    "2211": "    /**\n     * Gets timeToLiveSeconds\n     */\n",
    "2213": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * that means: not a box and not a wall.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2219": "    /**\n     * Does the overflow go to disk\n     */\n",
    "2221": "    /**\n     * Gets the maximum number of elements to hold in memory\n     */\n",
    "2223": "\t/**\n\t * Returns whether the square at the passed is accessible,\n\t * i.e. not a box and not a wall.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible\n\t */\n",
    "2224": "    /**\n     * The policy used to evict elements from the {@link net.sf.ehcache.store.MemoryStore}.\n     * This can be one of:\n     * <ol>\n     * <li>LRU - least recently used\n     * <li>LFU - least frequently used\n     * <li>FIFO - first in first out, the oldest element by creation time\n     * </ol>\n     * The default value is LRU\n     *\n     * @since 1.2\n     */\n",
    "2225": "    /**\n     * Gets the disk cache path\n     */\n",
    "2227": "    /**\n     * Gets a Map of caches\n     */\n",
    "2229": "    /**\n     * Checks whether this cache element has expired.\n     * <p/>\n     * The element is expired if:\n     * <ol>\n     * <li> the idle time is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the time to live is non-zero and has elapsed, unless the cache is eternal; or\n     * <li> the value of the element is null.\n     * </ol>\n     *\n     * @return true if it has expired\n     * @throws IllegalStateException if the cache is not {@link Status#STATUS_ALIVE}\n     * @throws NullPointerException  if the element is null\n     */\n",
    "2233": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2235": "    /**\n     * Clones a cache. This is only legal if the cache has not been\n     * initialized. At that point only primitives have been set and no\n     * {@link net.sf.ehcache.store.LruMemoryStore} or {@link net.sf.ehcache.store.DiskStore} has been created.\n     *\n     * @return an object of type {@link Cache}\n     * @throws CloneNotSupportedException\n     */\n",
    "2238": "        /**\n         * Sets the class name\n         *\n         * @param fullyQualifiedClassPath\n         */\n",
    "2241": "\t/**\n\t * Returns whether the square at the passed position is accessible for\n\t * a box.  A square is accessible for a box if there is neither a wall\n\t * nor a box at this square AND the square is no simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is accessible for a box, or<br>\n\t * \t\t  <code>false</code> if the square isn't accessible for a box\n\t */\n",
    "2242": "        /**\n         * Sets the name of the cache. This must be unique\n         */\n",
    "2243": "    /**\n     * Use this to access the service in order to register and unregister listeners\n     *\n     * @return the CacheEventNotificationService instance for this cache.\n     */\n",
    "2244": "        /**\n         * Sets the maximum objects to be held in memory\n         */\n",
    "2247": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element was removed\n     * @param element\n     * @see CacheEventListener#notifyElementRemoved\n     */\n",
    "2248": "        /**\n         * Sets the eviction policy. An invalid argument will set it to null\n         */\n",
    "2251": "    /**\n     * Notifies all registered listeners, in no guaranteed order, that an element has expired\n     * @param element\n     * @see CacheEventListener#notifyElementExpired\n     */\n",
    "2252": "    /**\n     * Adds a listener to the notification service. No guarantee is made that listeners will be\n     * notified in the order they were added.\n     * @param cacheEventListener\n     * @return true if the listener is being added and was not already added\n     */\n",
    "2253": "    /**\n     * Removes a listener from the notification service.\n     * @param cacheEventListener\n     * @return true if the listener was present\n     */\n",
    "2254": "    /**\n     * Gets a list of the listeners registered to this class\n     * @return a list of type <code>CacheEventListener</code>\n     */\n",
    "2255": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2261": "        /**\n         * Sets whether elements are eternal. If eternal,  timeouts are ignored and the element\n         * is never expired.\n         */\n",
    "2266": "\t/**\n\t * Returns whether the current level is valid.\n\t * <P>\n\t * If the level is invalid an info message is displayed.\n\t * \n\t * @return <code>true</code> if the level is valid, and<br>\n\t *        <code>false</code> if the level is invalid\n\t */\n",
    "2268": "\t/**\n\t * Uses JavaGroups to broadcast the supplied notification message across the\n\t * cluster.\n\t * \n\t * @param message\n\t *            The cluster nofication message to broadcast.\n\t */\n",
    "2270": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2272": "\t/**\n\t * We are not using the caching, so we just return something that identifies\n\t * us. This method should never be called directly.\n\t */\n",
    "2273": "\t/**\n\t * A callback that is fired when a new member joins the cluster. This method\n\t * should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who just joined.\n\t */\n",
    "2274": "\t/**\n\t * A callback that is fired when an existing member leaves the cluster. This\n\t * method should never be called directly.\n\t * \n\t * @param address\n\t *            The address of the member who left.\n\t */\n",
    "2278": "        /**\n         * Sets the time to idle for an element before it expires. Is only used\n         * if the element is not eternal.\n         */\n",
    "2280": "\t/**\n\t * Returns whether the square at the passed position is a wall\n\t * or a simple deadlock square.\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock square, or<br>\n\t * \t\t  <code>false</code> if the square is neither a wall nor a simple\n\t *                           deadlock square\n\t */\n",
    "2281": "    /**\n     * Shuts down the CacheManager.\n     * <p/>\n     * If the shutdown occurs on the singleton, then the singleton is removed, so that if a singleton access method\n     * is called, a new singleton will be created.\n     */\n",
    "2283": "        /**\n         * Sets whether elements can overflow to disk when the in-memory cache\n         * has reached the set limit.\n         */\n",
    "2285": "        /**\n         * Sets whether, for caches that overflow to disk,\n         * the disk cache persist between CacheManager instances\n         */\n",
    "2288": "        /**\n         * Sets the interval in seconds between runs of the disk expiry thread.\n         * <p/>\n         * 2 minutes is the default.\n         * This is not the same thing as time to live or time to idle. When the thread runs it checks\n         * these things. So this value is how often we check for expiry.\n         */\n",
    "2291": "\t/**\n\t * Returns whether the passed position is an outer square or a wall.\n\t * An outer square is a square which is outside the reachable area\n\t * of the player even if there weren't any boxes on the board.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is an outer square or a wall,\n\t * or<br> <code>false</code> if the square isn't an outer square or a wall \n\t */\n",
    "2311": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2329": "\t/**\n\t * This method is called upon plug-in activation\n\t */\n",
    "2331": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "2338": "    /**\n     *\tSet the current input focus to self's destination entry field\n     */\n",
    "2351": "\t/**\n\t * Returns whether the square at the passed position is a simple\n\t * deadlock square.\n\t * <p>\n\t * The search direction doesn't matter, because the simple deadlock squares\n\t * of the other direction can never be reached from a specific direction.\n\t * Therefore both the forward and the backward simple deadlock squares\n\t * are checked.\n\t * <p>\n\t * The arguments are not checked against the board dimensions.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a simple deadlock square,\n\t * or<br> <code>false</code> if the square isn't a simple deadlock square\n\t */\n",
    "2362": "\t/**\n\t * Sets a new collection for playing.\n\t * \n\t * @param levelCollection\n\t *            the level collection to be set\n\t */\n",
    "2377": "\t/**\n\t * Uses the standard container selection fileDialog to choose the new value\n\t * for the container field.\n\t */\n",
    "2378": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2418": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock forward square\n\t */\n",
    "2441": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * a simple deadlock backward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2449": "\t/**\n\t * If the current level collection contains the level with the\n\t * specified data base ID, we return the title of that current collection.\n\t * Otherwise we return null.\n\t * <p>\n\t * NOTE: There may be other collections containing that levelID.\n\t * \n\t * @param levelID ID of the level to search for\n\t * @return the title of the collection containing the levelID\n\t */\n",
    "2455": "    /**\n     * Save a transient object.\n     * An id is generated, assigned to the given object and returned.\n     */\n",
    "2463": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a simple deadlock backward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or a simple\n\t *                           deadlock backward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a simple\n\t *                           deadlock backward square\n\t */\n",
    "2478": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is\n\t * an advanced simple deadlock forward square.\n\t *  \n\t * @param position the position of the square\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2488": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the square at the passed position is a advanced simple deadlock forward square.\n\t *  \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the square is a wall or an advanced\n\t *                           simple deadlock forward square,\n\t * or<br> <code>false</code> if the square isn't a wall nor a advanced\n\t *                           simple deadlock forward square\n\t */\n",
    "2500": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2512": "\t/**\n\t * Returns whether there is a box and a goal at the passed position.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @param position the position of the square\n\t * @return <code>true</code> if there is a box and a goal\n\t *                           at the passed position,\n\t * or<br> <code>false</code> if there isn't a box and a goal\n\t *                           at the passed position\n\t */\n",
    "2521": "\t/**\n\t * Returns whether there is a player in the level.\n\t * <p>\n\t * Usually there is a player in every level. This method is just used for\n\t * determining \"special\" squares for displaying them correctly. \n\t * \n\t * @return <code>true</code> if there is a player in the level,\n\t * or<br> <code>false</code> if there isn't a player in the level\n\t */\n",
    "2528": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square.\n\t * \n\t * @param position the position of the square\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2543": "\t/**\n\t * Method only for debugging:\n\t * Returns whether the passed position is marked.\n\t * <p>\n\t * Marked positions are displayed with a little square graphic.\n\t * \n\t * @param x the x-coordinate of the position\n\t * @param y the y-coordinate of the position\n\t * @return <code>true</code> if the passed position is marked,\n\t * or<br> <code>false</code> if the passed position is not marked\n\t */\n",
    "2552": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param position the position a marking is to be removed from.\n\t */\n",
    "2561": "\t/**\n\t * Removes a marking from the passed position.\n\t * \n\t * @param x\tthe x-coordinate of the position the marking is to be removed from.\n\t * @param y the y-coordinate of the position the marking is to be removed from.\n\t */\n",
    "2569": "\t/**\n\t * Removes all marking from the board.\n\t */\n",
    "2576": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param position the position the marking is to be set.\n\t */\n",
    "2580": "    /**\n     * associate a proxy that was instantiated by another session with this session\n     */\n",
    "2583": "\t/**\n\t * Sets a marking at the passed position.\n\t * \n\t * @param x the x-coordinate of the position a marking is to be set.\n\t * @param y the y-coordinate of the position a marking is to be set.\n\t */\n",
    "2591": "\t/**\n\t * Marks the passed position with the passed value.\n\t * \n\t * @param position  what position is to be marked\n\t * @param markValue with what value the position id to be marked\n\t */\n",
    "2600": "\t/**\n\t * Changes the making status of the passed position.\n\t * \n\t * @param position the position is to be changed\n\t */\n",
    "2608": "\t/**\n\t * Returns the number of the box located at the passed position.\n\t * For positions without a box the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the box\n\t */\n",
    "2616": "\t/**\n\t * Returns the number of the goal located at the passed position.\n\t * For positions without a goal the return value is undefined.\n\t * \n\t * @param position the position of the square\t \n\t * @return\tthe number of the goal\n\t */\n",
    "2625": "\t/**\n\t * Returns the position of the goal with the passed goal number.\n\t * \n\t * @param goalNo the number of the goal\n\t * @return the position of the goal\n\t */\n",
    "2633": "\t/**\n\t * Returns the distance which the player has to walk,\n\t * starting from one square in order to reach a second square.\n\t * \n\t * @param fromSquare player start position\n\t * @param toSquare\t player walk destination\n\t * @return number of steps the player needs to walk\n\t */\n",
    "2641": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param position Board position to be set.\n\t */\n",
    "2650": "\t/**\n\t * Sets a new board position.\n\t * \n\t * @param positions box and player positions to be set.\n\t */\n",
    "2659": "\t/**\n\t * Removes all boxes from the board.\n\t */\n",
    "2668": "\t/**\n\t * The goals of the backward search are the box positions at search start.\n\t * Here we set the goals for the backward search from the current box\n\t * positions.\n\t */\n",
    "2683": "    /**\n     * Retrieve a list of persistent objects using a hibernate query\n     */\n",
    "2781": "\t\t/**\n\t\t * Returns the push distance of a specific box to a specific goal.\n\t\t * <p>\n\t\t * The distance is calculated under the assumption that:\n\t\t * <ol>\n\t\t *  <li> the box is the only one on the whole board\n\t\t *  <li> the player can reach every side of the box at the moment\n\t\t * </ol>\n\t\t *  \n\t\t * @param boxNo number of the relevant box\n\t\t * @param goalNo number of the relevant goal\n\t\t * @return push distance\n\t\t */\n",
    "2880": "\t/**\n\t * The action has been activated. The argument of the\n\t * method represents the 'real' action sitting\n\t * in the workbench UI.\n\t * @see IWorkbenchWindowActionDelegate#run\n\t */\n",
    "2881": "\t/**\n\t * Selection in the workbench has been changed. We \n\t * can change the state of the 'real' action here\n\t * if we want, but this can only happen after \n\t * the delegate has been created.\n\t * @see IWorkbenchWindowActionDelegate#selectionChanged\n\t */\n",
    "2882": "\t/**\n\t * We can use this method to dispose of any system\n\t * resources we previously allocated.\n\t * @see IWorkbenchWindowActionDelegate#dispose\n\t */\n",
    "2883": "\t/**\n\t * We will cache window object in order to\n\t * be able to provide parent shell for the message dialog.\n\t * @see IWorkbenchWindowActionDelegate#init\n\t */\n",
    "2930": "    /**\n     * The <code>addToHierarchyToCheckedStore</code> implementation of this \n     * <code>WizardDataTransferPage</code> method returns <code>false</code>. \n     * Subclasses may override this method.\n     */\n",
    "2961": "    /**\n     * This method must be called just before this window becomes visible.\n     */\n",
    "2963": "    /**\n     *\tAdd the passed listener to self's collection of clients\n     *\tthat listen for changes to element checked states\n     *\n     *\t@param listener ICheckStateListener\n     */\n",
    "2964": "    /**\n     * Returns a content provider for <code>IResource</code>s that returns \n     * only children of the given resource type.\n     */\n",
    "2965": "    /**\n     *\tReturn a boolean indicating whether all children of the passed tree element\n     *\tare currently white-checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2970": "    /**\n     *\tReturn a boolean indicating whether all list elements associated with\n     *\tthe passed tree element are currently checked\n     *\n     *\t@return boolean\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2971": "    /**\n     *\tIterate through the passed elements which are being realized for the first\n     *\ttime and check each one in the tree viewer as appropriate\n     */\n",
    "2972": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This is the primary resource selection facility accessor for \n     * subclasses.\n     *\n     * @return an iterator over the collection of resources currently selected \n     * for export (element type: <code>IResource</code>). This will include\n     * white checked folders and individually checked files.\n     */\n",
    "2974": "    /**\n     *\tAn item was checked in one of self's two views.  Determine which\n     *\tview this occurred in and delegate appropriately\n     *\n     *\t@param event CheckStateChangedEvent\n     */\n",
    "2975": "    /**\n     * Returns the resource extensions currently specified to be exported.\n     *\n     * @return the resource extensions currently specified to be exported (element \n     *   type: <code>String</code>)\n     */\n",
    "2980": "    /**\n     * Returns this page's collection of currently-specified resources to be \n     * exported. This returns both folders and files - for just the files use\n     * getSelectedResources.\n     *\n     * @return a collection of resources currently selected \n     * for export (element type: <code>IResource</code>)\n     */\n",
    "2981": "    /**\n     *\tCreate this group's tree viewer.\n     */\n",
    "2986": "    /**\n     * Returns whether the extension of the given resource name is an extension that\n     * has been specified for export by the user.\n     *\n     * @param resourceName the resource name\n     * @return <code>true</code> if the resource name is suitable for export based \n     *   upon its extension\n     */\n",
    "2987": "    /**\n     * Returns a boolean indicating whether the passed tree item should be\n     * white-checked.\n     *\n     * @return boolean\n     * @param treeElement java.lang.Object\n     */\n",
    "2990": "    /**\n     *\tRecursively add appropriate tree elements to the collection of\n     *\tknown white-checked tree elements.\n     *\n     *\t@param treeElement java.lang.Object\n     */\n",
    "2991": "    /**\n     * Persists resource specification control setting that are to be restored\n     * in the next instance of this page. Subclasses wishing to persist additional\n     * setting for their controls should extend hook method \n     * <code>internalSaveWidgetValues</code>.\n     */\n",
    "2992": "    /**\n     * Cause the tree viewer to expand all its items\n     */\n",
    "2993": "    /**\n     * Set the initial selections in the resource group.\n     */\n",
    "2995": "\t\t/**\n\t\t * Returns whether the player can reach the passed position.\n\t\t * \n\t\t * @param position the position to be tested for reachability\n\t\t * \n\t\t * @return <code>true</code> the position is reachable by the player\n\t\t * \t\t\t<code>false</code> the position isn't reachable by the player\n\t\t */\n",
    "3005": "    /**\n     * Save any editors that the user wants to save before export.\n     * @return boolean if the save was successful.\n     */\n",
    "3008": "    /**\n     *\tReturns a flat list of all of the leaf elements which are checked.\n     *\n     *\t@return all of the leaf elements which are checked. This API does not\n     * \treturn null in order to keep backwards compatibility.\n     */\n",
    "3009": "    /**\n     * Check if widgets are enabled or disabled by a change in the dialog.\n     */\n",
    "3010": "\t\t/**\n\t\t * Returns a clone of the current object.\n\t\t * \n\t\t * @return a PlayersReachableSquares object identical to this object\n\t\t */\n",
    "3012": "    /**\n     * give the interceptor an opportunity to override the default instantiation\n     */\n",
    "3013": "    /**\n     *\tAdd the passed value to self's destination widget's history\n     *\n     *\t@param value java.lang.String\n     */\n",
    "3017": "    /**\n     *\tReturns a list of all of the items that are white checked.\n     * \tAny folders that are white checked are added and then any files\n     *  from white checked folders are added. \n     *\n     *\t@return the list of all of the items that are white checked\n     */\n",
    "3018": "    /**\n     *\tAnswer the number of elements that have been checked by the\n     *\tuser.\n     *\n     *\t@return int\n     */\n",
    "3022": "    /**\n     * Create the buttons for the group that determine if the entire or\n     * selected directory structure should be created.\n     * @param optionsGroup\n     * @param font\n     */\n",
    "3024": "\t\t/**\n\t\t * Returns the position reachable of the player that is\n\t\t * the most top left one.\n\t\t * This is a normalization of the player position, used, where the\n\t\t * exact player position is not relevant, but its reachable area is.\n\t\t * \n\t\t * @return the position top left\n\t\t */\n",
    "3028": "    /**\n     *\tSet the checked state of self and all ancestors appropriately. Do not white check anyone - this is\n     *  only done down a hierarchy.\n     */\n",
    "3029": "    /**\n     * Set the initial checked state of the passed element to true,\n     * as well as to all of its children and associated list elements\n     * @param element\n     */\n",
    "3030": "    /**\n     * Attempts to ensure that the specified directory exists on the local file system.\n     * Answers a boolean indicating success.\n     *\n     * @return boolean\n     * @param directory java.io.File\n     */\n",
    "3032": "    /**\n     *\tIf the target for export does not exist then attempt to create it.\n     *\tAnswer a boolean indicating whether the target exists (ie.- if it\n     *\teither pre-existed or this method was able to create it)\n     *\n     *\t@return boolean\n     */\n",
    "3035": "    /**\n     *  Set up and execute the passed Operation.  Answer a boolean indicating success.\n     *\n     *  @return boolean\n     */\n",
    "3038": "\t\t/**\n\t\t * Returns a (deep) clone of this object.\n\t\t * \n\t\t * @return a (deep) clone of this object\n\t\t */\n",
    "3043": "    /**\n     *\tAnswer the string to display in self as the destination type\n     *\n     *\t@return java.lang.String\n     */\n",
    "3044": "    /**\n     *\tRemove the passed listener from self's collection of clients\n     *\tthat listen for changes to element checked states\n     *\n     *\t@param listener ICheckStateListener\n     */\n",
    "3046": "    /**\n     *\tAnswer the contents of self's destination specification widget\n     *\n     *\t@return java.lang.String\n     */\n",
    "3050": "    /**\n     *\tSet the current input focus to self's destination entry field\n     */\n",
    "3053": "\t\t/**\n\t\t * Returns whether a specific Square is reachable by the player. \n\t\t * \n\t\t * @param position Position which is checked for being reachable by the player\n\t\t * @return true = Square is reachable; false = Square is not reachable\n\t\t */\n",
    "3054": "    /**\n     *\tOpen an appropriate destination browser so that the user can specify a source\n     *\tto import from\n     */\n",
    "3055": "     /**\n     * Set the root of the widget to be new Root. Regenerate all of the tables and lists from this\n     * value.\n     * @param newRoot \n     */\n",
    "3056": "    /**\n     * Handle all events and enablements for widgets in this page\n     * @param e Event\n     */\n",
    "3057": "    /**\n     *\tSet the checked state of the passed tree element appropriately, and\n     *\tdo so recursively to all of its child tree elements as well\n     */\n",
    "3060": "    /**\n     * Persists additional setting that are to be restored in the next instance of\n     * this page.\n     * <p> \n     * The <code>WizardImportPage</code> implementation of this method does\n     * nothing. Subclasses may extend to persist additional settings.\n     * </p>\n     */\n",
    "3061": "    /**\n     * If the existing proxy is insufficiently \"narrow\" (derived), instantiate a new proxy\n     * and overwrite the registration of the old one. This breaks == and occurs only for\n     * \"class\" proxies rather than \"interface\" proxies.\n     */\n",
    "3062": "    /**\n     * Set the sorter that is to be applied to self's tree viewer\n     * @param sorter\n     */\n",
    "3063": "    /**\n     *\tHook method for restoring widget values to the values that they held\n     *\tlast time this wizard was used to completion.\n     */\n",
    "3066": "\t\t/**\n\t\t * Returns if a specific Square is reachable by the player.\n\t\t * \n\t\t * @param x xPosition of square which is checked for being reachable by the player\n\t\t * @param y yPosition of square which is checked for being reachable by the player\n\t\t * @return true = Square is reachable; false = Square is not reachable\n\t\t */\n",
    "3067": "    /**\n     *\tHandle the collapsing of an element in a tree viewer\n     */\n",
    "3068": "    /**\n     *\tSet the contents of the receivers destination specification widget to\n     *\tthe passed value\n     *\n     */\n",
    "3069": "    /**\n     *\tHandle the expansionsion of an element in a tree viewer\n     */\n",
    "3070": "    /**\n     *\tAnswer a boolean indicating whether the receivers destination specification\n     *\twidgets currently all contain valid values.\n     */\n",
    "3072": "    /**\n     * Grab the existing proxy for an instance, if\n     * one exists. (otherwise return the instance)\n     */\n",
    "3073": "    /**\n     *  Callback that's invoked when the checked status of an item in the tree\n     *  is changed by the user.\n     */\n",
    "3075": "    /**\n     *\tLogically un-gray-check all ancestors of treeItem iff appropriate.\n     */\n",
    "3077": "    /**\n     *\tSet the checked state of self and all ancestors appropriately\n     */\n",
    "3078": "\t/**\n     * Get the message used to denote an empty destination.\n     */\n",
    "3081": "    /**\n     * Returns the name of a container with a location that encompasses targetDirectory.\n     * Returns null if there is no conflict.\n     * \n     * @param targetDirectory the path of the directory to check.\n     * @return the conflicting container name or <code>null</code>\n     */\n",
    "3082": "    /** \n     * Set the focus on to the list widget.\n     */\n",
    "3095": "    /**\n     *\tAnswer a boolean indicating the number of file resources that were\n     *\tspecified for export\n     *\n     *\t@return int\n     */\n",
    "3096": "    /**\n     *  Create the directories required for exporting the passed resource,\n     *  based upon its container hierarchy\n     *\n     *  @param childResource org.eclipse.core.resources.IResource\n     */\n",
    "3098": "    /**\n     *  Create the directories required for exporting the passed resource,\n     *  based upon its container hierarchy\n     *\n     *  @param childResource org.eclipse.core.resources.IResource\n     */\n",
    "3100": "    /**\n     * Create the directories tree\n     * @param tree\n     */\n",
    "3107": "    /**\n     * Create a \"temporary\" entry for a newly instantiated entity. The entity is uninitialized,\n     * but we need the mapping from id to instance in order to guarantee uniqueness.\n     */\n",
    "3116": "    /**\n     *  Answer a boolean indicating whether the passed child is a descendent\n     *  of one or more members of the passed resources collection\n     *\n     *  @return boolean\n     *  @param resources java.util.List\n     *  @param child org.eclipse.core.resources.IResource\n     */\n",
    "3122": "    /**\n     *\tSet this boolean indicating whether a directory should be created for\n     *\tFolder resources that are explicitly passed for export\n     *\n     *\t@param value boolean\n     */\n",
    "3124": "    /**\n     *\tSet this boolean indicating whether each exported resource's complete path should\n     *\tinclude containment hierarchies as dictated by its parents\n     *\n     *\t@param value boolean\n     */\n",
    "3126": "    /**\n     *\tSet this boolean indicating whether exported resources should automatically\n     *\toverwrite existing files when a conflict occurs. If not\n     *\tquery the user.\n     *\n     *\t@param value boolean\n     */\n",
    "3127": "    /**\n     * Add the \"hydrated state\" (an array) of an uninitialized entity to the session. We don't try\n     * to resolve any associations yet, because there might be other entities waiting to be\n     * read from the JDBC result set we are currently processing\n     */\n",
    "3129": "\t\t/**\n\t\t * Returns whether the given position has been marked as reachable.\n\t\t * \n\t\t * @param position  Position to be checked to be reachable.\n\t\t * @return\t<code>true</code> if position is reachable,\n\t\t *         <code>false</code> if position isn't reachable\n\t\t */\n",
    "3135": "    /**\n     *\tAnswer a handle to the zip file currently specified as being the source.\n     *\tReturn null if this file does not exist or is not of valid format.\n     */\n",
    "3137": "    /**\n     * Attempts to close the passed zip file, and answers a boolean indicating success.\n     */\n",
    "3189": "\t/**\n\t * Initializes states of the controls from the preference store.\n\t */\n",
    "3200": "   /**\n\t* Returns preference store that belongs to the our plugin.\n\t* This is important because we want to store\n\t* our preferences separately from the desktop.\n\t*\n\t* @return the preference store for this plugin\n\t*/\n",
    "3201": "\t/**\n\t * Creates an image and places it in the image registry.\n\t */\n",
    "3205": "\t/**\n\t * Sets the file transfer compression level. (if supported)\n\t * Valid levels are: 0 (disabled), 1 (worst/fastest) - 9 (best/slowest)\n\t */\n",
    "3207": "\t/**\n\t * Gets the file transfer compression level.\n\t */\n",
    "3209": "\t/**\n\t * Returns the image descriptor for the given image ID.\n\t * Returns null if there is no such image.\n\t */\n",
    "3211": "\t/**\n\t * Sets the default keyword substitution mode for text files.\n\t */\n",
    "3214": "\t/**\n\t * Gets the default keyword substitution mode for text files.\n\t */\n",
    "3215": "\t/**\n\t * Get the bug id (if exists) from the previous comment\n\t * @author keren\n\t * \n\t */\n",
    "3217": "\t/**\n\t * Should the CVS adapter prune empty directories\n\t */\n",
    "3218": "\t/**\n\t * Get the comment string (without the bug id text) from the previous comment\n\t * @author keren\n\t * \n\t */\n",
    "3221": "\t/**\n\t * Set whether the CVS adapter should prune empty directories\n\t */\n",
    "3226": "\t/**\n\t * Get the communications timeout value in seconds\n\t */\n",
    "3230": "\t/**\n\t * Set the timeout value for communications to a value in seconds.\n\t * The value must be greater than or equal 0. If is it 0, there is no timeout.\n\t */\n",
    "3231": "\t/**\n\t * Utility method that creates a label instance\n\t * and sets the default layout data.\n\t *\n\t * @param parent  the parent for the new label\n\t * @param text  the text for the new label\n\t * @return the new label\n\t */\n",
    "3232": "\t/**\n\t * Creates an new checkbox instance and sets the default\n\t * layout data.\n\t *\n\t * @param group  the composite in which to create the checkbox\n\t * @param label  the string to set into the checkbox\n\t * @return the new checkbox\n\t */\n",
    "3233": "\t/**\n\t * Set the quietness option to use with cvs commands.\n\t * Can be \"\", \"-q\" or \"-Q\"\n\t */\n",
    "3237": "\t/**\n\t * Get the quietness option for commands\n\t */\n",
    "3243": "\t/**\n\t * Set the console listener for commands.\n\t * @param consoleListener the listener\n\t */\n",
    "3253": "\t/**\n\t * Defaults was clicked. Restore the SVN preferences to\n\t * their default values\n\t */\n",
    "3254": "\t/**\n\t * Gets the cvsRshCommand.\n\t * @return Returns a String\n\t */\n",
    "3258": "\t/**\n\t * Sets the cvsRshCommand.\n\t * @param cvsRshCommand The cvsRshCommand to set\n\t */\n",
    "3260": "\t/**\n\t * Helper method which access the preference store to determine if the \n\t * project name from the project description file (.project) should be used\n\t * as the project name on checkout.\n\t */\n",
    "3262": "\t/**\n\t * Returns the cvsRshParameters.\n\t * @return String\n\t */\n",
    "3265": "\t/**\n\t * Sets the cvsRshParameters.\n\t * @param cvsRshParameters The cvsRshParameters to set\n\t */\n",
    "3270": "\t/**\n\t * Gets the cvsServer.\n\t * @return Returns a String\n\t */\n",
    "3271": "\t/**\n\t * Method initializeValues.\n\t */\n",
    "3275": "\t/**\n\t * Sets the cvsServer.\n\t * @param cvsServer The cvsServer to set\n\t */\n",
    "3277": "\t/**\n\t * Method signalCtrlEnter.\n\t */\n",
    "3278": "\t/**\n\t * Returns the comment.\n\t * @return String\n\t */\n",
    "3280": "\t/**\n\t * Gets the etchAbsentDirectories.\n\t * @return Returns a boolean\n\t */\n",
    "3288": "\t/**\n\t * Sets the fetchAbsentDirectories.\n\t * @param etchAbsentDirectories The etchAbsentDirectories to set\n\t */\n",
    "3296": "    /**\n     * set the svn client interface\n     * @param clientInterface\n     */\n",
    "3297": "    /**\n     * set the svn client config dir\n     * @param configDir\n     */\n",
    "3305": "\t\t/**\n\t\t * Gets the project.\n\t\t * @return Returns a IProject\n\t\t */\n",
    "3306": "\t\t/**\n\t\t * Sets the project.\n\t\t * @param project The project to set\n\t\t */\n",
    "3308": "\t/**\n\t * Gets the replaceUnmanaged.\n\t * @return Returns a boolean\n\t */\n",
    "3313": "\t/**\n\t * Sets the replaceUnmanaged.\n\t * @param replaceUnmanaged The replaceUnmanaged to set\n\t */\n",
    "3321": "\t/**\n\t * Register to receive notification of repository creation and disposal\n\t */\n",
    "3327": "\t\t/**\n\t\t * Return a InstallerProject if this javaProject has the tikal Installer nature\n\t\t * Return null if Project has not Tikal Installer nature\n\t\t */\n",
    "3329": "\t/**\n\t * Register to receive notification of enablement of sync info decoration requirements. This\n\t * can be useful for providing lazy initialization of caches that are only required for decorating\n\t * resource with CVS information.\n\t */\n",
    "3332": "\t\t/**\n\t\t * Return a InstallerProject if this javaProject has the tikal Installer nature\n\t\t * Return null if Project has not Tikal Installer nature\n\t\t */\n",
    "3350": "    /**\n     * Load the data for the object with the specified id into the supplied\n     * instance. A new key will be assigned to the object. If there is an\n     * existing uninitialized proxy, this will break identity equals as far\n     * as the application is concerned.\n     */\n",
    "3370": "\t/**\n\t * Gets the determineVersionEnabled.\n\t * @return boolean\n\t */\n",
    "3377": "\t/**\n\t * Sets the determineVersionEnabled.\n\t * @param determineVersionEnabled The determineVersionEnabled to set\n\t */\n",
    "3379": "    /**\n\t * Returns the comment.\n\t * @return String\n\t */\n",
    "3383": "\t/**\n\t * Returns the fileModificationManager.\n\t * @return FileModificationManager\n\t */\n",
    "3475": "\t/**\n\t * Sets the excludesDirs.\n\t * \n\t * @param excludesDirs\n\t *            The excludesDirs to set\n\t */\n",
    "3478": "\t/**\n\t * Sets the includesDirs.\n\t * \n\t * @param includesDirs\n\t *            The includesDirs to set\n\t */\n",
    "3498": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t * \n\t */\n",
    "3520": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t */\n",
    "3543": "\t/**\n\t * Compares source files to destination files to see if they should be\n\t * copied.\n\t */\n",
    "3589": "    /**\n     * sets the optional attribute\n     *\n     * @param optional if true ignore files that are not present,\n     *                 default is false\n     */\n",
    "3590": "    /**\n     * the name of the file to import. How relative paths are resolved is still\n     * in flux: use absolute paths for safety.\n     * @param file the name of the file\n     */\n",
    "3597": "    /**\n     * The classpath to use when looking up a resource.\n     * @param classpath to add to any existing classpath\n     */\n",
    "3599": "    /**\n     * The classpath to use when looking up a resource.\n     */\n",
    "3600": "    /**\n     * the classpath to use when looking up a resource,\n     * given as reference to a &lt;path&gt; defined elsewhere\n     */\n",
    "3611": "\t/**\n\t * Finds a resource with a given name. This method returns null if no\n\t * resource with this name is found. The rules for searching resources\n\t * are implemented by the provided\n\t * {@link com.tikal.util.ClassLoadersIterationPolicy}.\n\t *\n\t * @param resourceName the name of the resource to find.\n\t * @return a <tt>java.net.URL</tt> instance pointing to the resource, or\n\t *         null if the resource wasn't found.\n\t */\n",
    "3612": "\t/**\n\t * Loads the class with the specified name.  This method searches for\n\t * classes while iterating the class-loaders that are provided by the\n\t * {@link com.tikal.util.ClassLoadersIterationPolicy}.\n\t *\n\t * @param className the name of the class to load.\n\t * @return an instance of the request class.\n\t * @throws ClassNotFoundException if the class wasn't found.\n\t */\n",
    "3613": "\t/**\n\t * Indicates whether or not there is a next class-loader to iterate.\n\t *\n\t * @return true if there's another class-loader to iterate; false otherwise.\n\t */\n",
    "3614": "\t/**\n\t * The next class-loader in the iteration.\n\t *\n\t * @return the next class-loader in the iteration.\n\t * @throws java.util.NoSuchElementException\n\t *          for no more elements.\n\t */\n",
    "3615": "\t/**\n\t * Resets the iterator to start from the beginning.\n\t */\n",
    "3648": "\t/**\n\t * Check if DEBUG level is enabled for this logger.\n\t * @return true if a {@link #debug(Object)} method invocation would pass\n\t *         the msg to the configured appenders; false otherwise.\n\t */\n",
    "3651": "\t/**\n\t * Add a log entry with DEBUG level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3653": "\t/**\n\t * Add a log entry with DEBUG level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3655": "\t/**\n\t * Check if INFO level is enabled for this logger.\n\t * @return true if a {@link #info(Object)} method invocation would pass\n\t *         the msg to the configured appenders; false otherwise.\n\t */\n",
    "3659": "\t/**\n\t * Add a log entry with INFO level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3665": "\t/**\n\t * Add a log entry with INFO level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3670": "\t/**\n\t * Add a log entry with WARN level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3674": "\t/**\n\t * Add a log entry with WARN level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3679": "\t/**\n\t * Add a log entry with ERROR level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3685": "\t/**\n\t * Add a log entry with ERROR level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3689": "\t/**\n\t * Add a log entry with FATAL level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t */\n",
    "3695": "\t/**\n\t * Add a log entry with FATAL level.\n\t * @param message the object whoes <tt>toString</tt> method is the message\n\t * @param t a cause to append to the message\n\t */\n",
    "3701": "\t/**\n\t * Add a log entry with the given level.\n\t */\n",
    "3704": "    /**\n     * Tack the definition and return a popup definition string\n     * @param target The target URL\n     * @return The resulting popup text.\n     */\n",
    "3705": "\t/**\n\t * Add a log entry with the given level and caus.\n\t */\n",
    "3708": "   /** Get the project name.\n    * @return The project name.\n    */ \n",
    "3709": "    /**\n     * Create a &lt;param&gt; line\n     * @param name The param name\n     * @param value The param value\n     * @return String representation of the string\n     */\n",
    "3711": "    /**\n     * Set the media location for the player.\n     * \n     */\n",
    "3712": "    /**\n     * Get the source folder.\n     * @return The source folder.\n     */\n",
    "3715": "    /**\n     * Set the source folder.\n     * @param sourceFolder The new source folder.\n     */\n",
    "3716": "    /** \n     * Get the parent part of the url\n     * @param url The URL to work on\n     * @return The parent, including the last /\n     */\n",
    "3717": "    /**\n     * Get the project name.\n     * @return The name of the project.\n     */\n",
    "3720": "    /**\n     * Overide of setView so we can get information about the view.\n     */\n",
    "3721": "    /**\n     * Get the source name.\n     * @return The name of the source file.\n     */\n",
    "3722": "    /**\n     * Create a temporary object.\n     * @param url URL to create object for.\n     */\n",
    "3723": "    /**\n     * Set the name of the new source file.\n     * @param sourceName The name of the source file.  This is the absolute file path.\n     */\n",
    "3724": "    /** \n     * Called when item is clicked \n     * @param event The calling event.\n     */\n",
    "3726": "    /**\n     * Is file acceptable.\n     * @param f The file.\n     * @return True if acceptable.\n     */\n",
    "3727": "    /**\n     * Get a description string.\n     * @return The description\n     */\n",
    "3729": "    /**\n     * Build the presentation dialog\n     */\n",
    "3736": "    /**\n     * Centre the frame.\n     */\n",
    "3737": "        /**\n         * Handle the realizeComplete event.\n         * @param event The state change event.\n         */\n",
    "3738": "    /**\n     * Set the text in the licence area\n     */\n",
    "3742": "    /**\n     * Display the window.\n     */\n",
    "3743": "        /**\n         * Stop the player when closing the window and reset the error stream.\n         */\n",
    "3745": "    /**\n     * Initialise the application and show the main window.\n     */\n",
    "3746": "    /**\n     * Used to close the Appender and called by the log4J framework.\n     */\n",
    "3747": "    /** Get the default source file\n     * @return The default helpset file name.\n     */\n",
    "3748": "        /**\n         * Will be called every time a namespace is reached.\n         * It'll verify if the ns was processed, and if not load the task\n         * definitions.\n         * @param uri The namespace uri.\n         */\n",
    "3749": "    /**\n     * Tell the log4J framework whether or not a Layout is required.\n     * @return Always true\n     */\n",
    "3750": "    /** Set the default source file\n     * @param defaultSource The name iof the Helpset file.\n     */\n",
    "3751": "    /**\n     * Append the text to the text area.\n     * @param event The Logging event from the log4J framework.\n     */\n",
    "3753": "    /**\n     * Get the default target as set in the configuration properties.\n     * @return The default target.\n     */\n",
    "3754": "    /**\n     * Set the JTextArea to be used to receive the logging commands.\n     * @param argTextArea The JTextArea used by the appender.\n     */\n",
    "3756": "    /** Save the default configurations to the property file.\n     */\n",
    "3760": "    /**\n      * Copy file routine.  \n      * Original source from R\ufffdal Gagnon http://64.18.163.122/rgagnon/howto.html\n      * @param in Input file\n      * @param out Destination file\n      * @throws java.lang.Exception Exeption thrown on IO error\n      */ \n",
    "3764": "        /**\n         * Returns the current ant handler object.\n         * @return the current ant handler.\n         */\n",
    "3765": "     /**\n      * Make sure the path is absolute.\n      * If the path is absolute, just returns it unchanged.\n      * If it's relative, then it is combined with the default directory.\n      * @param defaultDir the default directory,\n      * @param currentPath the path to check.\n      * @return the absolute path.\n      */\n",
    "3768": "     /**\n      * Build a path from the path, filename and extension.\n      * @param dir Directory\n      * @param fileName The file name\n      * @param ext the extension\n      * @return The complete path\n      */\n",
    "3769": "    /** Get the language code for XMML type files.\n     * @param encType the encoding type\n     * @return language. Empty string if not found\n     */\n",
    "3770": "    /**\n     * Change directory of an absolute file path.\n     * @param path The path to amend.\n     * @param newDir The directory to change the path to.\n     * @return The new path.\n     */\n",
    "3772": "    /**\n     * Get the directory part of the name\n     * @param path The path to analyse.\n     * @return The path's directory.\n     */\n",
    "3773": "    /** Get the input encoding type. \n     * @param encType the type of encoding\n     * @return the encoding to use\n     */\n",
    "3774": "    /**\n     * Get the file name of the path.\n     * @param path The absolute path.\n     * @return The file name part.\n     */\n",
    "3777": "    /** Convert JTidy encoding to the JTidy R7 code.\n     * @param enc the name\n     * @return the R7 code\n     */\n",
    "3778": "    /**\n     * Get the file extension.\n     * @param f The file.\n     * @return The extension including the decimal point.\n     */\n",
    "3780": "    /**\n     * Get the file extension.\n     * @param path The file.\n     * @return The extension including the decimal point.\n     */\n",
    "3782": "    /**\n     * Take a full path and change the extension\n     * @param path The path.\n     * @param newExtension The new extension\n     * @return The new path.\n     */\n",
    "3787": "    /** \n     * Check whether the path name exists and is a directory\n     * @param name The path.\n     * @return true if okay\n     */\n",
    "3788": "    /** create a buffered file reader suitable for the requested encoding. \n     * @param inname The file name.\n     * @param encType the type of encoding to use\n     * @return the buffered writer\n     */\n",
    "3791": "    /** \n     * Check whether the path name exists and is a file\n     * @param name The path.\n     * @return true if okay\n     */\n",
    "3792": "    /** create a buffered stream reader suitable for the requested encoding. \n     * @param in The input stream.\n     * @param encType the type of encoding to use\n     * @return the buffered writer\n     */\n",
    "3793": "    /**\n     * Parse the node\n     * Only actually handles <a> or <script> nodes.\n     * @param doc The calling document\n     * @param node The node to parse\n     * @return null if not handled, else replacement text.\n     */               \n",
    "3794": "    /** Convert a file name to a url string.\n     * @param name the file name\n     * @return the string representation of a uri.\n     */\n",
    "3796": "    /**\n     * Perform the parsing task.\n     * @return True if okay.\n     */\n",
    "3798": "   /**\n    * Create a header using Logger.info.\n    * @param header Text to put in the header.\n    */\n",
    "3800": "    /**\n     * Create a footer using the Logger.info.\n     */\n",
    "3801": "        /**\n         * Sets the locator in the project helper for future reference.\n         *\n         * @param locator The locator used by the parser.\n         *                Will not be <code>null</code>.\n         */\n",
    "3802": "    /**\n     * Write the HTML for the popup to a file\n     * @return true if okay\n     * @param targetName The target file.\n     * @param text The popup text\n     * @param source The source file.\n     */ \n",
    "3803": "    /**\n     * Create a Logger.info message including the current \n     * line number of the parsed file.\n     * @param message Message to write.\n     */\n",
    "3805": "    /**\n     * Create a Logger.warn message including the current \n     * line number of the parsed file.\n     * @param message The message to write.\n     */\n",
    "3806": "    /**\n     * Extract the popup id name from the string\n     * @param text The string to search\n     * @return The id name.  Null if not found              \n     */     \n",
    "3807": "    /**\n     * Start the fie parse.  Creates a reader to access\n     * the file.\n     * @param encType the type of input encoding\n     * @return True if okay.\n     */\n",
    "3809": "    /**\n     * Process the source file creating a list of popup ids\n     * @param name The source file\n     */\n",
    "3810": "    /**\n     * Read the next line from the source.\n     * @return The line.  Null if EOF.\n     */\n",
    "3814": "    /**\n     * Handle assignments,i.e lines of the form \n     * key=value\n     * @param line The line to assess.\n     */\n",
    "3816": "    /**\n     * Set the map used for resolving IDs and urls.\n     * @param argMap The map to use.  URL is key, id is the value.\n     */\n",
    "3818": "    /**\n     * Get the name of the index file.\n     * @return The index name.\n     */\n",
    "3819": "        /**\n         * Handles the end of an element. Any required clean-up is performed\n         * by the onEndElement() method and then the original handler\n         * is restored to the parser.\n         *\n         * @param uri  The namespace URI for this element.\n         * @param name The name of the element which is ending.\n         *             Will not be <code>null</code>.\n         * @param qName The qualified name for this element.\n         *\n         * @exception SAXException in case of error (not thrown in\n         *                         this implementation)\n         *\n         */\n",
    "3821": "    /**\n     * Build the map section\n     * @param doc The document to contain the map section.\n     */\n",
    "3822": "    /**\n     * Get the first quoted element of text.\n     * The quotes are removed.\n     * @return The text in the quotes.  Escape sequences are unescaped.\n     * @param text The text to handle.\n     * @param toHTML if true then escape sequences are converted to HTML else to characters\n     */\n",
    "3823": "    /**\n     * Get the name of the contents file.\n     * @return The contents name.\n     */\n",
    "3824": "    /**\n     * Unescape special javascript characters\n     * @return The text.  Null on error.\n     * @param esc The character that was found after the escape character.\n     * @param toHTML If true then unescape to HTML equivalent else just to ascii equivalent.\n     */\n",
    "3825": "    /**\n     * Create a view section.\n     * @param doc The document to contain the view.\n     * @param merge The mergetype attribute.\n     * @param name The name attribute.\n     * @param label The label attribute.\n     * @param typeName The type attribute.\n     * @param data The data attribute.\n     */\n",
    "3826": "    /**\n     * Get the title of the help.\n     * @return The title.\n     */\n",
    "3829": "    /**\n     * Get a map of the links in the html files.\n     * @return The map of links.\n     */\n",
    "3831": "    /**\n     * Get the default topic url.\n     * @return The url.\n     */\n",
    "3833": "    /**\n     * Set the default topic.\n     * @param id The topic id.\n     */\n",
    "3835": "    /**\n     * Get the default topic id.\n     * @return The default topic id.\n     */\n",
    "3837": "    /**\n     * Get a map of the parsed HTML files.\n     * @return The parsed HTML files.\n     */\n",
    "3838": "    /**\n     * Write the document to the writer.\n     * @param writer The Buffered writer to which the output is sent.\n     * @throws java.io.IOException IOExceptions thrown.\n     * @return True if successfully written.  False if the document has not been parsed.\n     */\n",
    "3839": "    /**\n     * Sets the map that contains the target references.\n     * Note the key is the url and the value is the id.\n     * @param argLinks The map containing targets to ids.\n     */\n",
    "3840": "    /**\n     * Get the file name of the helpset.\n     * @return The file name.\n     */\n",
    "3844": "     /**\n      * Perform the actual build of the document.\n      * @param doc The document to build.\n      */\n",
    "3845": "    /**\n     * Perform parsing on the input source.\n     * The source is taken as the parser's source file\n     * @return True if successful\n     */\n",
    "3846": "     /**\n      * Add a mpaID to the document.\n      * @param doc The XMLDoc to which the ID should be added.\n      * @param target The value of the target attribute.\n      * @param url The value of the url attribute.\n      */\n",
    "3848": "        /**\n         * Start a namespace prefix to uri mapping\n         *\n         * @param prefix the namespace prefix\n         * @param uri the namespace uri\n         */\n",
    "3851": "    /**\n     * Perform parsing on the input source.\n     * The source is taken as the parser's source file\n     * @return True if successful\n     */\n",
    "3852": "    /**\n     * Replace quotation marks with &quote;\n     * @param str The string in which to replace the quotes.\n     * @return The string with the quotes replaced.\n     */\n",
    "3853": "    /**\n     * Copy a image file to the target.\n     * @param image The name of the image.\n     */\n",
    "3856": "    /**\n     * Replace an element with the text found in the replaceElements Properties.\n     * @param node The current node of the element.\n     * @return The replacement string.  Null if not found.\n     */\n",
    "3857": "    /**\n     * Create an index item in the xml document.\n     * @param parentIndexItem The item to which this node belongs.\n     */\n",
    "3859": "        /**\n         * End a namepace prefix to uri mapping\n         *\n         * @param prefix the prefix that is not mapped anymore\n         */\n",
    "3860": "    /**\n     * Handle the situation where the target url is not found\n     * @param url The target that couldn't be found.\n     * @return The mapID.  Null if none.\n     */\n",
    "3862": "    /** \n     * Replace text in the string using replacements found in the replaceText Properties.\n     * @param str The string to be processed.\n     * @return The string with all the replacements made.\n     */\n",
    "3864": "    /**\n     * Create a targetless index item in the xml document.\n     * @param parentIndexItem The item to which this node belongs.\n     */\n",
    "3865": "    /** \n     * Handle the embed tag which contains the source.\n     * Note if not in an object, this is ignored\n     * @param doc The html dom.\n     * @param node The current node\n     */\n",
    "3866": "    /**\n     * Extract link and popup text using the classID\n     * @param classID The classID attribute of the object\n     * @return Get the text that should be used for the link that replaces the object.\n     */\n",
    "3867": "    /**\n     * Called before converting any element to a string.\n     * Determines whether the element and it children need to be wrapped in an enclosing element.\n     * Outputs tags to wrap the element and determines the necessary tag to finish the wrapping.\n     * @param node The element to process.\n     * @param nodeStr The buffer to which the wrapping tag is appended.\n     * @return The end of the wrapper which the caller is responsible for adding to the output after\n     * processing the element.\n     */\n",
    "3869": "    /** Get a string representation of the DocType.\n     * @return The doctype string.\n     */\n",
    "3870": "    /** Provides a string representation of additional children for a node.\n     * @param node the node for which there might be special children\n     * @return html for the extra children\n     */\n",
    "3871": "    /**\n     * Check to see if this is a duplicated node.\n     * This is used because of the difference in structure of the HMTL index and JavaHelp\n     * index. If the text attribute of this node is the same as the text attribute of the \n     * previous node, it should be skipped.\n     * @returns True if the previous elements text attibute equals text.\n     * @param prev The previous element.\n     * @param text The current elements text attribute\n     * @return True if the element and its children should be skipped.\n     */\n",
    "3872": "    /**\n     * Write the document to an output writer.\n     * @param writer The destination.\n     * @param tag the xml start line to write\n     * @throws java.io.IOException Exception thrown on io error.\n     * @return True if okay.\n     */\n",
    "3881": "    /**\n     * Get the map.\n     * @return The map used for resolving targets.\n     */\n",
    "3883": "    /**\n     * Replace quotes in the string.\n     * @param str The string to replace the quotes./\n     * @return String with quotes replaced with &amp;quote;  If str is null an empty string is returned.\n     */\n",
    "3971": "        /**\n         * Handle the end of the project, sets the current target of the\n         * context to be the implicit target.\n         *\n         * @param uri The namespace URI of the element.\n         * @param tag The name of the element.\n         * @param context The current context.\n         */\n",
    "4041": "        /**\n         * Handles the end of the element. This pops the wrapper from\n         * the context.\n         *\n         * @param uri The namespace URI for the element.\n         * @param tag The name of the element.\n         * @param context The current context.\n         */\n",
    "4413": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .weights\n\t * \n\t * @param f The file that is to be check if its a Performance Test Weights file\n\t * @return Returns true if the file is a directory or of type .weights\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4415": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the weights file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4417": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .lsf\n\t * \n\t * @param f The file that is to be check if its a Log file\n\t * @return Returns true if the file is a directory or of type .lsf\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4419": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the Log file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4421": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .ptconfig\n\t * \n\t * @param f The file that is to be check if its a Performance Test configuration file\n\t * @return Returns true if the file is a directory or of type ptconfig\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4422": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the performance configuration file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4437": "\t/**\n\t * Used to check if the file the correct file. The acceptable files are directories or\n\t * files of extension .cb\n\t * \n\t * @param f The file that is to be check if its a Case Base file\n\t * @return Returns true if the file is a directory or of type .cb\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4438": "\t/**\n\t * This method returns the description of the type of file being selected\n\t * @return Returns the description of the case base file\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4448": "    /** CaseEventListener method called when we don't know the team name.\n     *\n     * @param ce the CaseEvent.\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4451": "    /** CaseEventListener method called when the Case Inputs have been parsed.\n     *\n     * @param ce the CaseEvent. It contains the Case Inputs\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4453": "    /** CaseEventListener method called when the Case Outputs have been parsed.\n     *\n     * @param ce the CaseEvent. It contains the Case Outputs\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     *\n     */\n",
    "4459": "    /** Returns a copy of the case base created from the\n     * log file.\n     * \n     * @return The case base\n     *\n     * @author Michael W. Floyd\n     * @since 0.2\n     */\n",
    "4462": "    /** Saves the case base into the specified file\n     * \n     *\n     * @author Michael W. Floyd\n     * @since 0.2\n     */\n",
    "4464": "\t/** Sets the horizonal position of the flag. Valid values\n\t * are the c_LEFT, c_RIGHT and c_CENTER constants.\n\t * \n\t * @param pos The horizontal position of the flag.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4467": "\t/** Returns the horizontal position of the flag. This\n\t * will be one of the following constants: c_LEFT, \n\t * c_RIGHT, c_CENTER or c_UNKNOWN_POSITION\n\t * \n\t * @return The horizontal position\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4471": "\t/** Sets the vertical position of the flag. Valid values\n\t * are the c_TOP, c_BOTTOM and c_CENTER constants.\n\t * \n\t * @param pos The vertical position of the flag.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4472": "\t/** Returns the vertical position of the flag. This\n\t * will be one of the following constants: c_TOP, \n\t * c_BOTTOM, c_CENTER or c_UNKNOWN_POSITION\n\t * \n\t * @return The horizontal position\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4473": "        /** Returns a string representation of the object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4476": "        /** Returns a copy of this object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4477": "\t/** Sets if the flag is located out of bounds.\n\t * \n\t * @param out True if the flag is out of bounds.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4478": "\t/** Set the distance changed\n\t * \n\t * @param distChange The distance changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4479": "\t/** Returns true if the flag is out of bounds.\n\t * \n\t * @return If the flag is out of bounds.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4480": "\t/** Set the direction changed.\n\t *  \n\t * @param dirChange The direction changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4481": "\t/** Sets the number of the flag.\n\t * \n\t * @param num The number of the flag\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4483": "\t/** Get the distance changed\n\t * \n\t * @return The distance changed\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4485": "\t/** Get the direction changed\n\t * \n\t * @return\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4486": "\t/** Returns the number of the flag.\n\t * \n\t * @return The flag number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4488": "\t/** Sets the location of the line. Acceptable locations are\n\t * 'l' (left), 'r' (right), 't' (top) and 'b' (bottom).\n\t * \n\t * @param s The location of the line\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4489": "\t/**\n\t * Opens a dialog to find a file that contains a case base.\n\t * \n     * @return the path of a file (hopefully a CaseBase)\n     * \n\t * @author Mark Kelly\n\t * @since 0.5\n\t */\n",
    "4490": "\t/** Sets the box the flag is on. Valid values\n\t * are the c_GOAL_BOX or c_PENALTY_BOX.\n\t * \n\t * @param pos The box the flag is on.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4491": "\t/** Return the location of the line\n\t * \n\t * @return The location of the line\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4494": "\t/** Returns the body direction of the player\n\t * \n\t * @return body direction of player\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4495": "\t/** Returns the box the flag is on. This\n\t * will be one of the following constants: c_GOAL_BOX, \n\t * c_PENALTY_BOX or c_NO_BOX\n\t * \n\t * @return The box the flag is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4496": "\t/** Sets the body direction of the player\n\t * \n\t * @param direction The body direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4498": "\t/** Gets the head direction of the player\n\t * \n\t * @return head direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4500": "\t/** Set the head direction of the player\n\t * \n\t * @param direction The head direction\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4501": "\t/** Returns true if the player is a goalie.\n\t * \n\t * @return True if player is a goalie\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4502": "\t/** Set the side to either \"l\" (left) or \"r\" (right).\n\t * \n\t * @param side The side the net is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4503": "\t/** Sets if the player is a goalie.\n\t * \n\t * @param goalie True if the player is a goalie\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4505": "\t/** Return the side the GoalFeature is on\n\t * \n\t * @return The side the GoalFeature is on\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4506": "\t/** Returns the uniform number of the player.\n\t * \n\t * @return The uniform number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4509": "\t/** Sets the uniform number of the player\n\t * \n\t * @param number The uniform number\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4511": "        /** Returns a copy of this TurnNeckAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4512": "        /** Returns a copy of this Dash Action\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4513": "\t/** Returns the power of the dash.\n\t * \n\t * @return The power of the dash\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4515": "\t/** Returns the angle of the neck turn.\n\t * \n\t * @return The angle of the turn\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4516": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4517": "        /** Returns a copy of this CatchAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4518": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4520": "\t/** Returns the angle of the catch.\n\t * \n\t * @return The angle of the catch\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4521": "        /** Returns a copy of this KickAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4523": "\t/** Used to run the Log2CaseBase program.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4525": "\t/** Returns the power of the kick.\n\t * \n\t * @return The power of the kick\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4527": "        /** Returns a copy of this TurnAction\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4528": "\t/** Returns the angle of the kick.\n\t * \n\t * @return The angle of the kick\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4530": "        /** Returns the value of an attribute\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.4\n\t */\n",
    "4531": "\t/** Returns the angle of the turn.\n\t * \n\t * @return The angle of the turn\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4533": "\t/** Used to store a new input to the agent to be processed.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4535": "\t/** Used to tell the brain that the game is over.\n\t * \n\t * @param b True if the game is over, false otherwise\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4539": "\t/** Displays the desired message when user clicks \"About\" \n\t * menu item from the menu bar.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4541": "    /** Used to run the agent thread\n     * \n     * @Override\n     */\n",
    "4542": "    /**\n     * Initialize the Agent that will be used for testing.\n     * \n     * @param cb the CaseBase that the agent will use\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4546": "    /**\n     * Initializes the Weights object that will be used by the Agent during testing.\n     * \n     * @param weightsFile the file that contains the weights\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4547": "\t/** Displays the desired message when user clicks \"Help\"->\"Log2CaseBase\" \n\t * menu item from the menu bar.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t * \n\t */\n",
    "4548": "    /** Used to move an agent to a specified location\n     * \n     * @param x The x coordinate\n     * @param y The y coordinate\n     *\n     * @since 0.3\n     */\n",
    "4549": "    /** Registers a new CaseEventListener.\n     *\n     * @param cel The CaseEventListener\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4550": "    /** Turns the agent by a specified moment\n     * \n     * @param moment The amount to turn\n     *\n     * @since 0.3\n     */\n",
    "4552": "    /** Registers a CaseEventListener.\n     *\n     * @param cel The CaseEventListener\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4553": "    /** Turns the agent's neck by a specified moment\n     * \n     * @param moment The amount to turn\n     *\n     * @since 0.3\n     */\n",
    "4555": "    /**\n     * Run a set of tests.\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4556": "    /** ParsingEvent that occurs when the client sends an init message.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4557": "    /** The agent will dash with a specified power (speed)\n     * \n     * @param power The dashing power\n     *\n     * @since 0.3\n     */\n",
    "4558": "    /** ParsingEvent that occurs when the server acknowledges an init message.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4559": "    /** The agent will kick with a specified power and direction\n     * \n     * @param power The kicking power\n     * @param direction The direction to kick\n     *\n     * @since 0.3\n     */\n",
    "4561": "    /**\n     * Outputs results of the running the performance test to a text file\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4562": "    /** The agent will say something.\n     * \n     * @param message The message to say\n     *\n     * @since 0.3\n     */\n",
    "4563": "    /** Parsing Event that occurs when the agent start receiving sensor\n     * messages after being sending control messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4565": "    /**\n     * Outputs the expected and actual to a file \n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4566": "    /** Use to change the focus of the agent's view of the world.\n     * \n     * @param angle The view angle (size of vision field)\n     * @param quality The quality of view\n     *\n     * @since 0.3\n     */\n",
    "4567": "    /** Parsing Event that occurs when a see message has been received\n     * (before parsing it). Other events will process the objects in\n     * the field.\n     *\n     *  For this parser, since we only care about see messages, the\n     *  inputs is resetted in order to avoid a previous see message in\n     *  the same group of inputs.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4569": "    /** Used by a goalie to catch the soccer ball.\n     * \n     * @param direction The direction to catch\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4571": "    /**\n     * Apply the preprocessing that was specified whan this instance was created.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @author 0.5\n     */\n",
    "4573": "    /** Used to send the initialization command to the server.\n     * \n     * @since 0.3\n     */\n",
    "4574": "    /**\n     * Execute all SQL and second-level cache updates, in a\n     * special order so that foreign-key constraints cannot\n     * be violated:\n     * <ol>\n     * <li> Inserts, in the order they were performed\n     * <li> Updates\n     * <li> Deletion of collection elements\n     * <li> Insertion of collection elements\n     * <li> Deletes, in the order they were performed\n     * </ol>\n     */\n",
    "4575": "    /** Parsing Event that occurs when the agent start sending control\n     * messages after being receiving sensor messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4576": "    /** Parsing Event that occurs when the agent start receiving sensor\n     * messages after being sending control messages.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4577": "    /** Used to sent the specified message to the server.\n     * \n     * @param message The message to send\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4578": "    /**\n     * Removes cases with no associated action from the case base.\n     * \t\n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4579": "    /** Generic method to get feature values from a Parsing Event and\n     * copy them to a RoboCupSimulation2DSpatialObject.\n     *\n     * @param so the 2D Spatial Object receiving the feature values\n     * @param pe the Parsing Event containing the feature values\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4580": "    /** Parsing Event that occurs when a see message has been received\n     * (before parsing it). Other events will process the objects in\n     * the field.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4581": "    /** Used to receive the next message from the server.\n     * \n     * @return The message received\n     *\n     * @author Michael W. Floyd\n     * @since 0.3\n     */\n",
    "4586": "    /** Parsing Event that occurs when a see message has been parsed.\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4588": "    /** Parsing Event that occurs when a goal has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4589": "    /**\n     * Uses a rough set theory to determine weights for features.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4592": "    /** Parsing Event that occurs when a ball has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4593": "    /**\n     * Uses a backward sequential search to determine weights for features.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4596": "    /** Parsing Event that occurs when a Flag has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4599": "\t/**\n\t * Removes unused features from a case base.\n     * \n     * @param cb the CaseBase to apply preprocessing to\n     * \n\t * @author Mark Kelly\n\t * @since 0.5\n\t */\n",
    "4600": "    /** Parsing Event that occurs when a line has been sensed\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4601": "    /** CaseEvent method used to stop the agent\n     * \n     * @param ce the Case Event.\n     *\n     * @author Edgar Acosta\n     * @since 0.4\n     */\n",
    "4604": "    /** Parsing Event that occurs when a catch action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4605": "    /**\n     * Sets certain values in classes\n     * \n     * @param w the Weights object that will be used by the agent\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4609": "    /** Parsing Event that occurs when a dash action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4615": "    /** Parsing Event that occurs when a kick action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4616": "    /** Parsing Event that occurs when a catch action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4620": "    /** Parsing Event that occurs when a turn action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4621": "    /** Parsing Event that occurs when a dash action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4623": "    /**\n     * Show the results from the most recent run of the tests.\n     * \n     * @author Mark Kelly\n     * @since 0.5\n     */\n",
    "4625": "    /** Parsing Event that occurs when a kick action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4626": "    /** Parsing Event that occurs when a turn neck action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4628": "    /** Parsing Event that occurs when a turn action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4629": "    /** Parsing Event that occurs when a hear action has been uttered\n     *\n     * @param pe The ParsingEvent\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4772": "\t/** Returns the Case portion of the pairing.\n\t * \n\t * @return the Case portion of the pairing\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.4\n\t */\n",
    "4773": "\t/** Returns the AgentAction portion of the pairing.\n\t * \n\t * @return the AgentAction portion of the pairing\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.4\n\t */\n",
    "4776": "\t/** Stores the time it takes the Agent to select an\n\t * AgentAction to perform.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4778": "\t/** Returns the mean execution time of the Agent being\n\t * monitored (in milliseconds).\n\t * \n\t * @return mean execution time\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4785": "        /** Returns a copy of this Agent Action\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4787": "\t/** Returns the name of the action\n\t * \n\t * @return The name of the actions\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.1 \n\t */\n",
    "4788": "    /** Returns the current size of the casebase.\n     * \n     * @return The current size of the case base\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4789": "        /** Returns a string representation of this object\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4790": "        /** Returns attribute value\n\t *\n\t * @param attrib the attribute name\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4793": "    /** Adds a Case to the CaseBase\n     * \n     * @param ca The Case to add to the CaseBase\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4794": "         /** Returns a copy of this object\n\t  *\n\t  * @author Edgar Acosta\n\t  * @since 0.5\n\t  */\n",
    "4795": "    /**\n     * This returns the string representation of the AgentAction class\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4796": "    /** Sets the list of Cases in the CaseBase\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4798": "\t/** Set the distance to the feature.\n\t * \n\t * @param dist Distance to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4800": "\t/** Sets the value of this feature.\n\t * \n\t * @param value The value to set it to.\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t *\n\t */\n",
    "4802": "\t/** Set the direction to the feature.\n\t * \n\t * @param dir Direction to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4803": "\t/** Returns the value of this feature.\n\t * \n\t * @return the feature value\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t *\n\t */\n",
    "4806": "\t/** Returns the AgentAction associated with the most similar Case.\n\t * If the most similar Case has no associated action, null is returned.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4807": "\t/** Returns the last AgentAction in the list. If there is no\n\t * associated action, null is returned.\n\t * \n\t * @see org.JIFSA.reasoning.actionselection.actionestimation.ActionEstimation\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4808": "\t/** The distance to the feature.\n\t * \n\t * @return The distance to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4811": "\t/** Returns the penalty value specified in the constructor.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t * \n\t */\n",
    "4813": "\t/** Sets the filters that will be applied to each new Case the Agent\n\t * encounters in the senseEnvironment method.\n\t * \n\t * @param filters The filters to use\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4814": "\t/** The direction to the feature.\n\t * \n\t * @return The direction to the feature\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.2\n\t */\n",
    "4816": "\t/** Sets the feature weights to the given weights.\n\t * \n\t * @param newWeights The weights to use\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4817": "\t/** Used to change the CaseBase used by the Agent\n\t * \n\t * @param cb the new CaseBase\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4819": "\t/** Gets the feature weights currently used by the global distance\n\t * measure\n\t * \n\t * @return The feature weights\n\t * @since 0.3\n\t */\n",
    "4821": "\t/** Based on the weights of each type of feature, a complete distance\n\t * will be produced.\n\t * \n\t * @param distances The distance of each type of feature\n\t * @return The weighted distance\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4822": "\t/** Sets the weight for the given type of item\n\t * to the designated value. The weight value must\n\t * be between 0.0 and 1.0 (inclusive).\n\t * \n\t * @param itemName The name of the item type\n\t * @param weight The weight for that item type\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4824": "\t/** Returns the weight for the given type\n\t * of item. If that weight has not been\n\t * set using the setWeight function then\n\t * the default weight value given by\n\t * the constructor will be used.\n\t * \n\t * @param itemName The type of item\n\t * @return The weight of the item\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4825": "    /** Sets the table of sensory items\n     *\n     * @param a table of sensory times, a list of the per feature type\n     *\n     */\n",
    "4826": "    /** Sets the AgentActions associated with this Case\n     * \n     * @return The associated action in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4831": "    /** Returns the AgentInputs associated with this Case\n     * \n     * @return The associated inputs in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4832": "\t/** Sets the sample size. Supplied values must\n\t * be greater than zero. This determines how\n\t * many Cases of each action type are put\n\t * into the output CaseBase.\n\t * \n\t * @param The currently set sample size.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4834": "\t/** Returns the currently set sample size.\n\t * \n\t * @param The currently set sample size.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4836": "    /** Sets the AgentInputs associated with this Case\n     * \n     * @return The associated inputs in this Case\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4837": "    /** Checks to see if any features of a specific type exist\n     * in the AgentInputs object.\n     * \n     * @param featureName The name of the feature type of check for\n     * \n     * @return true if at least one feature of that type is in the AgentInputs\n     * \n     * @author Michael W. Floyd\n     * @since 0.1\n     * \n     */\n",
    "4842": "    /** Returns the number of features in the AgentInputs\n     * of a particular type.\n     * \n     * @param featureName The name of the feature type\n     * \n     * @return The number of features in the AgentInputs of a given type\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4844": "    /**\n     * Returns a string representation of a case class\n     * \n     * @return A string representation of the case class\n     * \n     * @author Caleb Chan\n     * @since 0.5\n     */\n",
    "4847": "    /** Returns the total number of features in the AgentInputs\n     * \n     * @return The number of features in the AgentInputs\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4850": "\t/** Resets the lists and best results so that a new weight search can\n\t * be performed.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4851": "    /** Adds a Case to the Cluster\n     * \n     * @param c The Case to add to the Cluster\n     * \n     * @author Michael W. Floyd\n     * @since 0.5\n     */\n",
    "4853": "    /** Removes all features of a specific type from the AgentVision\n     * \n     * @param featureName The feature type to remove\n     *\n     * @author Michael W. Floyd\n     * @since 0.1\n     */\n",
    "4855": "\t/** Used to get the identifier for the point\n\t * \n\t * @return The identifier\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4856": "\t/** Calculates the error associated with the current clustering.\n\t * \n\t * @param clusters The current clusters\n\t * @param newCentroids The current centroids\n\t * @return The error of this clustering\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4857": "\t/** Goes through the entire supplied CaseBase and removes\n\t * any Cases that do not have an associated AgentAction.\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4860": "\t/** Performs the sorting.\n\t * \n\t * @param initialCB The initial case base\n\t * @return The case base with sorted Spatial2DFeatures\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4861": "\t/** Adds a decision class, keeping consistency state.\n\t *\n\t * If decision class is the same used to initialize the class, the condition class is consistent.\n\t *\n\t * @params decClass a decision class\n\t *\n\t * @since 0.5\n\t */\n",
    "4864": "\t/** Computes the Euclidean distance between the point\n\t * and another point\n\t * \n\t * @param otherPoint The second point\n\t * @return The distance between the points\n\t *  \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4865": "\t/** Sorts a list of Spatial2DObjects by their distance to the\n\t * agent.\n\t * \n\t * @param sensoryItemList A list of Spatial2DFeatures\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4868": "\t/** Returns the size of the decision class. O if inconsistent.\n\t *\n\t * @since 0.5\n\t */\n",
    "4871": "\t/**\n\t * This will save a CaseBase object in the protocol buffer format\n\t * \n\t * @param s A CaseBase object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the CaseBase object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4872": "\t/**\n\t * This will save a Case object in the protocol buffer format\n\t * \n\t * @param s A Case object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the Case object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4873": "\t/** Returns the decision class. Null if inconsistent.\n\t *\n\t * @since 0.5\n\t */\n",
    "4875": "\t/**\n\t * This will save a AgentInputs object in the protocol buffer format\n\t * \n\t * @param s A AgentInputs object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the AgentInputs object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4876": "\t/** After a CaseBase has been processed this method\n\t * will return the maximum occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The maximum number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4877": "\t/**\n\t * This will save a SensoryItem object in the protocol buffer format\n\t * \n\t * @param s A SensoryItem object to be saved\n\t * @return SensoryItemProtocol Returns the object that incases the SensoryItem object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4879": "\t/** After a CaseBase has been processed this method\n\t * will return the minimum occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The minimum number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4880": "\t/**\n\t * This will save an AgentAction object in the protocol buffer format\n\t * \n\t * @param a An AgentAction object to be saved\n\t * @return AgentActionProtocol Returns the object that incases the AgentAction object for saving\n\t * \n\t * @author Caleb Chan\n\t * @since 0.5\n\t */\n",
    "4881": "\t/** After a CaseBase has been processed this method\n\t * will return the average occurrences, of a given sensory item\n\t * type, in a Case.\n\t * \n\t * @param item The name of the sensory item\n\t * @return The average number of occurrences\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "4882": "    /** Agent Inputs getter\n     *\n     * @return the Agent Inputs\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4885": "    /** Team Name getter\n     *\n     * @return the Agent Team Name\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "4886": "\t/** Returns the name of the feature\n\t * \n\t * @return The name of the feature\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.1\n\t */\n",
    "4890": "        /** Returns a copy of this sensory item\n\t *\n\t * @author Edgar Acosta\n\t * @since 0.5\n\t */\n",
    "4893": "       /** returns the feature name\n\t*\n\t* @author Edgar Acosta\n\t* @since 0.5\n\t*/\n",
    "4894": "\t/** Calculates the distance between two features. The distance calculation algorithm\n\t * used must be set using the SensoryItem.setDistanceCalculation(DistanceCalculation) method\n\t * or else an exception will be thrown.\n\t * \n\t * @param f The other feature\n\t * @return the distance betweent the two features\n\t *\n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t *\n\t */\n",
    "4898": "\t/** Calculates the distance penalty for the feature. This is\n\t * usually used when a SensoryItem has no matching feature in another\n\t * case (unequal number of features).\n\t * \n\t * @return The penalty\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.3\n\t */\n",
    "4899": "\t/** Returns an XML representation of the SensoryItem\n\t * \n\t * @return The SensoryItem in XML format\n\t * \n\t * @author Michael W. Floyd\n\t * @since 0.5\n\t */\n",
    "5030": "\t/** Tests the method when no action of several types have been \n\t * logged and all match perfectly.\n\t * \n\t * @author Michael W. Floyd\n\t * @throws Exception \n\t * @since 0.3\n\t */\n",
    "5143": "    /**\n     * process cascade save/update at the start of a flush to discover\n     * any newly referenced entity that must be passed to saveOrUpdate(),\n     * and also apply orphan delete\n     */\n",
    "5203": "\t/** This method is just a hack so we can directly call our private\n\t * method and avoid the high overhead of actually simulating these\n\t * events. While this is fairly \"dirty\", it was done because testing\n\t * time was limited, and a quick and dirty approach covered more code\n\t * than the clean approach.\n\t * \n\t * @return the addPair method that can be directly called.\n\t * @throws Exception\n\t */\n",
    "5380": "    /** Checks whether the ParsedLine enclosed contains a value for\n     * certain key.\n     *\n     * It is used to test for information about the event.\n     *\n     * @param paramName the key name\n     * @return true if there is a value associated with the key.\n     *\n     * @author Edgar Acosta\n     *\n     */\n",
    "5419": "    /** Parses match options sent by the server\n     *\n     * @param message the option message\n     * @param params a string containing the parameters of this message\n     *\n     * @author Edgar Acosta\n     * @since 0.2\n     *\n     */\n",
    "5423": "    /** Parses errors sent by the server\n     *\n     * @param message the error message\n     * @param params a string containing the parameters of this message\n     *\n     * @author Edgar Acosta\n     * @since 0.2\n     *\n     */\n",
    "5521": "    /**\n     * Initialize the flags of the CollectionEntry, including the\n     * dirty check.\n     */\n",
    "5654": "    /**\n     * Sets new page size for table model to display.\n     * @param pageSize\n     *        Number of records to display on\n     *        one page.\n     */\n",
    "5658": "    /**\n     * Returns selected page sie of model.\n     * @return\n     *        Number of records that are currently displayed on page.\n     */\n",
    "5660": "    /**\n     * Set the page of data to display in table.\n     * @param pageNumber\n     *        Zero-based number of page.\n     */\n",
    "5665": "    /**\n     * Set the check values array.\n     * @param checkValues\n     *        Array containing correct values for cells in table.\n     */\n",
    "5666": "    /**\n     * Display page previous to current.\n     */\n",
    "5668": "    /**\n     * Returns renderer for table cells depending on\n     * it's loacation and status.\n     */\n",
    "5669": "    /**\n     * Returns number of pages for current data array. Value is calculated from specified\n     * page size and cannot be set by user.\n     * @return\n     *        Number of pages in table model.\n     *         \n     */\n",
    "5672": "    /**\n     * Gets number of the current page in model.\n     * @return\n     *        Zero-based number of currently displayed page.\n     */\n",
    "5677": "    /**\n     * Fills table model with data to display.\n     * @param data\n     *        Array of data to display in table.\n     * @param columnNames\n     *        Array holding column names for table.\n     * @param pageSize\n     *        New page size to use.\n     */\n",
    "5679": "    /**\n     * Simple warning handler.\n     * @param e\n     *        Parsing exception to handle.\n     * @throws SAXException\n     *         if SAX exception occurs.\n     */\n",
    "5683": "       /**\n        * Return number of columns in table model.\n        * @return\n        *        A number of columns in input data array.\n        */\n",
    "5693": "    /**\n     * Switches validation check for column in table.\n     * \n     * @param columnIndex\n     *        Index of column in table.\n     * @param state\n     *        State of validation. True if validation is set, false otherwise.\n     */\n",
    "5697": "    /**\n     * Returns validation status for first row( boolean value, enabled or disabled),\n     * Otherwise returns value of data stored in cell.\n     * @param rowIndex\n     *        Index of the row to find.\n     * @param columnIndex\n     *        Index of the column to find.\n     * @return\n     *        Object stored in the cell.\n     */\n",
    "5700": "    /**\n     * Adds validator object to column. If validation for column will be enabled,\n     * this object will check if value is valid.\n     * @param columnIndex\n     *        Index of the column to assign validator. \n     * @param validator\n     *        {@link ru.chsu.dupedetector.base.Validator Validator} object to assign.\n     * @return\n     *        True if validator assigned successfully, false otherwise.\n     */\n",
    "5708": "    /**\n     * Adds editor object to column. If value is incorrect it will be corrected by editor.\n     *\n     * @param columnName\n     *        Name of the column to assign validator.\n     * @param editor\n     *        {@link ru.chsu.dupedetector.base.Editor Editor} object to assign.\n     * @return\n     *        True if editor assigned successfully, false otherwise.\n     */\n",
    "5709": "    /**\n     * Resize component for displaying specified maximum number.\n     * @param maxNumber\n     *        Maximum number to display.\n     */\n",
    "5710": "    /**\n     * Gets validator object assigned for column.\n     * @param columnIndex\n     *        Index of column in table.\n     * @return\n     *        Validator object.\n     */\n",
    "5766": "    /** Copy used in createTransferable.\n     * Keeps info about UserObject linked to the node.\n     * @param node\n     *        TreeNode to copy.\n     *@return\n     *        Copy of TreeNode.\n     * */\n",
    "5776": "    /**\n     * Refreshes table contents using specified charset, start line and splitting regular expression.\n     */\n",
    "5779": "    /**\n     * Open file and count lines in it.\n     * @throws IOException\n     *         if any I/O error occurs.\n     */\n",
    "5782": "    /**\n     * Sets new regular expression to split rows.\n     * @param splitRegexp\n     *        New regular expression to use.\n     */\n",
    "5784": "    /**\n     * Getter method for split regular expression.\n     * @return\n     *        Regexp used to split lines of input file by this model.\n     */\n",
    "5785": "    /**\n     * Returns the row count.\n     */\n",
    "5786": "    /**\n     * Returns row count of the table\n     * @return\n     *        Number of lines read from input file.\n     */\n",
    "5787": "    /**\n     * Returns the column count.\n     */\n",
    "5788": "    /**\n     * Returns column count of the table as\n     * maximum column count for all rows.\n     *\n     */\n",
    "5789": "    /**\n     * Returns the value at.\n     */\n",
    "5792": "    /**\n     * Returns the column name.\n     */\n",
    "5794": "    /**\n     * Sets the column names.\n     */\n",
    "5796": "    /**\n     * Returns the map.\n     */\n",
    "5797": "    /**\n     * Get character which start the range.\n     * @return\n     *        First character in range\n     *\n     *\n     */\n",
    "5798": "    /**\n     * Returns length of the range.\n     * @return\n     *        Amount of characters in range.\n     */\n",
    "5799": "    /**\n     * Sets the map.\n     */\n",
    "5805": "    /**\n     * Returns a reference to the current WizardModel for this Wizard component.\n     * @return The current WizardModel for this Wizard component.\n     */    \n",
    "5812": "    /**\n     * Override this method to provide functionality that will be performed just before\n     * the panel is to be displayed.\n     */    \n",
    "5813": "    /**\n     * Override this method to perform functionality when the panel itself is displayed.\n     */    \n",
    "5815": "    /**\n     * Override this method to perform functionality just before the panel is to be\n     * hidden.\n     */    \n",
    "5851": "    /**\n     * Returns an instance of the JDialog that this class created. This is useful in\n     * the event that you want to change any of the JDialog parameters manually.\n     * @return The JDialog instance that this class created.\n     */    \n",
    "5859": "    /**\n     * Returns the owner of the generated javax.swing.JDialog.\n     * @return The owner (java.awt.Frame or java.awt.Dialog) of the javax.swing.JDialog generated\n     * by this class.\n     */    \n",
    "5861": "    /**\n     * Sets DateFormat of input fields.\n     * @param format\n     *        New SimpleDateFormat to use.\n     */\n",
    "5864": "    /**\n     * Reaction to mapping table change event. Preview window should be updated\n     * to reflect mapping changes\n     * @param e\n     *        Tablee change event.\n     */\n",
    "5865": "    /**\n     * Sets the title of the generated javax.swing.JDialog.\n     * @param s The title of the dialog.\n     */    \n",
    "5867": "    /**\n     * Makes new preview sample and displays it in browser TextArea.\n     */\n",
    "5871": "    /**\n     * Returns the current title of the generated dialog.\n     * @return The String-based title of the generated dialog.\n     */    \n",
    "5875": "    /**\n     * Fills the destination array from source array. If source is shorter\n     * it will be copied to destination untill it filled completely.\n     * @param source\n     *        Source array to copy data.\n     * @param dest\n     *        Destination array where objects should be copied to.\n     */\n",
    "5877": "    /**\n     * Sets the modality of the generated javax.swing.JDialog.\n     * @param b the modality of the dialog\n     */    \n",
    "5881": "    /**\n     * Check if file name is valid.\n     * @param fileName\n     *        Name of the file to check.\n     */\n",
    "5884": "    /**\n     * Returns the modality of the dialog.\n     * @return A boolean indicating whether or not the generated javax.swing.JDialog is modal.\n     */    \n",
    "5890": "    /**\n     * Convienence method that displays a modal wizard dialog and blocks until the dialog\n     * has completed.\n     * @return Indicates how the dialog was closed. Compare this value against the RETURN_CODE\n     * constants at the beginning of the class.\n     */    \n",
    "5897": "    /**\n     * Returns the current model of the wizard dialog.\n     * @return A WizardModel instance, which serves as the model for the wizard dialog.\n     */    \n",
    "5898": "    /**\n     * Getter for field containing output file name.\n     * @return\n     *       JTextArea used to keep output file name.\n     */\n",
    "5900": "    /**\n     * Getter for preview text area component.\n     * @return\n     *        JTextArea used to make preview of .xml file.\n     */\n",
    "5901": "    /**\n     * Getter for mapping table.\n     * @return\n     *        Table containing mapping pairs of .xml attributes and MappingResult columns.\n     */\n",
    "5902": "    /**\n     * Getter for field containing output file name.\n     * @return\n     *       JTextArea used to keep output file name.\n     */\n",
    "5903": "    /**\n     * Content panel getter panel.\n     * @return\n     *        Dialog window containing all gui components.\n     *        @see ru.chsu.writer.XMLwriter.gui.XMLWriterGUI\n     */\n",
    "5904": "    /**\n     * Getter for preview text area component.\n     * @return\n     *        JTextArea used to make preview of .xml file.\n     */\n",
    "5907": "    /**\n     * Add a Component as a panel for the wizard dialog by registering its\n     * WizardPanelDescriptor object. Each panel is identified by a unique Object-based\n     * identifier (often a String), which can be used by the setCurrentPanel()\n     * method to display the panel at runtime.\n     * @param id An Object-based identifier used to identify the WizardPanelDescriptor object.\n     * @param panel The WizardPanelDescriptor object which contains helpful information about the panel.\n     */    \n",
    "5909": "    /**\n     * Mapping setup method. Every attribute in xml schema\n     * is associated with column in mpping output.\n     * @param columnNames\n     *        Array containing column names from mapping output.\n     * @param attributes\n     *        Array containing names of columns that should be mapped on every .xml attribute.\n     *\n     */\n",
    "5913": "    /**\n     * Displays the panel identified by the object passed in. This is the same Object-based\n     * identified used when registering the panel.\n     * @param id The Object-based identifier of the panel to be displayed.\n     */    \n",
    "5914": "    /**\n     * Clears generated user list.\n     */\n",
    "5918": "    /**\n     * Generates record for one user only. It can be used to make preview of .xml file contents.\n     * @param fields\n     *        Row of mapping output to create sample.\n     * @param out\n     *        Output stream to marshall data.\n     */\n",
    "5921": "    /**\n     * Opens file output streeam with given file name.\n     * @param fileName\n     *        String containing name of output file.\n     * @throws IOException\n     *         if any I/O error occurs.\n     */\n",
    "5922": "    /**\n     * Close file and close associated resources.\n     * @throws IOException\n     *         if any i/o error occurs.\n     */\n",
    "5923": "    /**\n     * Marshall mapping output to file.\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     */\n",
    "5926": "    /**\n     * Retrieves the last return code set by the dialog.\n     * @return An integer that identifies how the dialog was closed. See the *_RETURN_CODE\n     * constants of this class for possible values.\n     */    \n",
    "5933": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */  \n",
    "5935": "    /**\n     * If fileName is updated it must be validated\n     * @param e\n     *        Update event.\n     */\n",
    "5936": "    /**\n     * If file name is changed it must be validated\n     * @param e\n     *        Remove event\n     */\n",
    "5939": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5945": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */ \n",
    "5951": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5958": "   /**\n     * Mirrors the WizardModel method of the same name.\n     * @return A boolean indicating if the button is enabled.\n     */ \n",
    "5963": "    /**\n     * Mirrors the WizardModel method of the same name.\n     * @param newValue The new enabled status of the button.\n     */ \n",
    "5972": "    /**\n     * Dialog initialization method. Constructs organizational unit tree from mapping\n     * result and draws it in JTree component.\n     * @param result\n     *        Mapping output result.\n     */\n",
    "5974": "    /**\n     * Resets the tree creating only default root node.\n     */\n",
    "5975": "    /**\n     * Opens file for output. Buffered writer is used for output.\n     * @param fileName\n     *        String containing name of output file.\n     * @throws IOException\n     */\n",
    "5978": "    /**\n     * Close file and free all allocated resources\n     * @throws IOException\n     *         If any I|O error occured\n     */\n",
    "5980": "    /**\n     * Generates LDIF script string from mapping output.\n     * @param result\n     *        MappingResult object containing mapping output data.\n     * @return\n     *        Generated LDIF script.\n     */\n",
    "5983": "    /**\n     * Writes mapping result to an output LDIF file.\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     *         if any I|o error happens.\n     */\n",
    "5984": "    /**\n     * Stores indexes of user attributes columns in mapping output.\n     * \n     * @param result\n     *        Object holding all mapping output data.\n     */\n",
    "5988": "    /**\n     * Generates attribute-values specification section for LDIFCLass object\n     *\n     * Attributes are written\n     * {@code\n     * attrval-spec             = AttributeDescription value-spec SEP\n     * AttributeDescription     = AttributeType [\";\" options]\n     * value-spec               = \":\" (    FILL 0*1(SAFE-STRING) /\n     * \":\" FILL (BASE64-STRING) /\n     * \"<\" FILL url)\n     * }\n     * @param object\n     *        LDIFClass object which will be marshalled to output file.\n     * @return\n     *        generated section as a StringBuilder.\n     */\n",
    "5989": "    /**\n     * Creates LDIF user class from mapping output row.\n     * @param data\n     *        String array containing values of attributes from one row of mapping output.\n     * @return\n     *        new LDIF user class object\n     */\n",
    "5991": "    /**\n     * Creates ldif add statement for LDIFClass statement\n     * {@code\n     * ldif-change-record = dn-spec SEP *control changerecord\n     * dn-spec = \"dn:\" (FILL distinguishedName /\n     * \":\" FILL base64-distinguishedName)\n     * change-add = \"add\" SEP 1*attrval-spec\n     * }\n     * @param object\n     *        LDIFClass object containing dn value and attributes specification.\n     * @return\n     *        Generated LDIF record for object.\n     *\n     */\n",
    "5992": "    /**\n     * Sets specified sheet name for output sheet in workbook\n     * @param sheetName\n     *        Name specified for the sheet\n     */\n",
    "5993": "    /**\n     *  Setter for selectedColumns array\n     * @param selectedColumns\n     *        First array contains indexes of columns, that should be exported to output\n     *        file. Second array contains column names.\n     * @param columnNames\n              Array containing column names data.\n     */\n",
    "6000": "    /**\n     * Saves all modifications in the workbook and closes associated file.\n     * @throws IOException\n     *         if any I?o error occurs.\n     */\n",
    "6003": "    /**\n     * Writes one row of values to the specified sheet in workbook.\n     * Only values for selected columns will be written.\n     * @param data\n     *        Array of values\n     * @throws IOException\n     *         if I/O exception occured while this operation.\n     */\n",
    "6005": "    /**\n     * Writes all mapping results to the .xls workshhet\n     * @param result\n     *        Mapping result as two-dimensional array of strings.\n     * @throws IOException\n     */\n",
    "6008": "    /**\n     * Getter for content holding object.\n     * @return\n     *        reference to object holding all GUI data.\n     */\n",
    "6013": "    /**\n     * Charset getter method.\n     * @return\n     *     Charset used for reading input file.\n     */\n",
    "6015": "    /**\n     * Charset setter method.\n     * \n     * @param charset\n     *        New charset to use.\n     *        @see java.nio.charset.Charset\n     */\n",
    "6020": "    /**\n     * Getter for starting line number.\n     * @return\n     *        Zero based line number.\n     */\n",
    "6022": "    /**\n     * Sets new start line number of the file. All lines before this line will be skipped.\n     * @param startLine\n     *        New start line number.\n     */\n",
    "6024": "    /**\n     * Refreshes preview when import settings are changed\n     * @param e\n     *        Change event to handle.\n     */\n",
    "6027": "    /**\n     * Refreshes preview when import settings are changed\n     * @param e\n     *        Action event to handle.\n     */\n",
    "6029": "    /**\n     * Sets split regexp for input file.\n     * @param splitRegexp\n     *          String new splitting regexp.\n     */\n",
    "6032": "    /**\n     * Sets names for attributes read from input file.\n     * @param columns\n     *          Array containing names of attributes.\n     */\n",
    "6040": "    /**\n     * Updates preview window where separator symbol is changed.\n     * @param e\n     *        ActionEvent to process.\n     */\n",
    "6043": "    /**\n     * Skips all lines before start line.\n     *\n     * @throws FileNotFoundException\n     *          if file not found.\n     * @throws NoSuchElementException\n     *          if file is empty.\n     *\n     */\n",
    "6050": "    /**\n     * Getter method for content panel.\n     * @return\n     *        Panel containing all gui components related to text reader setup.\n     */\n",
    "6051": "    /**\n     * Getter for content panel.\n     * @return\n     *       Panel with all visual components for this wizard page.\n     */\n",
    "6052": "    /**\n     * Returns JSpinner holding the starting line number of the input file.\n     */\n",
    "6053": "    /**\n     * Returns preview table.\n     * @return\n     *      JTable containing text file split into rows according to selected separator symbol.\n     */\n",
    "6055": "    /**\n     * Returns selected charset.\n     * @return\n     *        Returns charset object currently selected in charset combo box.\n     */\n",
    "6057": "    /**\n     * Returns file preview table.\n     */\n",
    "6059": "    /**\n     * Returns input file associated with reader.\n     * @return\n     *        Input file.\n     *        @see java.io.File\n     */\n",
    "6060": "    /**\n     * Sets checkbox action listner for all checkboxes on panel\n     * @param a\n     *         Action listener to set.\n     */\n",
    "6061": "    /**\n     * Set the file used as input for reader.\n     * @param file\n     *        New input file.\n     */\n",
    "6063": "    /**\n     * Set the table model for preview JTable.\n     * @param fileViewModel\n     *        New table model to set.\n     */\n",
    "6064": "    /**\n     * Set selected worksheet to import data.\n     * @param sheetIndex\n     *        New  index of sheet. \n     */\n",
    "6065": "    /**\n     * Returns the current index of sheet in workbook.\n     * @return\n     *        Index of selected sheet in the workbook.\n     */\n",
    "6066": "    /**\n     * Returns panel containing all gui-components on this dialog ppage.\n     * @return\n     *        COntent panel.\n     */\n",
    "6067": "    /**\n     * Get the name of current sheet.\n     * @return\n     *        String containing sheet name.  \n     */\n",
    "6068": "    /**\n     * Updates table model where selected separator is changed.\n     */\n",
    "6070": "    /**\n     * Return the number of sheets in workbook.\n     * @return\n     *        Number of sheets in opened workbook.\n     * */\n",
    "6071": "    /**\n     * Set selected columns indexes.\n     * @param selectedColumns\n     *        Array containing selected columns indexes.\n     * @param columnNames\n     *        Names of columns to use for this columns.\n     * @throws IndexOutOfBoundsException\n     *         If column index is not within sheet column range.\n     */\n",
    "6076": "    /**\n     * Selects all the columns on sheet and get column names as headers\n     * @throws IndexOutOfBoundsException\n     *         If column index is not within sheet column range.\n     */\n",
    "6084": "    /**\n     * Getter for preview table\n     * @return\n     *        JTable displaying .xls data.\n     */\n",
    "6086": "    /**\n     * Getter for label containing sheet name.\n     * @return\n     *       JLabel component used to display sheet name.\n     */\n",
    "6088": "    /**\n     * Get spinner used to display selected sheet index.\n     * @return\n     *          JSpinner object used to change sheet index.\n     */\n",
    "6090": "    /**\n     * Get content panel with all GUI - components.\n     * @return\n     *        Panel with all content related to Xls-reader.\n     */\n",
    "6096": "    /**\n     * Set number of sheet in workbook to display.\n     * @param sheetNumber\n     *        New sheet number.\n     */\n",
    "6099": "    /**\n     * Get name of selected worksheet.\n     */\n",
    "6106": "    /**\n     * Returns file displayed by the model.\n     * @return\n     *        File object describing input file.\n     *        @see java.io.File\n     */\n",
    "6107": "    /**\n     * Updates preview table when selected sheet is changed\n     * @param e\n     *        Change event to handle.\n     */\n",
    "6113": "    /**\n     * Get rowCount from the worksheet.\n     * @return\n     *        Number of rows in current worksheet.\n     */\n",
    "6114": "    /**\n     * Action handler for line amount change. If number of lines on the page is changed\n     * number of available pages is changed too.\n     * @param e\n     *        Aaction event to handle.\n     */\n",
    "6115": "    /**\n     * Get colCount from worksheet.\n     * @return\n     *        Number of columns in current worksheet.\n     */\n",
    "6118": "    /**\n     * Get value of specified cell in worksheet.\n     * @param rowIndex\n     *        Row for cell.\n     * @param columnIndex\n     *        Column for cell.\n     * @return\n     *        Cell value.\n     */\n",
    "6122": "    /**\n     * Refreshes table contents when page number is changed.\n     * @param e\n     *        JSpinner change event to handle.\n     */\n",
    "6129": "    /**\n     * Updates available pages counter when number of records in table or\n     * to display on one page is changed.\n     *\n     */\n",
    "6135": "    /**\n     * Changes the way how mapping output is stored in memory.\n     *\n     */\n",
    "6144": "    /**\n     * Get content panel holding all gui elements on panel.\n     * @return\n     *        JPanel with all content.\n     */\n",
    "6154": "    /**\n     * Searches for plugin class in list of available plugins.\n     * @param mapperClass\n     *        Mapper class to search.\n     * @return\n     *        Zero-based list index, -1 if class is not found.\n     */\n",
    "6158": "    /**\n     * Getter for page amount label.\n     * @return\n     *        JLabel component used to display number of pages in table model.\n     */\n",
    "6159": "    /**\n     * Get amount of records to display on one page.\n     * @return\n     *        Amount of records to display.\n     */\n",
    "6161": "    /**\n     * Get combo box used to display records count.\n     * @return\n     *        JComboBox component used to display records count.\n     */\n",
    "6163": "    /**\n     * Getter for spinner component containing record number.\n     * @return\n     *        JSpinner used for record number display.\n     */\n",
    "6165": "    /**\n     * Preview JTable getter.\n     * @return\n     *       Returns JTable component used to display preview data.\n     */\n",
    "6166": "            /**\n             * Selection handler for plugin list. Changes sekected plugin specific settings panel.\n             * @param e\n             *        Selection event to handle.\n             */\n",
    "6168": "    /**\n     * Custom GUI components initialization procedure\n     */\n",
    "6170": "    /**\n     * Set up available attributes list for plugins to use.\n     * @param collection\n     *        Collection of AttributeBean objects containing attribute info.\n     */\n",
    "6173": "    /**\n     * Setup and shows add mapper dialog.\n     * @param bean\n     *        AttributeBean to display in add mapper dialog\n     *\n     */\n",
    "6176": "    /**\n     * Creates new plugin object based on it's class.\n     * @param mapperClass\n     *        Actual class of the plugin.\n     * @return\n     *         New instance of plugin with default settings.\n     * @throws PluginConfigurationException\n     *         if such mapper class is not found.\n     */\n",
    "6181": "    /**\n     * Returns true if tree contains specified string value.\n     * @param value\n     *        value to search.\n     * @return\n     *        True if tree contains value, false otherwise.\n     */\n",
    "6183": "    /**\n     * Custom UI initialization procedure.\n     */\n",
    "6184": "    /**\n     * Adds child to tree checking for cyclic dependence.\n     * @param value\n     *        Value to store in child node.\n     * @throws DependencyException\n     *         If value is already found in tree.\n     */\n",
    "6186": "    /**\n     * Adds array of values to tree.\n     * @param values\n     *        Values to add.\n     * @throws DependencyException\n     *         if value is found in tree.\n     */\n",
    "6191": "    /**\n     * Checks if attribute is cyclic dependent form itself, e.g.\n     * attribute that used for it's generation uses this attribute as base attribute.\n     * @param attributeName\n     *        Name of attribute to check.\n     * @param parent\n     *        Constructed Dependency tree for this attribute.\n     *        @see ru.chsu.mapper.dependence.DependencyTree\n     * @throws ru.chsu.mapper.dependence.DependencyException\n     *         if attribute is self-dependent,\n     */\n",
    "6196": "    /**\n     * Checks all available attributes for cyclic dependency.\n     * @param attributes\n     *        Collection of attributes to check.\n     * @throws ru.chsu.mapper.dependence.DependencyException\n     *         if cyclic dependency is found.\n     */\n",
    "6201": "    /**\n     * Input attributes map setter.\n     */\n",
    "6212": "    /**\n     * Configures mapper using specified file name.\n     * @throws DependencyException\n     *         If some cyclic dependency is found in configuration file.\n     * @throws PluginConfigurationException\n     *         If configuration file is invalid or cannot be read.\n     *\n     * @param configFileName\n     *        Name of the file to use.\n     */\n",
    "6229": "    /**\n     * Sets specified mapper configuration to use for attribute.\n     * @param field\n     *        Name of attribute.\n     * @param mapperBean\n     *        Attribute bean describing attribute generation settings.\n     */\n",
    "6540": "    /**\n     * Replaces method parameters with TRMI stubs as needed. See {@link\n     * trmi.Naming#getParameterStubIfNeeded(Object, Class)} for more details.\n     */\n",
    "6650": "    /**\n     * add a collection we just loaded up (still needs initializing)\n     */\n",
    "6717": "    /**\n     * add a detached uninitialized collection\n     */\n",
    "6852": "    /**\n     * associate a holder with an array - called after loading array\n     */\n",
    "6868": "\t/**\n\t *\tDragSourceListener interface\n\t *  @param e event\n\t */\n",
    "7190": "\t/**\n\t *  KeyReleased Listener (nop)\n\t * \t@param e event\n\t */\n",
    "7463": "    /**\n     * Just in case user forgot to commit()/cancel() or close()\n     */\n",
    "7571": "    /**\n     * Get the collection entry for a collection passed to filter,\n     * which might be a collection wrapper, an array, or an unwrapped\n     * collection. Return null if there is no entry.\n     */\n",
    "7828": "    /**\n     * remove any hard references to the entity that are held by the infrastructure\n     * (references held by application or other persistant instances are okay)\n     */\n",
    "7938": "    /**\n     * Evict collections from the factory-level cache\n     */\n",
    "12961": "\t/**\n\t * Default create method\n\t * \n\t * @throws CreateException\n\t * @ejb.create-method\n\t */\n",
    "29877": "    /**\n     * This sets the codeset for this document\n     *\n     * @param codeset - String representation of codeset for this\n     *                  document\n     */\n",
    "29883": "    /** \n     * This gets the codeset for this document\n     *\n     * @return String the codeset for this document\n     */\n",
    "29887": "    /**\n     * This adds a stylesheet to the XML document.\n     *\n     * @param href - String reference to stylesheet\n     * @param type - String type of stylesheet\n     */\n",
    "29892": "    /**\n     * This adds a stylesheet to the XML document, and assumes\n     *   the default <code>text/xsl</code> type.\n     *\n     * @param href = String reference to stylesheet\n     */\n",
    "29897": "    /**\n     * This adds the specified element to the prolog of the document\n     *\n     * @param element - Element to add\n     */\n",
    "29900": "    /**\n     * This adds an element to the XML document.  If the\n     *   document is empty, it sets the passed in element\n     *   as the root element.\n     *\n     * @param element - XML Element to add\n     * @return XMLDocument - modified document\n     */\n",
    "29906": "    /**\n     * Write the document to the OutputStream\n     *\n     * @param out - OutputStream to write to\n     */\n",
    "29909": "    /**\n     * Add an additional instruction (which works like an XML\n     *   attribute) to the PI\n     *\n     * @param name - Name of instruction (e.g. standalone)\n     * @param value - value of instruction (e.g. \"no\")\n     */\n",
    "29916": "    /**\n     * Clone this document\n     *\n     * @return Object - cloned XMLDocument\n     */\n",
    "29941": "    /**\n        this method actually performs the filtering.\n    */\n",
    "30502": "\t/**\n\t * Creates an initially unselected toggle button\n\t * without setting the text or image.\n\t */\n",
    "30504": "\t/**\n\t * Creates an unselected toggle button with the specified text.\n\t *\n\t * @param text  the string displayed on the toggle button\n\t */\n",
    "30508": "\t/**\n\t * Creates a toggle button with the specified text\n\t * and selection state.\n\t *\n\t * @param text  the string displayed on the toggle button\n\t * @param selected  if true, the button is initially selected;\n\t *                  otherwise, the button is initially unselected\n\t */\n",
    "42686": "\t/**\n\t * \tConstructor get TableNAme from Table\n\t * \t@param AD_Table_ID Table_ID\n\t */\n",
    "63167": "\t/** Null means no checks\n\t  */\n",
    "64598": "    /**\n     * This method initializes the provided baseimplementation \n     * of the model properly.<p>\n     * This is not done in the constructor because there might\n     * be cases where some base data is set in the constructor \n     * and must be present for properly working model getter methods.<p>\n     * <b>MUST BE CALLED BY ANY SUBCLASS!</b>\n     */\n",
    "64614": "    /**\n     * Implement to specify the height of the first row.\n     * This value might be overwritten when setFirstRowHeight() is called.\n     * @return Should return the height of the first row in the table.\n     * @see #setFirstRowHeight(int);\n     * @deprecated Implement getInitialRowHeight(0) instead!\n     */\n",
    "64625": "    /**\n     * Sets the row height for the first row.\n     * @deprecated Use setRowHeight(0, value) instead.\n     */\n",
    "64630": "    /**\n     * Delegates the real content retrieval to the method\n     * <code>doGetContentAt(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getContentAt(int, int)\n     */\n",
    "64634": "    /**\n     * Returns the tooltip for the given cell. <p>\n     * Simply calls the method <code>doGetTooltipAt()</code>.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "64639": "    /**\n     * Returns the tooltip text for the given cell. Implement this\n     * method rather than <code>getTooltipAt()</code>.\n     * @param col The column index.\n     * @param row The row index.\n     * @return Returns the tooltip text for the cell. Default: None.\n     */\n",
    "64645": "    /**\n     * Delegates the real editor retrieval to the method\n     * <code>doGetCellEditor(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getCellEditor(int, int)\n     */\n",
    "64662": "    /**\n     * Calls the method <code>doSetContentAt(int, int, Object)</code>\n     * to actually set the content of a table cell to the model.\n     * @see de.kupzog.ktable.KTableModel#setContentAt(int, int, java.lang.Object)\n     */\n",
    "64674": "    /**\n     * Returns wether a given cell is fixed.\n     * @param col The column index\n     * @param row the row index\n     * @return returns true if the cell is fixed, false otherwise. \n     */\n",
    "64698": "\t/**\n\t * Implement In-Textfield navigation with the keys... \n\t * @see de.kupzog.ktable.KTableCellEditor#onTraverse(org.eclipse.swt.events.TraverseEvent)\n\t */\n",
    "64712": "    /**\n     * Checks wether the given horizontal alignment parameter is valid.\n     * @param align The alignment to check\n     * @return True if the alignment value is valid.\n     */\n",
    "64715": "    /**\n     * Checks wether the given vertical alignment parameter is valid.\n     * @param align The alignment to check\n     * @return True if the alignment value is valid.\n     */\n",
    "64719": "\t/**\n\t * Called when the open-method returns.\n\t */\n",
    "64722": "    /** \n     * Calls doBelongsToCell to get the cell span.\n     * Never overwrite this method, but implement doBelongsToCell().\n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int)\n     */\n",
    "64723": "\t/**\n\t * Sets the bounds of the dialog to the cell bounds.\n\t * DEFAULT: Ignored. Set the required shell properties by\n\t * overwriting the method <code>setupShellProperties(Shell)</code>.\n\t */\n",
    "64727": "    /**\n     * Ignored, since it is no longer in use. We use a dialog instead \n     * of a control!\n     */\n",
    "64733": "    /**\n     * Return (0,0) if cell should stay in its own area,\n     * or return the cell that should overlap this cell.<br>\n     * Overwrite this rather than belongsToCell()!<p>\n     * Defaults to no spanning.  \n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int).\n     */\n",
    "64735": "    /**\n\t * Activates the editor at the given position.\n\t * Instantly closes the editor and switch the boolean content value.\n\t * @param row\n\t * @param col\n\t * @param rect\n\t */\n",
    "64737": "\t/**\n\t * Simply switches the boolean value in the model!\n\t */\n",
    "64743": "    /**\n     * This implementation does nothing!\n     * @see de.kupzog.ktable.KTableCellEditor#setContent(java.lang.Object)\n     */\n",
    "64744": "    /**\n     * Maps the given row index that references a visible row, to one \n     * that is internally used in the tablemodel.<br>\n     * This allows different tablemodels (such as the sorted table model) \n     * to rearrange rows flexibly. This visual rearrangement leads\n     * to changed shown row indices, but using this method, the model-internal\n     * row indices stay the same. \n     * @param shownRow The row index as displayed by the KTable.\n     * @return Returns the row index as used in the model. This stays unchanged\n     * even if the visual arrangement is changed (e.g. when sorting the talbe).\n     */\n",
    "64749": "    /**\n     * Sets the column index this comparator operates on.\n     * @param column the column index to use.\n     */\n",
    "64752": "    /**\n     * Maps the given row index from a model-internal to one that references\n     * visualized table rows. This is usually used to do something with the\n     * KTable from within the tablemodel. \n     * @param modelRow The row index as used in the model.\n     * @return Returns the row index as needed/used by the KTable to display the data.\n     */\n",
    "64754": "\t/**\n\t * Is called if a non-fixed cell is selected (gets the focus).\n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64757": "\t/**\n\t * Is called if a fixed cell is selected (is clicked).\n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64759": "    /**\n     * Sets the sorting direction.\n     * @param direction The sort direction, either\n     * SORT_NONE, SORT_UP or SORT_DOWN.\n     */\n",
    "64763": "\t/**\n\t * disposes the editor and its components\n\t */\n",
    "64768": "    /**\n     * Sets the tablemodel to work on.\n     * @param model The <class>KTableSortedModel</class> to work with.\n     */\n",
    "64775": "\t/**\n\t * Deactivates the editor.\n\t * @param save\n\t * If true, the content is saved to the underlying table.\n\t */\n",
    "64776": "    /**\n     * Sorts the model elements so that the retrieval\n     * methods by index (e.g. of type <code>method(int col, int row)</code>)\n     * return the content ordered in the given direction.<p>\n     * Note: To make the table reflect this sorting, it must be refreshed/redrawn!<p>\n     * Note: Often it is desired that there is some visual sign of how the sorting is.\n     * \n     * @param comparator The KTableSortComparator that knows how to sort the rows!\n     */\n",
    "64777": "\t/**\n\t * Returns true if the editor has the focus.\n\t * @return boolean\n\t */\n",
    "64780": "\t/**\n\t * Sets the editor's position and size\n\t * @param rect\n\t */\n",
    "64784": "    /**\n     * Overwrites the style bits with the given one.\n     * @see getStyle() for accessing the style bits.\n     * @param style The styles to AND with the current style bits.\n     */\n",
    "64786": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Accesses the sorted model accordingly.\n     * Delegates the real content retrieval to the method\n     * <code>doGetContentAt(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getContentAt(int, int)\n     */\n",
    "64789": "    /**\n     * Returns the tooltip for the given cell. <p>\n     * Calls the method <code>doGetTooltipAt()</code> to retrieve\n     * content.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "64794": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Delegates the real editor retrieval to the method\n     * <code>doGetCellEditor(int, int)</code>.\n     * @see de.kupzog.ktable.KTableModel#getCellEditor(int, int)\n     */\n",
    "64796": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Calls the method <code>doSetContentAt(int, int, Object)</code>\n     * to actually set the content of a table cell to the model.\n     * @see de.kupzog.ktable.KTableModel#setContentAt(int, int, java.lang.Object)\n     */\n",
    "64800": "    /**\n     * Maps between the KTable row index and the model row index!<p>\n     * Calls the method <code>doGetCellRenderer(int, int)</code>\n     * to retrieve the cell renderer for a cell.\n     * @see de.kupzog.ktable.KTableModel#getCellRenderer(int, int)\n     */\n",
    "64803": "    /** \n     * Sorting disables all cell spanning. The behavior is:\n     * spanned cells are spittet, but all cells originally spanned\n     * get the content of the spanned cell. \n     * @see de.kupzog.ktable.KTableModel#belongsToCell(int, int)\n     */\n",
    "64810": "    /**\n     * Draws the cell as a button. It is visibly clickable and contains a button text.\n     * All line borders of the cell are overpainted - there will not be any border between buttons. \n     * @param gc The GC to use when painting.\n     * @param rect The cell area as given by KTable. (contains 1px bottom & right offset)\n     * @param text The text to paint on the button. \n     * @param pressed Wether the button should be painted as clicked/pressed or not. \n     */\n",
    "64839": "    /**\n     * Mirrors the given image. Note that the returned image must be disposed after rendering!\n     * @param source The source image. Gets disposed in this method.\n     * @return Returns a new image with mirrored content. The caller is responsible for disposing this image!\n     */\n",
    "64840": "\t/**\n\t * Is called if a non-fixed cell is selected (gets the focus). \n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64841": "\t/**\n\t * Is called if a fixed cell is selected (is clicked). \n\t * @see KTable for an explanation of the term \"fixed cells\".\n\t * @param col\n\t * the column of the cell\n\t * @param row\n\t * the row of the cell\n\t * @param statemask\n\t * the modifier keys that where pressed when the selection happened.\n\t */\n",
    "64848": "    /**\n     * Draws the default border by invoking the relevant method in BorderPainter.\n     * <p>\n     * Overwrite this method if you desire another border style.\n     * @param gc The GC to use.\n     * @param rect The cell bounds. Note that this method returns the new cell bounds\n     * that exlude the border area.\n     * @param vBorderColor The vertical border color.\n     * @param hBorderColor The horizontal border color.\n     * @return Returns the new bounds of the cell that should be filled with content.\n     */\n",
    "64860": "    /**\n     * Sets the alignment of the cell content.\n     * @param style The OR-ed alignment constants for\n     * vertical and horizontal alignment as defined in\n     * SWTX.\n     * @see SWTX#ALIGN_HORIZONTAL_CENTER\n     * @see SWTX#ALIGN_HORIZONTAL_LEFT\n     * @see SWTX#ALIGN_HORIZONTAL_RIGHT\n     * @see SWTX#ALIGN_VERTICAL_CENTER\n     * @see SWTX#ALIGN_VERTICAL_TOP\n     * @see SWTX#ALIGN_VERTICAL_BOTTOM\n     */\n",
    "64885": "    /**\n     * Set the foreground color used to paint text et al.\n     * @param fgcolor The color or <code>null</code> to\n     * reset to default (black). Note that also the default color can be set using <code>setDefaultForeground(Color)</code>\n     * @see #setDefaultForeground(Color)\n     */\n",
    "64898": "    /**\n     * Changes the default foreground color that will be used\n     * when no other foreground color is set. \n     * (for example when <code>setForeground(null)</code> is called)\n     * @param fgcolor The foreground color to use.\n     * @see #setForeground(Color)\n     */\n",
    "64900": "    /** \n     * Implement also cell spans so that it can be demonstrated how\n     * the sorting algorithm works in this case: \n     * @see de.kupzog.ktable.KTableDefaultModel#doBelongsToCell(int, int)\n     */\n",
    "64907": "    /**\n     * Set the background color that should be used when \n     * painting the cell background.<p>\n     * If the <code>null</code> value is given, the default \n     * color will be used. The default color is settable using \n     * <code>setDefaultBacktround(Color)</code>\n     * @param bgcolor The color or <code>null</code> to\n     * reset to default.\n     * @see #setDefaultBackground(Color)\n     */\n",
    "64917": "    /**\n     * Changes the default background color that will be used when\n     * no background color is set via setBackground().\n     * @param bgcolor The color for the background.\n     * @see #setBackground(Color)\n     */\n",
    "64943": "    /**\n     * Sets the font the renderer will use for drawing\n     * its content.\n     * @param font The font to use. Be aware that\n     * you must dispose fonts you have created.\n     */\n",
    "64959": "    /**\n     * Applies the font style of the renderer to the\n     * gc that will draw the content.<p>\n     * <b>To be called by implementors</b>\n     * @param gc The gc that will draw the \n     * renderers content.\n     */\n",
    "64969": "    /**\n     * Resets the given GC's font parameters to the\n     * original state.\n     * @param gc The gc to draw with.\n     */\n",
    "64989": "\t/**\n\t * Return the collection of tasks\n\t */\n",
    "64991": "\t/**\n\t * Add a new task to the collection of tasks\n\t */\n",
    "65013": "\t/**\n\t * Set the 'completed' property\n\t * \n\t * @param b\n\t */\n",
    "65014": "\t/**\n\t * Set the 'description' property\n\t * \n\t * @param string\n\t */\n",
    "65017": "\t/**\n\t * Set the 'owner' property\n\t * \n\t * @param string\n\t */\n",
    "65018": "\t/**\n\t * Set the 'percentComplete' property\n\t * \n\t * @param i\n\t */\n",
    "65052": "\t/**\n\t * This method initializes sashForm\t\n\t *\n\t */\n",
    "65053": "\t/**\n\t * This method initializes trifonTextModelExample\t\n\t * \t\n\t * @return net.comap.table.example.viewmodel.TrifonTextModelExample\t\n\t */\n",
    "65055": "\t/**\n\t * This method initializes topComposite\t\n\t *\n\t */\n",
    "65057": "\t/**\n\t * This method initializes bottomComposite\t\n\t *\n\t */\n",
    "65059": "\t/**\n\t * This method initializes composite\t\n\t *\n\t */\n",
    "65060": "\t/**\n\t * This method initializes kTable\t\n\t *\n\t */\n",
    "65063": "\t/**\n\t * This method initializes composite1\t\n\t *\n\t */\n",
    "65066": "\t/**\n\t * This method initializes kTable\t\n\t *\n\t */\n",
    "65070": "\t/**\n\t * This method initializes bottomCTabFolder\t\n\t *\n\t */\n",
    "65108": "\t/**\n\t * Check if this user is surveyant.\n\t * \n\t * @return true, if surveyant\n\t */\n",
    "65110": "\t/**\n\t * Liefert die Nachbedingung zu dieser Content-Gruppe.\n\t * \n\t * @return Condition\n\t * @hibernate.many-to-one\n\t */\n",
    "65112": "\t/**\n\t * Set the content of this container.\n\t * \n\t * @param list the content\n\t */\n",
    "65113": "\t/**\n\t * This method initializes tabFolder\t\n\t *\n\t */\n",
    "65115": "\t/**\n\t * Get the filename of this image.\n\t * \n\t * @return die URL\n\t * @hibernate.property not-null=\"true\"\n\t */\n",
    "65117": "\t/**\n\t * Set the filename.\n\t * \n\t * @param string the filename\n\t */\n",
    "65118": "\t/**\n\t * Set the image.\n\t * \n\t * @param image the image\n\t */\n",
    "65119": "\t/**\n\t * Cehck if this user is \"user\".\n\t * \n\t * @return true, if user\n\t */\n",
    "65128": "\t/**\n\t * Check if this user is admin.\n\t * \n\t * @return true, if admin\n\t */\n",
    "65132": "\t/**\n\t * Get the text.\n\t * \n\t * @return the text\n\t * @hibernate.property type=\"text\"\n\t */\n",
    "65135": "\t/**\n\t * Get the layout.\n\t * \n\t * @return the layout\n\t * @hibernate.property\n\t */\n",
    "65138": "\t/**\n\t * Set the text.\n\t * \n\t * @param string the text\n\t */\n",
    "65141": "\t/**\n\t * Set the layout.\n\t * \n\t * @param theLayout the layout\n\t */\n",
    "65144": "\t/**\n\t * Get abstract of this text. If the text is more than 120 characters long, the first and last 60 chars concatenated\n\t * with \"...\" are returned.\n\t * \n\t * @return abstract\n\t */\n",
    "65147": "\t/**\n\t * Get the creation date.\n\t * \n\t * @return the date\n\t * @hibernate.property column=\"TAN_CDATE\" not-null=\"true\"\n\t */\n",
    "65150": "\t/**\n\t * Get the end date.\n\t * \n\t * @return the date\n\t * @hibernate.property column=\"TAN_EDATE\"\n\t */\n",
    "65151": "\t/**\n\t * Get the start date.\n\t * \n\t * @return the start date\n\t * @hibernate.property column=\"TAN_SDATE\"\n\t */\n",
    "65155": "\t/**\n\t * Get the state.\n\t * \n\t * @return the state\n\t * @hibernate.property column=\"TAN_STATUS\" not-null=\"true\"\n\t */\n",
    "65158": "\t/**\n\t * Get the survey.\n\t * \n\t * @return the survey\n\t * @hibernate.many-to-one column=\"TAN_SURVEY_ID\" not-null=\"true\"\n\t */\n",
    "65162": "\t/**\n\t * Set the creation date.\n\t * \n\t * @param date the date\n\t */\n",
    "65165": "\t/**\n\t * Set the end date.\n\t * \n\t * @param date the date\n\t */\n",
    "65168": "\t/**\n\t * Set the start date.\n\t * \n\t * @param date the date\n\t */\n",
    "65171": "\t/**\n\t * Set the state.\n\t * \n\t * @param state the tate\n\t */\n",
    "65175": "\t/**\n\t * Set the survey.\n\t * \n\t * @param theSurvey the survey\n\t */\n",
    "65212": "\t/**\n\t * Liefert das Layout des Fragetextes.\n\t * \n\t * @return das Layout\n\t * @hibernate.property\n\t */\n",
    "65220": "\t/**\n\t * Liefert das Layout der Antwortm&ouml;glichkeiten.\n\t * \n\t * @return das Layout\n\t * @hibernate.property\n\t */\n",
    "65353": "    /**\n     * <p>Compares this {@link InternalGroupPrincipal} to the provided group principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalGroupPrincipal} are equal.\n     */\n",
    "65370": "    /**\n     * <p>Compares this {@link InternalRolePrincipal} to the provided role principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalRolePrincipal} are equal.\n     */\n",
    "65394": "    /**\n     * <p>Compares this {@link InternalUserPrincipal} to the provided user principal\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalUserPrincipal} are equal.\n     */\n",
    "65424": "    /**\n     * <p>Compares this {@link InternalCredential} to the provided credential\n     * and check if they are equal.</p>\n     * return Whether the {@link InternalCredential} are equal.\n     */\n",
    "65427": "    /**\n     * For this implementation, always returns \"/\"\n     */\n",
    "65555": "    /**\n     * Forward the <code>retrieveOptions</code> call to the target\n     * <code>ChainedOption</code> if the <code>refreshProperty</code> property\n     * on the target command is true.\n     * \n     * @param command\n     *            Command object to use when extracting values that the\n     *            <code>ChainedOption</code> depends on.\n     * @param context\n     *            may contain any context that might be interesting for\n     *            retreiving valid options. E.g. a\n     *            <code>HttpServletRequest</code> object can be supplied as\n     *            context for a Strategy to perform filtering based on user\n     *            access.\n     * \n     * @return the result of retrieveOptions on the target ChainedOption if we are\n     *         to forward, an empty <code>LinkedList</code> otherwise.\n     * \n     * @see net.sf.chainedoptions.ChainedOption#retrieveOptions(java.lang.Object, java.lang.Object)\n     */\n",
    "65556": "    /**\n     * Create a <code>LabelValueBean</code> with name and value as the\n     * supplied String.\n     * \n     * @param object\n     *            <code>String</code> to convert.\n     * @return a new <code>LabelValueBean</code>\n     * @throws ClassCastException\n     *             if the supplied <code>object</code> is not a\n     *             <code>String</code>.\n     */\n",
    "65558": "    /**\n     * Do nothing, just return the supplied list.\n     * \n     * @param options\n     *            the list to return.\n     * @param context\n     *            ignored for this implementation.\n     * @return the supplied list, unmodified.\n     */\n",
    "65559": "    /**\n     * Forward the <code>updateValue</code> call to the target\n     * <code>ChainedOption</code if the <code>refreshProperty</code> property on the target command is true.\n     * @param command\n     *            The command object that may be updated.\n     * @param options\n     *            A list of {@link LabelValueBean}objects to choose from.\n     * @param context\n     *            may contain any context that might be interesting for\n     *            retreiving valid options. E.g. a\n     *            <code>HttpServletRequest</code> object can be supplied as\n     *            context for a Strategy to perform filtering based on user\n     *            access.\n     * \n     * @see net.sf.chainedoptions.ChainedOption#updateValue(java.lang.Object, java.util.List, java.lang.Object)\n     */\n",
    "65561": "    /**\n     * Returns the value of the first item in the list.\n     * \n     * @param options\n     *            the list of options.\n     * @param context\n     *            ignored for this implementation.\n     * @return the value of the first item in the List if the List is not empty,\n     *         empty String otherwise.\n     */\n",
    "65569": "    /**\n     * Extra items are items that signify special values, like ANY, EMPTY,\n     * NOCHANGE etc.\n     * \n     * @param extraItems\n     *            The extra items to set as a list of LabelValueBean objects.\n     */\n",
    "65570": "    /**\n     * Forward the call to the target <code>ChainedOption</code>\n     * \n     * @return the result from the target ChainedOption.\n     */\n",
    "65574": "    /**\n     * Set the <code>ChainedOption</code> that this decorator wraps.\n     * \n     * @param chainedOption\n     *            the <code>ChainedOption</code> to forward calls to.\n     */\n",
    "65581": "    /**\n     * Set the name of the property to inspect on the <code>command</code>\n     * object to determine whether {@link #retrieveOptions(Object, Object)}and\n     * {@link #updateValue(Object, List, Object)}should forward the call to the\n     * target <code>ChainedOption</code>.\n     * \n     * @param refreshProperty\n     *            name of the property.\n     */\n",
    "65582": "    /**\n     * Set the options to display in this OptionValue. Needs to be a list of\n     * LabelValueBeans.\n     * \n     * @param options\n     */\n",
    "65584": "    /**\n     * Just sort the options for this implementation.\n     * \n     * @param options\n     *            the options to sort.\n     * @param context\n     *            ignored for this implementation.\n     * \n     * @return a new Sorted list containing the options.\n     */\n",
    "65588": "    /**\n     * Default implementation that loops through the supplied list of beans and\n     * calls {@link #convertBean(Object)}on each one of them.\n     * \n     * @param beans\n     *            list of beans of any kind.\n     * @return a new List containing the corresponding\n     *         <code>LabelValueBean</code> objects.\n     */\n",
    "65589": "    /**\n     * Iterate through the collection of <code>ChainedOption</code> objects and\n     * call <code>retrieveOptions</code> and <code>updateValue</code>. Put\n     * the option Lists in the map with keys retrieved from the ChainedOption\n     * objects.\n     * \n     * @param model\n     *            the map to store option Lists in.\n     * @param command\n     *            the command to operate on.\n     * @param context\n     *            the context.\n     */\n",
    "65590": "    /**\n     * Forward the call to the target <code>ChainedOption</code>.\n     * \n     * @param command\n     *            the <code>command</code> to operate on.\n     * @return the value returned from the target <code>ChainedOption</code>.\n     */\n",
    "65600": "    /**\n     * Default implementation of <code>updateValue</code>, which loops\n     * through the list of available options and compares them to the current\n     * value of the managed attribute in the <code>command</code> object.\n     * <p />\n     * If the selected value is present in the list, no modifications are done\n     * in the <code>command</code>, otherwise a default value is retrieved by\n     * calling {@link ChainedOptionStrategy#getDefaultValue(List, Object)}, and\n     * the <code>commandProperty</code> in the <code>command</code> is set\n     * to this value.\n     * \n     * @param command\n     *            the object which will possibly be updated with a new object.\n     * @param options\n     *            the list of options with which the managed value in the\n     *            <code>command</code> will be compared.\n     * @param context\n     *            a context that will be supplied to the\n     *            <code>ChainedOptionStrategy</code> for selecting an\n     *            appropriate default value.\n     * @see ChainedOptionStrategy#getDefaultValue(List, Object)\n     */\n",
    "65607": "    /**\n     * Utility method that matches the value of the given <code>bean</code>\n     * with the specified <code>value</code>.\n     * \n     * @param bean\n     *            The {@link LabelValueBean}to match the value against.\n     * @param value\n     *            The value to match.\n     * @return <code>true</code> if the values match.\n     */\n",
    "65615": "    /**\n     * Template method that subclasses may implement to ensure proper\n     * initialization. This method is called after all properties has been set.\n     */\n",
    "65625": "    /**\n     * Utility method that sets a named property on a given object.\n     * \n     * @param bean\n     *            The object to set the property on.\n     * @param propertyName\n     *            The name of the property to set.\n     * @param value\n     *            The value that the property will be set to.\n     */\n",
    "65640": "    /**\n     * Set the property on the target <code>command</code> object managed by\n     * this instance.\n     * \n     * @param commandProperty\n     *            The commandProperty to set.\n     */\n",
    "65653": "    /**\n     * Set the key that should identify the option list managed by this\n     * instance.\n     * \n     * @param optionsKey\n     *            The optionsKey to set.\n     */\n",
    "65665": "    /**\n     * Set the <code>BeanConverter</code> that should be used for translating\n     * to LabelValueBeans.\n     * \n     * @param converter\n     *            The converter to set.\n     */\n",
    "65667": "    /**\n     * Tests that matches is called with an object contained in the supplied\n     * list, and that when matches returns <code>true</code>, no\n     * modifications are made to the command.\n     */\n",
    "65674": "    /**\n     * Override this if the implementation has several strategies.\n     * \n     * @return this implementation returns the <code>defaultStrategy</code>.\n     */\n",
    "65683": "    /**\n     * Set the default strategy to use.\n     * \n     * @param defaultStrategy\n     *            the default strategy to set.\n     */\n",
    "65802": "    /**\n     * At startup create and show the main frame of the application.\n     */\n",
    "65803": "    /**\n     * This method is to initialize the specified window by injecting resources.\n     * Windows shown in our application come fully initialized from the GUI\n     * builder, so this additional configuration is not needed.\n     */\n",
    "65809": "    /**\n     * Returns project's database.\n     * @return The database of the project.\n     * @see com.jb.project.Database\n     */\n",
    "65811": "    /**\n     * Sets project's database.\n     * @param database The database of the project.\n     * @see com.jb.project.Database\n     */\n",
    "65812": "    /**\n     * Returns the table object (among the choosen tables) referenced by name.\n     * @param name The table name as a String.\n     * @return the table object, or null if no table named name is found in\n     * choosen tables list.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65813": "    /**\n     * There are the so called head-lines relationship.\n     * This can be used in code generation, as in JSF page generation.\n     * given a 1 to many relationship between two tables, instead of\n     * visually implement it by a menu (combo, etc) in the many side,\n     * This is meant to be visually represented by a set of data from\n     * a object (head) followed by a dataTable of objects (lines).\n     * @param table\n     * @return the table object (among choosen tables) with name equals\n     * to registered head for the HLS relationship. Returns null case\n     * thre is no head registered of if there is no table with the name.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65815": "    /**\n     * There are the so called head-lines relationship.\n     * This can be used in code generation, as in JSF page generation.\n     * given a 1 to many relationship between two tables, instead of\n     * visually implement it by a menu (combo, etc) in the many side,\n     * This is meant to be visually represented by a set of data from\n     * a object (head) followed by a dataTable of objects (lines).\n     * @param table\n     * @return the table object (among choosen tables) with name equals\n     * to registered lines for the HLS relationship. Returns null case\n     * there is no lines table registered of if there is no table\n     * with that name.\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65817": "    /**\n     * Returns the object table with name equals to the foreign table name\n     * registered in a table column object field fkTable.\n     * @param column the column object of the table that is a foreign key.\n     * @return the table object with name equals to the foreign table name,\n     * or null if not found among the choosen tables of the project database.\n     * @see com.jb.project.Column\n     * @see com.jb.project.Table\n     * @see com.jb.project.Database\n     */\n",
    "65844": "    /**\n     * Get the value of securityPath\n     *\n     * @return the value of securityPath\n     */\n",
    "65845": "    /**\n     * Set the value of securityPath\n     *\n     * @param securityPath new value of securityPath\n     */\n",
    "65874": "    /**\n     * Returns the area that is occupied by the given cell. Does not\n     * take into account any cell span.\n     * @param col\n     * @param row\n     * @return Rectangle\n     */\n",
    "65967": "    /**\n     * Get the value of tableName\n     *\n     * @return the value of tableName\n     */\n",
    "65968": "    /**\n     * Get the value of menuVJB\n     *\n     * @return the value of menuVJB\n     */\n",
    "65969": "    /**\n     * Set the value of tableName\n     *\n     * @param tableName new value of tableName\n     */\n",
    "65970": "    /**\n     * Set the value of menuVJB\n     *\n     * @param menuVJB new value of menuVJB\n     */\n",
    "65975": "    /**\n     * Get the value of titleOfMenuOfItemsVJB\n     *\n     * @return the value of titleOfMenuOfItemsVJB\n     */\n",
    "65977": "    /**\n     * Set the value of titleOfMenuOfItemsVJB\n     *\n     * @param titleOfMenuOfItemsVJB new value of titleOfMenuOfItemsVJB\n     */\n",
    "65978": "    /**\n     * Get the value of menuOfItemsSetted\n     *\n     * @return the value of menuOfItemsSetted\n     */\n",
    "65980": "    /**\n     * Set the value of menuOfItemsSetted\n     *\n     * @param menuOfItemsSetted new value of menuOfItemsSetted\n     */\n",
    "65981": "    /**\n     * Get the value of menuBarVJB\n     *\n     * @return the value of menuBarVJB\n     */\n",
    "65983": "    /**\n     * Set the value of menuBarVJB\n     *\n     * @param menuBarVJB new value of menuBarVJB\n     */\n",
    "65987": "    /**\n     * Get the value of addNewMenuBar\n     *\n     * @return the value of addNewMenuBar\n     */\n",
    "65990": "    /**\n     * Set the value of addNewMenuBar\n     *\n     * @param addNewMenuBar new value of addNewMenuBar\n     */\n",
    "66004": "    /**\n     * Get the value of selectedTable\n     *\n     * @return the value of selectedTable\n     */\n",
    "66005": "    /**\n     * Get the value of menuOfBarVJB\n     *\n     * @return the value of menuOfBarVJB\n     */\n",
    "66006": "    /**\n     * Set the value of selectedTable\n     *\n     * @param selectedTable new value of selectedTable\n     */\n",
    "66007": "    /**\n     * Set the value of menuOfBarVJB\n     *\n     * @param menuOfBarVJB new value of menuOfBarVJB\n     */\n",
    "66008": "    /**\n     * Get the value of targetClassSelected\n     *\n     * @return the value of targetClassSelected\n     */\n",
    "66010": "    /**\n     * Set the value of targetClassSelected\n     *\n     * @param targetClassSelected new value of targetClassSelected\n     */\n",
    "66022": "    /**\n     * Get the value of menuTitle\n     *\n     * @return the value of menuTitle\n     */\n",
    "66026": "    /**\n     * Set the value of menuTitle\n     *\n     * @param menuTitle new value of menuTitle\n     */\n",
    "66028": "    /**\n     * Get the value of menuVJBType\n     *\n     * @return the value of menuVJBType\n     */\n",
    "66030": "    /**\n     * Set the value of menuVJBType\n     *\n     * @param menuVJBType new value of menuVJBType\n     */\n",
    "66031": "    /**\n     * Get the value of createNewMenuBar\n     *\n     * @return the value of createNewMenuBar\n     */\n",
    "66032": "    /**\n     * Get the value of selected\n     *\n     * @return the value of selected\n     */\n",
    "66033": "    /**\n     * Set the value of createNewMenuBar\n     *\n     * @param createNewMenuBar new value of createNewMenuBar\n     */\n",
    "66035": "    /**\n     * Set the value of selected\n     *\n     * @param selected new value of selected\n     */\n",
    "66041": "    /**\n     * Get the value of menuBarVJBName\n     *\n     * @return the value of menuBarVJBName\n     */\n",
    "66042": "    /**\n     * Set the value of menuBarVJBName\n     *\n     * @param menuBarVJBName new value of menuBarVJBName\n     */\n",
    "66048": "    /**\n     * Set the value of menuItemVJBList\n     *\n     * @param menuItemVJBList new value of menuItemVJBList\n     */\n",
    "66053": "    /**\n     * Set the value of menuVJBList\n     *\n     * @param menuVJBList new value of menuVJBList\n     */\n",
    "66063": "    /**\n     * Set the value of menusBarVJB\n     *\n     * @param menusBarVJB new value of menusBarVJB\n     */\n",
    "66132": "    /** Convenience method to test whether drop location is valid\n    @param destination The destination path \n    @param dropper The path for the node to be dropped\n    @return null if no problems, otherwise an explanation\n     */\n",
    "66171": "    /**\n     * Redraws the the cells only in the given area.\n     * \n     * @param cellsToRedraw\n     *            Defines the area to redraw. The rectangles elements are not\n     *            pixels but cell numbers.\n     */\n",
    "66199": "    /**\n     * Call when a manual redraw on a cell should be performed.\n     * In case headers should be updated to reflect a focus change, this is performed.\n     * @param gc\n     * @param col\n     * @param row\n     */\n",
    "66227": "    /**\n     * Get the value of dateMask\n     *\n     * @return the value of dateMask\n     */\n",
    "66229": "    /**\n     * Set the value of dateMask\n     *\n     * @param dateMask new value of dateMask\n     */\n",
    "66231": "    /**\n     * Interface method to update the content of a cell.<p>\n     * Don't forget to map the row index if a sorted model is used.\n     * @param col The column index\n     * @param row The row index.\n     * @see KTableSortedModel#mapRowIndexToTable(int)\n     */\n",
    "66237": "    /**\n     * Get the value of selectedPanel\n     *\n     * @return the value of selectedPanel\n     */\n",
    "66238": "    /**\n     * Set the value of selectedPanel\n     *\n     * @param selectedPanel new value of selectedPanel\n     */\n",
    "66270": "    /**\n     * At startup create and show the main frame of the application.\n     */\n",
    "66273": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66284": "    /**\n     * Get the value of saveFired\n     *\n     * @return the value of saveFired\n     */\n",
    "66285": "    /**\n     * Set the value of saveFired\n     *\n     * @param saveFired new value of saveFired\n     */\n",
    "66286": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66288": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66297": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66300": "    /**\n     * Sets the default cursor to the given cursor. This instance is saved\n     * internally and displayed whenever no linecursor or resizecursor is shown.\n     * <p>\n     * The difference to setCursor is that this cursor will be preserved over\n     * action cursor changes.\n     * \n     * @param cursor\n     *            The cursor to use, or <code>null</code> if the OS default\n     *            cursor should be used.\n     * @param size_below_hotspot The number of pixels that are needed to paint the \n     * \t      cursor below and right of the cursor hotspot (that is the actual location the cursor\n     *        is pointing to).<p>\n     *        NOTE that this is just there to allow better positioning of tooltips.\n     * \t      Currently SWT does not provide an API to get the size of the cursor. So\n     *        these values are taken to calculate the position of the tooltip. The\n     *        the tooltip is placed pt.x pixels left and pt.y pixels below the mouse location.<br>\n     *        If you don't know the size of the cursor (for example you use a default one), set \n     *        <code>null</code> or <code>new Point(-1, -1)</code>. \n     */\n",
    "66305": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66306": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66323": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66324": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66330": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66341": "    /**\n     * Get the value of currentRecord\n     *\n     * @return the value of currentRecord\n     */\n",
    "66342": "    /**\n     * Set the value of currentRecord\n     *\n     * @param currentRecord new value of currentRecord\n     */\n",
    "66379": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66438": "    /**\n     * Check if any table row is selected.\n     *\n     * @return true if a row is selected, otherwise false.\n     */\n",
    "66452": "    /**\n     * Get the value of desconto\n     *\n     * @return the value of desconto\n     */\n",
    "66453": "    /**\n     * Set the value of desconto\n     *\n     * @param desconto new value of desconto\n     */\n",
    "66455": "    /**\n     * Get the value of diaria\n     *\n     * @return the value of diaria\n     */\n",
    "66456": "    /**\n     * Set the value of diaria\n     *\n     * @param diaria new value of diaria\n     */\n",
    "66459": "    /**\n     * Get the value of fim\n     *\n     * @return the value of fim\n     */\n",
    "66461": "    /**\n     * Set the value of fim\n     *\n     * @param fim new value of fim\n     */\n",
    "66462": "    /**\n     * Get the value of inicio\n     *\n     * @return the value of inicio\n     */\n",
    "66464": "    /**\n     * Set the value of inicio\n     *\n     * @param inicio new value of inicio\n     */\n",
    "66465": "    /**\n     * Get the value of animal\n     *\n     * @return the value of animal\n     */\n",
    "66467": "    /**\n     * Set the value of animal\n     *\n     * @param animal new value of animal\n     */\n",
    "66477": "    /**\n     * Checks for the event location in table coordinates within the region covered\n     * by the columns beginning by startCol and ending by endCol.\n     * @param span Set to true if for spanning cells we just want to have the left-upper-most cell.\n     */\n",
    "66478": "    /**\n     * Set the value of players\n     *\n     * @param players new value of players\n     */\n",
    "66535": "    /**\n     * Get the value of type\n     *\n     * @return the value of type\n     */\n",
    "66537": "    /**\n     * Set the value of type\n     *\n     * @param type new value of type\n     */\n",
    "66570": "    /**\n     * Get the value of playerName\n     *\n     * @return the value of playerName\n     */\n",
    "66571": "    /**\n     * Set the value of playerName\n     *\n     * @param playerName new value of playerName\n     */\n",
    "66572": "    /**\n     * Get the value of serverPort\n     *\n     * @return the value of serverPort\n     */\n",
    "66573": "    /**\n     * Set the value of serverPort\n     *\n     * @param serverPort new value of serverPort\n     */\n",
    "66575": "    /**\n     * Get the value of serverIP\n     *\n     * @return the value of serverIP\n     */\n",
    "66577": "    /**\n     * Set the value of serverIP\n     *\n     * @param serverIP new value of serverIP\n     */\n",
    "66585": "    /**\n     * Get the value of keyframeController\n     *\n     * @return the value of keyframeController\n     */\n",
    "66587": "    /**\n     * Set the value of keyframeController\n     *\n     * @param keyframeController new value of keyframeController\n     */\n",
    "66588": "    /**\n     * Get the value of node\n     *\n     * @return the value of node\n     */\n",
    "66590": "    /**\n     * Set the value of node\n     *\n     * @param node new value of node\n     */\n",
    "66607": "    /**\n     * Set the value of modelAnimationsList\n     *\n     * @param modelAnimationsList new value of modelAnimationsList\n     */\n",
    "66609": "    /**\n     * Get the value of baseAnimation\n     *\n     * @return the value of baseAnimation\n     */\n",
    "66611": "    /**\n     * Set the value of baseAnimation\n     *\n     * @param baseAnimation new value of baseAnimation\n     */\n",
    "66612": "    /**\n     * Get the value of runAnimation\n     *\n     * @return the value of runAnimation\n     */\n",
    "66614": "    /**\n     * Set the value of runAnimation\n     *\n     * @param runAnimation new value of runAnimation\n     */\n",
    "66632": "    /**\n     * create our custom input handler.\n     *\n     */\n",
    "66638": "    /**\n     * Get the value of beginFrame\n     *\n     * @return the value of beginFrame\n     */\n",
    "66639": "    /**\n     * Set the value of beginFrame\n     *\n     * @param beginFrame new value of beginFrame\n     */\n",
    "66640": "    /**\n     * Get the value of endFrame\n     *\n     * @return the value of endFrame\n     */\n",
    "66641": "    /**\n     * Set the value of endFrame\n     *\n     * @param endFrame new value of endFrame\n     */\n",
    "66642": "    /**\n     * Get the value of animating\n     *\n     * @return the value of animating\n     */\n",
    "66643": "    /**\n     * Set the value of animating\n     *\n     * @param animating new value of animating\n     */\n",
    "66644": "    /**\n     * Set the value of keys\n     *\n     * @param keys new value of keys\n     */\n",
    "66647": "    /**\n     * True if the text is to be displayed during rendering.\n     *\n     * @return True if the text should be displayed.\n     */\n",
    "66649": "    /**\n     * Sets whether we should cull the text during rendering.\n     *\n     * @param enabled True if the text should be displayed.\n     */\n",
    "66650": "    /**\n     * Sets the colour of the text.\n     *\n     * @param color The colour of the text.\n     */\n",
    "66651": "    /**\n     * Sets the offset from the target to display text at.\n     *\n     * @param offset The offset from the target to display text.\n     */\n",
    "66652": "    /**\n     * Sets the text to display.\n     *\n     * @param text The text string to display.\n     */\n",
    "66656": "    /**\n     * Sets the horizontal alignment of text to the target.\n     *\n     * @param align The horizontal alignment of text.\n     */\n",
    "66658": "    /**\n     * Sets the vertical alignment of text to the target.\n     *\n     * @param valign The vertical alignment of text.\n     */\n",
    "66661": "    /**\n     * Get the value of editorOutcomeSave\n     *\n     * @return the value of editorOutcomeSave\n     */\n",
    "66663": "    /**\n     * Set the value of editorOutcomeSave\n     *\n     * @param editorOutcomeSave new value of editorOutcomeSave\n     */\n",
    "66720": "    /**\n     * Sets the global tooltip for the whole table.<br>\n     * Note that this is only shown if the cell has no tooltip set.\n     * For tooltips on cell level (that overwrite this value), look\n     * for the method <code>getTooltipText()</code>.\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     * @see de.kupzog.ktable.KTable#getToolTipText()\n     * @param tooltip The global tooltip for the table.\n     */\n",
    "66734": "    /**\n     * Returns the global tooltip for the whole table.<br>\n     * Note that this is not shown when there is a non-empty tooltip\n     * for the cell.\n     * @see de.kupzog.ktable.KTable#setToolTipText(String)\n     * @see de.kupzog.ktable.KTableModel#getTooltipAt(int, int)\n     */\n",
    "66811": "    /**\n     * This method activated the cell editor on the current focus cell, if the\n     * table model allows cell editing for this cell.\n     */\n",
    "66843": "    /**\n     * Scrolls the table so that the given cell is top left.\n     * @param col The column index.\n     * @param row The row index.\n     */\n",
    "66897": "    /**\n     * Adds a listener that is notified when a cell is selected.\n     * \n     * This can happen either by a click on the cell or by arrow keys. Note that\n     * the listener is not called for each cell that the user selects in one\n     * action using Shift+Click. To get all these cells use the listener and\n     * getCellSelecion() or getRowSelection().\n     * \n     * @param listener\n     */\n",
    "66909": "    /**\n     * Adds a listener that is notified when a cell is resized.\n     * This happens when the mouse button is released after a resizing.\n     * @param listener\n     */\n",
    "66949": "    /**\n     * Adds a listener that is notified when a cell is doubleClicked.\n     *\n     * @param listener\n     */\n",
    "66967": "    /**\n     * Removes the listener if present. \n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "66991": "    /**\n     * Removes the listener if present. \n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "67028": "    /**\n     * Removes the listener if present.\n     * Returns true, if found and removed from the list of listeners.\n     */\n",
    "67038": "  /** first record is 1 */\n",
    "67043": "  /** First column is 1 */\n",
    "67044": "    /**\n     * Returns true if in \"Full Selection Mode\". \n     * Mode is determined by style bits in the constructor or \n     * by <code>setStyle()</code>. (style: SWT.FULL_SELECTION)\n     * @return boolean\n     */\n",
    "67056": "    /**\n     * Returns true if in \"Multi Selection Mode\".\n     * Mode is determined by style bits in the constructor (SWT.MULTI)\n     * or by <code>getStyle()</code>.\n     */\n",
    "67066": "  /** there is no way to know if numeric cells with generic format\n   * are reals or integers... this method returns true if the first\n   * 100 rows do not include reals (or dates) */ \n",
    "67081": "  /** Parse next element.\n   * @return the element read, null otherwise\n   */\n",
    "67085": "  /** Initialise parser and loads document header */\n",
    "67140": "  /** In a string context, a TableResults returns the first\n   * column of the first row of its first result */\n",
    "67178": "  /** needed by TableResult.setPrimaryKeys \n   * @return index of label column in table */\n",
    "67180": "    /**\n     * Clears the current selection (in all selection modes).\n     */\n",
    "67193": "    /**\n     * Works in both modes: Cell and Row Selection.\n     * Has no redraw functionality!<p>\n     * \n     * Returns true, if added to selection.\n     */\n",
    "67203": "    /**\n     * Works in both modes: Cell and Row Selection.\n     * Has no redraw functionality!\n     */\n",
    "67213": "    /**\n     * Selects the given cell. If scroll is true, \n     * it scrolls to show this cell if neccessary.\n     * In Row Selection Mode, the given row is selected\n     * and a scroll to the given column is done.\n     * Does nothing if the cell does not exist. <p>\n     * Note that if you use a sorted model, don't forget to map the row index!\n     * @param col\n     * @param row\n     * @param scroll\n     */\n",
    "67216": "  /** needed by TableResult.setPrimaryKeys */\n",
    "67233": "    /**\n     * Returns true, if the given cell is selected.\n     * Works also in Row Selection Mode.\n     * @param col the column index.\n     * @param row the row index.\n     * @return boolean Returns true if the given cell is selected.\n     */\n",
    "67241": "    /**\n     * Returns true, if the given row is selected.\n     * Returns always false if not in Row Selection Mode!<p>\n     * If you use a sorted model, don't forget to map the row index first.\n     * @param row The row index as seen by the KTable.\n     * @return boolean returns true if the row is selected at the moment.\n     */\n",
    "67255": "  /** Access an object's field */\n",
    "67321": "    /**\n     * Internal helper method to determine wether the cell at the \n     * given position is to be highlighted because it is a header cell\n     * that corresponds to a selected cell.\n     * @param col The column index\n     * @param row The row index\n     * @return true if the cell should be highlighted.\n     */\n",
    "67364": "    /**\n     * Sets the table model.\n     * The table model provides data to the table.\n     * @see de.kupzog.ktable.KTableModel for more information.\n     * @param model The KTableModel instance that provides the table with all \n     * necessary data!\n     */\n",
    "67396": "    /**\n     * returns the current table model\n     * @return KTableModel \n     */\n",
    "67402": "  /** general typecast method */\n",
    "67404": "  /** return the object class; some scalars return the \n   * primitive class (eg Integer.TYPE, rather than Integer.getClass() */\n",
    "67405": "  /** Access an object's field */\n",
    "67409": "  /** Subclasses may override this method to add their own fields */\n",
    "67432": "  /** Access an object's field */\n",
    "67441": "    /**\n     * Helper method to quickly get the number of fixed columns.\n     * @return\n     */\n",
    "67494": "  /** This class can't reset its position, but subclasses may */\n",
    "67526": "    /**\n     * Helper method to quickly get the number of fixed rows.\n     * @return\n     */\n",
    "67554": "  /** Creates highlights around all occurrences of pattern in textComp \n   * code inspired from The Java Developers Almanac 1.4 */\n",
    "67555": "  /** Removes only our private highlights \n   * code inspired from The Java Developers Almanac 1.4 */\n",
    "67572": "  /** checks if file needs to be saved and aborts if user\n   * asks to save it and then cancels */\n",
    "67606": "  /** If invoked through a {@link net.sourceforge.dsql.gui.DSQLInterface}, \n   * add this value in a tab */\n",
    "67639": "  /** Add an entry in the connection vector and returns the connection object \n  */\n",
    "67646": "  /**\n   * Instruct the thread to stop masking.\n   */\n",
    "67647": "    /**\n     * Returns true, if at least one of the two enumerations has more\n     * elements.\n     */\n",
    "67648": "    /**\n     * Returns the next element.  This returns the next element of the\n     * first enumeration, if it has more elements, otherwise the next\n     * element of the second enumeration.\n     */\n",
    "67669": "  /** operators priority: * /, + - ||, = lt gt, AND OR */\n",
    "67718": "  /** Adds a variable to the current context */\n",
    "67719": "  /** Sets a variable: in the closest context if it exists, or adds\n   * otherwise */\n",
    "67810": "  /** This returns only the static text; to evaluate\n   * DSQL code or variables, call executeXML().getXMLText() */\n",
    "67862": "  /** called by EditArea */\n",
    "67892": "  /** Execute a Node\n   * @throws ExecuteException If an error occurs during execution,\n   * the exception is set with this Node so that a line number\n   * can be displayed along with the error message\n   */\n",
    "67954": "  /** This object is always the result of an execution; so do nothing... */\n",
    "68115": "   /**\n    * Searches dataset for an identical food. \n    * @param f a food to search for\n    * @return the identical food if found\n    */\n",
    "68207": "   /**\n    * Cap the string at a max length,\n    * @return\n    */\n",
    "68213": "   /**\n    * Creates the pre-defined biomarkers and flushes to disk\n    */\n",
    "68215": "   /**\n    * Creates a dataset, consisting of two series of monthly data.\n    *\n    * @return The dataset.\n    */\n",
    "68229": "   /**\n    * Compares two metrics by date for sorting.\n    */\n",
    "68297": "   /**\n    * Add the nutrients in the given table to our total\n    * \n    * @param toAdd\n    *            the nutrients ratios to add\n    * @param weight\n    *            multiplier for the amount in the added nutrients\n    */\n",
    "68319": "    /**\n     * Update the existing food information\n     */\n",
    "68342": "   /**\n    * Find a matching measure by name in this food\n    * \n    * @param measureName\n    */\n",
    "68372": "   /**\n    * Get a textual description of the food.\n    * \n    * @return this Food's description.\n    */\n",
    "68373": "   /**\n    * Set the measure to display weights for a particular food.\n    */\n",
    "68375": "   /**\n    * Update this Food's description.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param text The new description.\n    */\n",
    "68376": "   /**\n    * Set the weight to display\n    * @param w the type of measure\n    * @param mult the multiplier for that measure\n    */\n",
    "68377": "   /**\n    * Retrieve a List of <code>Measure</code>s for this Food.\n    * \n    * @return all <code>Measure</code>s associated with this Food.\n    public */\n",
    "68378": "   /**\n    * Update the widget after a weight change has occurred.\n    * Called when weight menu is changed or edited\n    */\n",
    "68380": "   /**\n    * Get the multiplier for the current weight and mult settings.\n    * @return a multiple of the standard nutrient value (x per 100g)\n    */\n",
    "68381": "   /**\n    * Replace the list of <code>Measure</code>s for this food.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param measures A list of <code>Measure</code> objects that will completely\n    * replace the ones currently in existence for this <code>Food</code>.\n    */\n",
    "68382": "   /**\n    * Get the number of grams in this measure\n    * @return the number of grams in this state\n    */\n",
    "68383": "   /**\n    * See if the food has a value set for the given nutrient\n    * \n    * @param ni the <code>NutrientInfo</code> to look up.\n    * @return true if a value exists in this food\n    */\n",
    "68386": "   /**\n    * Get the amount of a nutrient provided by this Food.\n    * \n    * @param ni the <code>NutrientInfo</code> to look up.\n    * @return the amount of the requested nutrient per unit.\n    */\n",
    "68388": "   /**\n    * Set the amount of a nutrient provided by this Food.  The <code>Food</code> \n    * implementation must be associated with a writeable datasource.\n    * \n    * @param ni the Nutrient to modify.\n    * @param val the amount of the Nutrient per unit.\n    */\n",
    "68401": "   /**\n    * Add a list of servings to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "68402": "   /**\n    * Called if the weight menu state is changed\n    */\n",
    "68403": "   /**\n    * Called when the text field is set\n    */\n",
    "68410": "   /**\n    * Retrieve a key for this food uniquely identifying both its datasource\n    * and its own unique ID in the DS.  The general contract of this method is that\n    * if f1.getSourceUID().equals(f2.getSourceUID()) then f1 and f2 both come from\n    * the same DS, and refer to the same item in that DS.\n    * @return A UID for this food.\n    */\n",
    "68411": "   /**\n    * Called when the text field is edited\n    */\n",
    "68413": "   /**\n    * Directly set the sourceUID of a food to that of another one.\n    * @param uid The <code>Food</code> whose sourceUID will be used.\n    */\n",
    "68415": "   /**\n    * If linked, changing a weight will update the multiplier\n    * to keep the grams constant. Otherwise, the multiplier is left unchanged.\n    * \n    * @return true if the multiplier is linked to the weight\n    */\n",
    "68416": "   /**\n    * Set the comment on this food.  <code>null</code> values will result in the comment being set\n    * to the empty string.\n    * \n    * @param comment The comment.\n    */\n",
    "68418": "   /**\n    * If linked, changing a weight will update the multiplier\n    * to keep the grams constant. Otherwise, the multiplier \n    * is left unchanged.\n    */\n",
    "68419": "   /**\n    * Get the commment on this food.  This value is guaranteed not to be <code>null</code>.\n    * \n    * @return the comment.\n    */\n",
    "68433": "   /**\n    * See if the food data is identical \n    * \n    * @param f to compare against\n    * @return true if the two foods contain the same food data (description, nutrients, and measures)\n    */\n",
    "68453": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "68457": "   /**\n    * Set the comboBox table cell editor to the currently\n    * selected measure list\n    * @param serving the selected serving\n    */\n",
    "68461": "   /**\n    * Copy changes to original and save.\n    */\n",
    "68472": "    /**\n     * Get the standard amount of this measure. Example: 1.0 Servings, 0.5 Cups,\n     * 2.0 Tablespoons\n     * \n     * @return the multiplier for this measure\n     */\n",
    "68474": "    /**\n     * Set the standard amount of this measure\n     * \n     * @param amount\n     *            a multiplier\n     */\n",
    "68477": "    /**\n     * Set the english name of this measure type\n     */\n",
    "68478": "    /**\n     * Get the number of grams in this measure\n     * \n     * @return the number of grams in the measure\n     */\n",
    "68480": "    /**\n     * Set the number of grams in this measure\n     */\n",
    "68523": "   /**\n    * Does a very simple print-out of the recipe.\n    */\n",
    "68552": "   /**\n    * Walk through all of the servings and tally up the \n    * nutrient values for the entire meal.\n    */\n",
    "68556": "   /**\n    * Get the nutrient amount by walking through all of the servings\n    * and calculating the total amount.\n    */\n",
    "68563": "   /**\n    * Copy changes to original and save.\n    */\n",
    "68564": "   /**\n    * Check if the data available for this nutrient is generally incomplete.\n    */\n",
    "68601": "   /**\n    * Get the last user that used CRON-o-meter.\n    */\n",
    "68615": "   /**\n    * Add a new user to Cronometer via the UI.\n    * @param parentWindow allow a popup to set the user settings\n    * @return the user that was just added.\n    */\n",
    "68621": "   /**\n    * Add a new user to Cronometer\n    * @param user the user to add.\n    */\n",
    "68626": "   /**\n    * Find the User with the given username\n    * @param username the name of the user\n    * @return User the Object that relates to the given name.  Null if the User is not found.\n    */\n",
    "68631": "   /**\n    * Delete a user from Cronometer.\n    * @param user the user Object to delete.\n    */\n",
    "68635": "   /**\n    * Delete all the settings file related to this user.\n    * @param user\n    */\n",
    "68641": "   /**\n    * Delete the user with the given <code>username</code>\n    * @param username the name of the user\n    * @return true if the delete was succesful\n    */\n",
    "68649": "   /**\n    * Search for a user and set that user as the current user.  \n    * @param username the name of the user\n    * @return true if the operation was successful\n    */\n",
    "68660": "   /**\n    * A rough estimate of the user's age, close enough for our purposes.\n    */\n",
    "68746": "   /** \n    * Delete the user selected in the userListModel\n    * @param row the row item to delete\n    */\n",
    "68754": "   /**\n    * Select the default user in the list. This is not the current user.\n    */\n",
    "68759": "   /**\n    * Select the current user in the list.\n    *\n    */\n",
    "68774": "   /**\n    * Look through all nutrients and see what overall percentage of the targets\n    * are completed.\n    */\n",
    "68851": "   /**\n    * Initialise the User specific data sources.\n    */\n",
    "68906": "   /**\n    * Ensure all data is saved to backing stores.\n    */\n",
    "68918": "   /**\n    * Look through all nutrients and see what overall percentage of the targets\n    * are completed.\n    */\n",
    "69072": "   /** \n    * Invoked when the text area loses the keyboard focus.\n    * This will not be invoked when the user clicks on the next/previous day button.\n    */\n",
    "69106": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69119": "   /**\n    * Depending on the selected source, a different database will be searched\n    */\n",
    "69156": "   /**\n    * Show window normally\n    */\n",
    "69168": "   /**\n    * Set the current date to today\n    */\n",
    "69174": "   /**\n    * Copies the foods from the previous day into this day.\n    */\n",
    "69192": "      /**\n       * Allows custom rendering for a row and column. Can just return c, if no\n       * changes to default are desired.\n       * @param c the component used for rendering the cell\n       * @param row the row to render\n       * @param col the column to render\n       * @return a custom rendering component\n       */\n",
    "69198": "   /**\n    * Update the existing food information\n    */\n",
    "69207": "   /**\n    * Add a list of servings to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "69234": "   /**\n    * Set the current date being displayed by this daily summary\n    */\n",
    "69318": "   /** \n    * Reload the history file.\n    *\n    */\n",
    "69347": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69454": "   /**\n    * Add a list of entries to the daily listing\n    * Ugly because this table and model listens to the parent, which is \n    * backwards from normal patterns...\n    * @param list\n    */\n",
    "69485": "    /**\n     * Removes the specified component from the layout.\n     * @param comp the component to be removed\n     */\n",
    "69504": "    /** \n     * Calculates the minimum size dimensions for the specified \n     * panel given the components in the specified parent container.\n     * @param parent the component to be laid out\n     * @see #preferredLayoutSize\n     */\n",
    "69515": "    /**\n     * Adds the specified component to the layout, using the specified\n     * constraint object.\n     * @param comp the component to be added\n     * @param constraints  where/how the component is added to the layout.\n     */\n",
    "69519": "    /** \n     * Returns the maximum size of this component.\n     * @see java.awt.Component#getMinimumSize()\n     * @see java.awt.Component#getPreferredSize()\n     * @see LayoutManager\n     */\n",
    "69523": "    /**\n     * Returns the alignment along the x axis.  This specifies how\n     * the component would like to be aligned relative to other \n     * components.  The value should be a number between 0 and 1\n     * where 0 represents alignment along the origin, 1 is aligned\n     * the furthest away from the origin, 0.5 is centered, etc.\n     */\n",
    "69527": "    /**\n     * Returns the alignment along the y axis.  This specifies how\n     * the component would like to be aligned relative to other \n     * components.  The value should be a number between 0 and 1\n     * where 0 represents alignment along the origin, 1 is aligned\n     * the furthest away from the origin, 0.5 is centered, etc.\n     */\n",
    "69530": "    /**\n     * Invalidates the layout, indicating that if the layout manager\n     * has cached information it should be discarded.\n     */\n",
    "69551": "   /**\n    * Allows custom rendering for a row and column. Can just return c, if no\n    * changes to default are desired.\n    * @param c the component used for rendering the cell\n    * @param row the row to render\n    * @param col the column to render\n    * @return a custom rendering component\n    */\n",
    "69578": "   /**\n    * Show window normally\n    */\n",
    "69601": "   /**\n    * Set to launch hyperlinks in external system browser, or in internal\n    * window instead.\n    * \n    * @param val true if external browser should load links.\n    */\n",
    "69606": "   /**\n    * Create a new instance of a class in this jar file.\n    * Must have a basic constructor with no arguments.\n    * \n    * @param name the class name to instantiate\n    * \n    * @return an Object created from the given class\n    */\n",
    "69631": "   /**\n    * Get a count of the bytes read by this stream.\n    * @return the number of bytes read by this stream.\n    */\n",
    "69634": "   /**\n    * Returns the key of the setting that was changed.\n    *\n    * @return  The key of the setting that was changed.\n    */\n",
    "69636": "   /**\n    * Returns the new value for the setting.\n    *\n    * @return  The new value for the setting, or <tt>null</tt> if the\n    *          setting was removed.\n    */\n",
    "69659": "   /**\n    * Retrieve the <code>cols</code> from the <code>SQLInsert</code>\n    * @return Returns the cols.\n    */\n",
    "69660": "    /**\n     * Added a WHERE constraint to the SELECT command.\n     * \n     * @param name\n     *            the field to constrain\n     * @param val\n     *            the value this field must equal as a constraint\n     */\n",
    "69676": "    /**\n     * Added a WHERE constraint to the SELECT command.\n     * \n     * @param name\n     *            the field to constrain\n     * @param val\n     *            the value this field must be like\n     */\n",
    "69689": "    /**\n     * Add an item to select\n     * \n     * @param field\n     *            a valid SQL selection item\n     */\n",
    "69692": "    /**\n     * Execute the query and return the results.\n     */\n",
    "69695": "   /**\n    * Set if this will format output with newlines or not\n    */\n",
    "69701": "   /**\n    * Generate the SQL string for an UPDATE command.\n    */\n",
    "69706": "   /**\n    * Generate the SQL string for an DELETE command.\n    */\n",
    "69730": "   /**\n    * Sets the horizontal gap between components.\n    */\n",
    "69735": "   /**\n    * Gets the vertical gap between components.\n    */\n",
    "69757": "   /**\n    * Sets the vertical gap between components.\n    */\n",
    "69767": "   /**\n    * Removes the specified component from the layout. Not used by\n    * this class.\n    * @param comp the component to remove\n    * @see       java.awt.Container#removeAll\n    */\n",
    "69866": "    /**\n     * Setting an endpoint from the outside is only meaningful for unit tests.\n     *\n     * @param endPoint An endpoint\n     * @return This distributor\n     */\n",
    "70192": "    /** Remove all nodes except the root node. */\n",
    "70311": "    /** Remove the currently selected node. */\n",
    "70455": "    /** Add child to the currently selected node. */\n",
    "70493": "    /**\n     * This method is only useful for unit testing.\n     *\n     * @param tickTock A time abstraction\n     * @return A deadline\n     */\n",
    "70817": "    /**\n     * Return an approximation of this interval, using an optional, preferred unit.\n     * For instance, 42,345,543 microseconds will approximate to 42,345 milliseconds,\n     * if {@link java.util.concurrent.TimeUnit#MILLISECONDS} is used.\n     *\n     * @param unit A unit\n     * @return Approximation using that unit\n     */\n",
    "70823": "    /**\n     * Returns a readable approximation of this time span.  For instance, instead of being\n     * billions of nanoseconds, it will be a number of seconds.  Example: 42,345,543 microseconds\n     * will approximate to 42 seconds.  In other words, it will gravitate towards a unit\n     * that makes it more approximate, but suits the size of the time span.\n     *\n     * @return Approximate time span\n     */\n",
    "70872": "    /**\n     * True iff the result is wrapped, in a {@link Holder}.\n     */\n",
    "70880": "    /**\n     * The toString of the value.\n     */\n",
    "70884": "    /**\n     * The holder object if wrapped, otherwise the object itself.\n     */\n",
    "70888": "    /**\n     * The class object of the result.  Will not be serialized.\n     */\n",
    "70892": "    /**\n     * The name of the class of the result.\n     */\n",
    "70898": "    /**\n     * True iff the result was a primitive value.\n     */\n",
    "70902": "    /**\n     * The throwable of a failed result.  Will not be serialized.\n     */\n",
    "70909": "    /**\n     * Returns the string value of this tree node\n     */\n",
    "70916": "    /**\n     * The time taken to evaluate the result, in milliseconds.\n     */\n",
    "70922": "    /**\n     * True iff the result was not a failure.\n     */\n",
    "71014": "    /**\n     * Returns the string value of the content\n     *\n     */\n",
    "71023": "    /**\n     * Evaluates the content of this leaf in the given environment.  Iff\n     * content is a symbol, look it up in the context\n     *\n     * @param context The context to evaluate in\n     * @return The value of the content\n     * @exception EvaluationException Thrown iff something bad happens\n     */\n",
    "71705": "    /**\n     * Adds nodes for the declared (if known) and actual (if not null) class\n     */\n",
    "71708": "    /**\n     * Adds nodes for each field of each (super)class\n     */\n",
    "72000": "    /**\n     * Test of the mod method.\n     */\n",
    "72003": "    /**\n     * Test of the mul method.\n     */\n",
    "72005": "    /**\n     * Test of the div method.\n     */\n",
    "72007": "    /**\n     * Test of the sub method.\n     */\n",
    "72010": "    /**\n     * Test of the add method.\n     */\n",
    "72016": "    /**\n     * Set up common stuff for all test methods.\n     * This method is called immediately before each test method is called\n     */\n",
    "72020": "    /**\n     * Tear down common stuff for all test methods.\n     * This method is called immediately after each test method is called\n     */\n",
    "72294": "\t/**\n\t * Populate the entry fields with the values stored in the editDVD\n\t */\n",
    "72310": "\t/**\n\t * Store the entered information into the editDVD object\n\t *\n\t * @throws RuntimeException If there is invalid data.\n\t */\n",
    "72311": "\t/**\n\t * This method is called to determine the rendered that will be used\n\t * for each column.  If the column doesn't have data in it yet this\n\t * function will fall back on the String's render so the table will not\n\t * have an exception.\n\t */\n",
    "72313": "\t/**\n\t * Sets the data to be displayed in the table\n\t *\n\t * @param v the data to be displayed in the table\n\t */\n",
    "72323": "\t/**\n\t * Create the Save, Cancel, Previous, and Next buttons and adds them\n\t * to a pane using the flow layout.\n\t *\n\t * @return pane containing the buttons\n\t */\n",
    "72324": "\t/**\n\t *  This method should be called wehn a user wants the image\n\t *\n\t * @return    The poster which is an ImageIcon \n\t */\n",
    "72326": "\t/**\n\t *  This is called when the new thread starts to run.\n\t */\n",
    "72330": "\t/**\n\t *  Sets the title attribute of the ImdbInfo object\n\t *\n\t * @param  title  The new title value\n\t */\n",
    "72340": "\t/**\n\t *  As seen below. Makes a CardLayout and the diffrent cards are added.\n\t *\n\t * @return    the pane that holds the components\n\t */\n",
    "72341": "\t/**\n\t *  Gets the director attribute of the imdbInfo object\n\t *\n\t * @return    The director value\n\t */\n",
    "72342": "\t/**\n\t *  Card nr 1. This card is for entering the movie to search for.\n\t *\n\t * @return    a JPanel which will be card nr 1\n\t */\n",
    "72345": "\t/**\n\t *  Gets the genre attribute of the imdbInfo object\n\t *\n\t * @return    The genre value\n\t */\n",
    "72350": "\t/**\n\t *  Gets the tagline attribute of the imdbInfo object\n\t *\n\t * @return    The tagline value\n\t */\n",
    "72354": "\t/**\n\t *  Gets the plot attribute of the imdbInfo object\n\t *\n\t * @return    The plot value\n\t */\n",
    "72360": "\t/**\n\t *  Gets the rating attribute of the imdbInfo object\n\t *\n\t * @return    The rating value\n\t */\n",
    "72365": "\t/**\n\t * This method is called to determine the rendered that will be used\n\t * for each column.  If the column doesn't have data in it yet this\n\t * function will fall back on the String's render so the table will not\n\t * have an exception.\n\t */\n",
    "72366": "\t/**\n\t *  Gets the posterUrl attribute of the imdbInfo object\n\t *\n\t * @return    The posterUrl value\n\t */\n",
    "72367": "\t/**\n\t * Sets the data to be displayed in the table\n\t *\n\t * @param v the data to be displayed in the table\n\t */\n",
    "72369": "    /**\n     * Add the ability to sort by column to a table.\n     *\n     * @param table the table to add the MouseListeners\n     */\n",
    "72371": "\t/**\n\t *  Gets the address attribute of the ImdbInfo object\n\t *\n\t * @return    The address value\n\t */\n",
    "72385": "    /**\n     * Compares two object arrays at column <i>col</i>.\n     *\n     * @param o1 first array\n     * @param o2 second array\n     *\n     * @return the result of the string comparison\n     *\n     * @throws ClassCastException if either o1 or o2 are not object arrays (Object[])\n     */\n",
    "72387": "    /**\n     * Compares this comparator with another comparator\n     *\n     * @returns true if column numbers are equal, false otherwise\n     */\n",
    "72389": "\t/**\n\t *  Creates the buttons at the buttom.\n\t *\n\t * @return    a JPanel with buttons\n\t */\n",
    "72390": "    /**\n     * Inserts an element to the list in sorted order.\n     *\n     * @param o the object to insert\n     *\n     * @return true if inserted, false if insertion failed\n     *\n     * @throws ClassCastException if any non-Object array is encountered\n     */\n",
    "72391": "    /**\n     * Sorts a column or toggles sort direction.\n     *\n     * @param col the column number to sort by\n     *\n     * @throws ClassCastException if any non-Object array is encountered\n     * @throws ArrayIndexOutOfBoundsException if (col < 0 || col > number_of_columns)\n     */\n",
    "72393": "    /**\n     * Reverses the direction of the array.\n     */\n",
    "72397": "\t/**\n\t * Create a FlowLayout pane to hold the new, edit, and delete buttons.\n\t * @return a pane containing the buttons\n\t */\n",
    "72402": "\t/**\n\t * Create a table for the DVDs with single selection mode so only one\n\t * DVD can be selected at a time.\n\t *\n\t * @return a table\n\t */\n",
    "72404": "\t/**\n\t * Converts a vector of DVDs into a vector of arrays for the table\n\t *\n\t * @param v Vector of DVDs\n\t */\n",
    "72407": "\t/**\n\t * Enable the edit and delete buttons.  This is called when a row on the\n\t * table is selected.\n\t */\n",
    "72410": "\t/**\n\t * This method keeps track of which row in the table is selected.\n\t */\n",
    "72413": "\t/**\n\t * Disable the edit and delete buttons.  This is called when a row on the\n\t * table is not selected.\n\t */\n",
    "72414": "\t/**\n\t *  Set if the Type should be permanent. For now there is no restricion\n\t *  just a boolean holder.\n\t */\n",
    "72419": "\t/**\n\t *  For each field that is created a type is saved in a Vector. The purpose \n\t *  is to avoid the user to reAdd a new type every time he/she adds a DVD.\n\t *  This method is called every time a change in the type String is made.\n\t */\n",
    "72420": "\t/**\n\t * This method will open the edit window when an item is double\n\t * clicked on the table.\n\t */\n",
    "72427": "\t/**\n\t *  This message is called when the fetching of data is done.\n\t */\n",
    "72436": "\t/**\n\t *  Compares two DVDs based on their titles.\n\t *\n\t * @param  o  Description of the Parameter\n\t * @return    a negative integer, zero, or a positive integer as this DVD title\n\t *      is less than, equal to, or greater than the specified DVD title; zero\n\t *      if the provided object is not a DVD object.\n\t */\n",
    "72442": "\t/**\n\t *  If the data is from imdb.com\n\t *\n\t * @param  wiz  The new fromWizard value\n\t */\n",
    "72448": "\t/**\n\t *  Return true if the data is from imdb.com\n\t *\n\t * @return    The fromImdb value\n\t */\n",
    "72463": "\t/**\n\t * This method will be called from the edit window once it is closed. It\n\t * will allow the user to use the main window.\n\t */\n",
    "72471": "\t/**\n\t * Sort the DVD collection and update the table data\n\t */\n",
    "72479": "\t/**\n\t * Add a DVD to the collection.  This method is called by the edit window\n\t * when a new DVD is saved.\n\t * @param d DVD to add to the collection\n\t */\n",
    "72487": "\t/**\n\t * This method informs the edit window if there is a DVD after the\n\t * one currently being edited.\n\t *\n\t * @return true or false if there is a DVD after the currectly selected one\n\t */\n",
    "72498": "\t/**\n\t * This method informs the edit window if there is a DVD before the\n\t * one currently being edited.\n\t *\n\t * @return true or false if there is a DVD before the currectly selected one\n\t */\n",
    "72555": "    /**\n     * decrease the intensity value in all scopes.\n     */\n",
    "72562": "    /**\n     * \"poke\" a channel, causing it's intensity value to be set to the max.\n     * @param channel\n     */\n",
    "72565": "    /**\n     * get the character representing the current intencity value of a channel.\n     * @param channel\n     * @return\n     */\n",
    "72570": "    /**\n     * get a string representation of the scopes.\n     * @return\n     */\n",
    "72667": "    /**\n     * get the value of the initial relative volume of a track.\n     * @param track\n     * @return\n     */\n",
    "72680": "    /**\n     * utility method for finding the number of tracks (channels) in the module. Note that this\n     * isn't reliable if you've managed to construct a module that has a different number of\n     * tracks per pattern. That's pretty unlikely though... It also doesn't work unless you\n     * have atleast one pattern.\n     * @return\n     */\n",
    "72830": "    /**\n     * loads a list from a LineNumberReader. Each line contains the name of a module.\n     *\n     * @param lnr\n     * @throws IOException\n     */\n",
    "72842": "    /**\n     * removes the current module from the playlist\n     */\n",
    "72849": "    /**\n     * create a player thread for playing the\n     * @param module\n     * @return\n     */\n",
    "72852": "    /**\n     * load the <code>nextModule</code>'th file in the file list.\n     * @param nextModule\n     * @return\n     */\n",
    "72854": "    /**\n     * create a player thread for playing the\n     * @param module\n     * @return\n     */\n",
    "72869": "        /**\n         * make the player thread die as soon as possible.\n         */\n",
    "72871": "    /**\n     * tell the playlist to save itself to the current playlist file\n     * @throws IOException\n     */\n",
    "72996": "    /**\n     * start playing the module\n     */\n",
    "72998": "    /**\n     * stop playing the module and the player thread\n     */\n",
    "73002": "    /**\n     * check if the player thread is still running\n     * @return\n     */\n",
    "73003": "    /**\n     * pause the player thread\n     * @param pause\n     */\n",
    "73007": "    /**\n     * check if the module is paused\n     * @return\n     */\n",
    "73009": "    /**\n     * check if an error has occured while playing\n     * @return\n     */\n",
    "73012": "    /**\n     * if an error occured while playing, use this to get the error cause\n     * @return\n     */\n",
    "73085": "        /**\n         * sets if this track should be muted\n         *\n         * @param mute if true: mute, if false: unmute\n         */\n",
    "73130": "    /**\n     * initialize the player\n     *\n     * @param output\n     * @return true if initialization was successful\n     */\n",
    "73132": "    /**\n     * Load a module from a file\n     *\n     * @param fileName the file name of the module\n     * @return true if loading was successful, false else\n     */\n",
    "73133": "    /**\n     * Load a module\n     * @param module the module to load\n     * @return true if loading was successful, false else\n     */\n",
    "73135": "    /**\n     * play a tick of the the module\n     *\n     * @return true if the module is still playing, false if the module is finished.\n     */\n",
    "73140": "    /**\n     * get the state of the module. The ModuleState can be used for\n     * finding information about the playing module and for manipulating how the\n     * module should be played\n     *\n     * @return the state of the playing module\n     */\n",
    "73141": "    /**\n     * get the current module;\n     * @return\n     */\n",
    "73142": "    /**\n     * get the default amplification. The default amplification is calculated using the following\n     * formula: <code>#tracks / 4</code>. This should maintain a reasonable volume when playing\n     * modules with many channels while avoiding clipping in most cases. Note that for 4channel mods\n     * this will result in an amplification of 1.\n     * @return\n     */\n",
    "73220": "    /**\n     * this will try to write all the indicated data whitout ever giving up...\n     * Either all the data is written or it will loop for ever.\n     *\n     * @param data\n     * @param ofs\n     * @param len\n     */\n",
    "74678": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "74681": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "74685": "\t/**\n\t * Returns a service object injected by Spring\n\t * @return\n\t */\n",
    "76469": "    /**\n     * Shutdown all the loaded services\n     */\n",
    "76483": "    /** Returns a string of the location. */\n",
    "76485": "    /**\n     * Get the Password value.\n     * @return the Password value.\n     */\n",
    "76487": "  /**\n   * Called on the event dispatching thread (not on the worker thread)\n   * after the <code>construct</code> method has returned.\n   */\n",
    "76489": "    /**\n     * Set the Password value.\n     * @param newPassword The new Password value.\n     */\n",
    "76490": "  /**\n   * A new method that interrupts the worker thread.  Call this method\n   * to force the worker to abort what it's doing.\n   */\n",
    "76492": "    /**\n     * Get the Userid value.\n     * @return the Userid value.\n     */\n",
    "76493": "  /**\n   * Return the value created by the <code>construct</code> method.  \n   * Returns null if either the constructing thread or\n   * the current thread was interrupted before a value was produced.\n   * \n   * @return the value created by the <code>construct</code> method\n   */\n",
    "76495": "    /**\n     * Set the Userid value.\n     * @param newUserid The new Userid value.\n     */\n",
    "76496": "  /**\n   * Start the worker\n   */\n",
    "76498": "    /**\n     * Get the ConnectUrl value.\n     * @return the ConnectUrl value.\n     */\n",
    "76501": "    /**\n     * Set the ConnectUrl value.\n     * @param newConnectUrl The new ConnectUrl value.\n     */\n",
    "76505": "    /**\n     * Get the JdbcDriver value.\n     * @return the JdbcDriver value.\n     */\n",
    "76507": "    /**\n     * Set the JdbcDriver value.\n     * @param newJdbcDriver The new JdbcDriver value.\n     */\n",
    "76525": "    /**\n     * Getter for property doPopup.\n     * @return Value of property doPopup.\n     */\n",
    "76530": "    /**\n     * Setter for property doPopup.\n     * @param doPopup New value of property doPopup.\n     */\n",
    "76542": "    /**\n     * Translates Xml Document from CDA to CLIPS format.\n     * \n     * @param inputDocument\n     *            String representation of the input XML document.\n     * @return File representation of the translated document.\n     */\n",
    "76545": "    /**\n     * Converts a String to a File\n     * \n     * @param str\n     *            String representation of the input XML document translated\n     *            into CLIPS format.\n     * @return File representation of the String.\n     */\n",
    "76607": "    /**\n     * Returns the Results document creation time in the appropriate CDA format\n     *\n     * @return String representation of the document creation time\n     *\n     */\n",
    "76618": "    /**\n     * Returns the Results document code\n     *\n     * @return String representation of the document code\n     *\n     */\n",
    "76629": "    /**\n     * Returns the Results document code system\n     *\n     * @return String representation of the document code system\n     *\n     */\n",
    "76670": "    /**\n     * Registers IDocImport interface instance with the TransController\n     * component.\n     * \n     * @param iDocumentImport\n     *            Instance of the DocImpEx component refered to by the\n     *            IDocumentImport interface\n     */\n",
    "76672": "    /**\n     * Registers IDocExport interface instance with the TransController\n     * component.\n     * \n     * @param iDocumentExport\n     *            Instance of the DocImpEx component refered to by the\n     *            IDocumentExport interface\n     */\n",
    "76675": "    /**\n     * Registers IInference interface instance with the TransController\n     * component.\n     * \n     * @param iInference\n     *            Instance of the InferenceEngine component refered to by the\n     *            IInference interface\n     */\n",
    "76679": "    /**\n     * Registers IAuditLog interface instance with the TransController\n     * component.\n     * \n     * @param iAuditLog\n     *            Instance of the ConfigManager component refered to by the\n     *            IAuditLog interface\n     */\n",
    "76685": "    /**\n     * Returns <tt>true</tt> if the iteration has more elements. (In other\n     * words, returns <tt>true</tt> if <tt>next</tt> would return an element\n     * rather than throwing an exception.)\n     * \n     * @return <tt>true</tt> if the iterator has more elements.\n     */\n",
    "76774": "    /** Get a scalar type for the given name. */\n",
    "76778": "    /** Get a scalar type for the name represented by a token. */\n",
    "76780": "    /** Get a scalar type for the name represented by a symbol. */\n",
    "76787": "    /** Apply the analysis to a list of child nodes. */\n",
    "76790": "    /** Apply the analysis to a child node. */\n",
    "76794": "    /** Report a warning message. */\n",
    "76795": "    /** Are there any errors? */\n",
    "76804": "    /**\n     * This method provides a String representation of a document with clinical\n     * recommendations based on patient-specific data.\n     *\n     * @param patientSummary\n     *            String representation of the CDA Patient Summary document that\n     *            is received by the EGADSS Service\n     * @return String representation of the Results CDA document that contains\n     *         clinical results from EGADSS. (the recommendations and requests\n     *         for additional patient information if applicable)\n     */\n",
    "76847": "    /** Creates and initializes instances of other EGADSS components. */\n",
    "76930": "    /**\n     * velocityClinicalGuideline\n     *\n     * @return String\n     */\n",
    "76934": "    /**\n     * Tests the DocumentValidator.validateDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76946": "    /**\n     * Tests the IConfig.getInfo method of the DocImpEx componenet\n     */\n",
    "76949": "    /**\n     * Tests the IConfig.initialize method of the DocImpEx componenet\n     */\n",
    "76952": "    /**\n     * Tests the IConfig.terminate method of the DocImpEx componenet\n     */\n",
    "76956": "    /**\n     * Tests the IDocumentImport.importDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76959": "    /**\n     * Tests the IDocumentExport.exportDocument method of the DocImpEx\n     * componenet\n     */\n",
    "76964": "    /**\n     * Tests the IConfig.getInfo method of the TransController componenet\n     */\n",
    "76968": "    /**\n     * Tests the IConfig.initialize method of the TransController componenet\n     */\n",
    "76973": "    /**\n     * Tests the XPathPreprocessor.parseKnowledgeModuleForXPath method.\n     */\n",
    "76975": "    /**\n     * Tests the IConfig.terminate method of the TransController componenet\n     */\n",
    "76980": "    /**\n     * Tests the ITrans.getRecommendations method of the TransController\n     * componenet\n     */\n",
    "76987": "    /**\n     * Tests the IConfig.getInfo method of the DataStorage componenet\n     */\n",
    "76990": "    /**\n     * Tests the IConfig.initialize method of the DataStorage componenet\n     */\n",
    "76991": "    /**\n     * Tests the IAuditLog.writeLogEntry method of the ConfigManager componenet\n     */\n",
    "76992": "    /**\n     * Tests the IConfig.terminate method of the DataStorage componenet\n     */\n",
    "76995": "    /**\n     * Tests the IAudit.generateAuditReport method of the ConfigManager\n     * componenet\n     */\n",
    "76997": "    /**\n     * Tests the IAudit.setAuditingMode and IAudit.getAuditingMode methods of\n     * the ConfigManager componenet\n     */\n",
    "77002": "    /**\n     * Tests the ISysConfig.shutSystemDown method of the ConfigManager\n     * componenet\n     */\n",
    "77005": "    /**\n     * Tests the ISysConfig.viewSystemConfig method of the ConfigManager\n     * componenet\n     */\n",
    "77008": "    /**\n     * Tests the IConfig.getInfo method of the ConfigManager componenet\n     */\n",
    "77015": "    /**\n     * Tests the IConfig.initialize method of the ConfigManager componenet\n     */\n",
    "77021": "    /**\n     * Tests the IConfig.terminate method of the ConfigManager componenet\n     */\n",
    "81092": "\t/**\n\t * This method is called when the plug-in is stopped\n\t */\n",
    "81105": "    /**\n     * trace utility of server\n     */\n",
    "81107": "    /**\n     * Shutdown the NetworkServer\n     */\n",
    "81108": "\t/**\n\t * Start Derby Network server\n\t * \n\t */\n",
    "81112": "\t /**\n\t  *\tgets a database connection\n\t  * If the dbUrl is trying to connect to the Derby NetNsSampleWork server using JCC\n\t  * then the jcc driver must be already loaded before calling this method,\n\t  * else there will be an error\n\t  * return jcc connection if no error, else null\n\t  */\n",
    "81114": "\t /**\n\t  * set the connection to this isolation level\n\t  */\n",
    "81131": "\t/**\n\t * Return the length of the binary stream which was calculated when\n\t * EXTDTAObject was created.\n\t * \n\t * @return the length of the stream once converted to an InputStream\n\t */\n",
    "81443": "\t/**\n\t * Return chaining bit for current DSS.\n\t */\n",
    "81557": "\t/**\n\t * End DSS header by writing the length in the length location\n\t * and setting the chain bit.\n\t */\n",
    "81745": "\t/**\n\t * Looks at chaining info for previous DSS written, and use\n\t * that to figure out what the correlation id for the current\n\t * DSS should be.  Return that correlation id.\n\t */\n",
    "82376": "\t/**\n\t * get an HTML labelled message from the resource bundle file, according to\n\t * the given key.\n\t */\n",
    "82378": "\t/**\n\t * Print the received string as a header.\n\t * @param str The string to be printed as a header.\n\t */\n",
    "82382": "\t/**\n\t * If the received string has one or more single quotes\n\t * in it, replace each one with the HTML escape-code\n\t * for a single quote (apostrophe) so that the string \n\t * can be properly displayed on a submit button.\n\t * @param str The string in which we want to escape\n\t *  single quotes.\n\t */\n",
    "82653": "\t/**\n\t * Build preformatted SQLException text \n\t * for severe exceptions or SQLExceptions that are not EmbedSQLExceptions.\n\t * Just send the message text localized to the server locale.\n\t * \n\t * @param se  SQLException for which to build SQLERRMC\n\t * @return preformated message text \n\t * \t\t\twith messages separted by SQLERRMC_PREFORMATED_MESSAGE_DELIMITER\n\t * \n\t */\n",
    "82659": "\t/**\n\t * Build Tokenized SQLERRMC to just send the tokenized arguments to the client.\n\t * for a Derby SQLException\n\t * Message argument tokens are separated by SQLERRMC_TOKEN_DELIMITER \n\t * Multiple messages are separated by SQLERRMC_MESSAGE_DELIMITER\n\t * \n\t *                 ...\n\t * @param se   SQLException to print\n\t * \n\t */\n",
    "83118": "\t/**\n\t * Finalize the current DSS chain and send it if\n\t * needed.\n\t */\n",
    "83491": "    /**\n     * Obtain the current transaction timeout value set for this XAResource instance. If\n     * <CODE>XAResource.setTransactionTimeout</CODE> was not use prior to invoking this method, the return value is the\n     * default timeout set for the resource manager; otherwise, the value used in the previous\n     * <CODE>setTransactionTimeout</CODE> call is returned.\n     *\n     * @return the transaction timeout value in seconds.\n     *\n     * @throws XAException An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL.\n     */\n",
    "83501": "    /**\n     * <P>Set the current transaction timeout value for this <CODE>XAResource</CODE> instance. This value overwrites the\n     * default transaction timeout value in the resource manager. The newly assigned timeout value is effective for the\n     * life of this <CODE>XAResource</CODE> instance unless a new value is set.<P>\n     *\n     * @param the transaction timeout value in seconds.\n     *\n     * @throws XAException An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL, or XAER_INVAL.\n     */\n",
    "84264": "    /**\n     * What's a column's table's catalog name?\n     *\n     * @param column the first column is 1, the second is 2, ...\n     *\n     * @return column name or \"\" if not applicable.\n     *\n     * @throws SQLException thrown on failure\n     */\n",
    "84396": "    /**\n     * Store the Packagename and consistency token information This is called from Section.setPKGNAMCBytes\n     *\n     * @param b                    bytearray that has the PKGNAMC information to be stored\n     * @param resultSetHoldability depending on the holdability store it in the correct byte array packagename and\n     *                             consistency token information for when holdability is set to HOLD_CURSORS_OVER_COMMIT\n     *                             is stored in holdPKGNAMCBytes and in noHoldPKGNAMCBytes when holdability is set to\n     *                             CLOSE_CURSORS_AT_COMMIT\n     */\n",
    "84636": "   /**\n    * \tReturn true if the physical connection is still open.\n    * \tMight be logically closed but available for reuse.\n    *   @return true if physical connection still open\n    */\n",
    "84681": "    /**\n     * Store the Packagename and consistency token information for reuse. Case 1: if it is generated section, just store\n     * the byte array in PKGNAMCBytes Case 2: for not a generated section, information is stored in the correct byte\n     * array depending on the holdability in SectionManager\n     */\n",
    "84794": "    /**\n     * Performs the privileged action of System.getProperties()\n     */\n",
    "84802": "    /**\n     * Attempt to establish a database connection in a non-pooling, non-distributed environment.\n     *\n     * @return a Connection to the database\n     *\n     * @throws java.sql.SQLException if a database-access error occurs.\n     */\n",
    "84803": "    /**\n     * Attempt to establish a database connection in a non-pooling, non-distributed environment.\n     *\n     * @param user     the database user on whose behalf the Connection is being made\n     * @param password the user's password\n     *\n     * @return a Connection to the database\n     *\n     * @throws java.sql.SQLException if a database-access error occurs.\n     */\n",
    "84869": "\t/**\n\t\tRun once per-iteration to run the actual test.\n\t\t@exception T_Fail the test failed in some way.\n\t*/\n",
    "84901": "\t/**\n\t\tPut the object into the No Identity state. \n\n\t\t<BR> MT - single thread required - Method must only be called be cache manager\n\t\tand the cache manager will guarantee only one thread can be calling it.\n\n\t*/\n",
    "84903": "\t/**\n\t\tGet the identity of this object.\n\n\t\t<BR> MT - thread safe.\n\n\t*/\n",
    "84907": "\t/** \n\t\tQualififier is assumed to be null.\n\t@see Lockable#lockEvent\n\t*/\n",
    "84913": "\t/** \n\t\tQualififier is assumed to be null.\n\t@see Lockable#unlockEvent\n\t*/\n",
    "84927": "\t/**\n\t\tReturns true of the object is dirty. Will only be called when the object is unkept.\n\n\t\t<BR> MT - thread safe \n\n\t*/\n",
    "84948": "\t/**\n\t  Get the name of the protocol for the module to test.\n\t  This is the 'factory.MODULE' variable.\n\t  \n\t  'moduleName' to the name of the module to test. \n\n\t  @param testConfiguration the configuration for this test.\n\t  */\n",
    "84958": "\t/**\n\t\tA call to findCached() that is expected to return nothing.\n\t\t@exception StandardException  Standard Derby Error policy\n\t\t@exception T_Fail Something was found.\n\t*/\n",
    "84959": "\t/**\n\t\tA call to findCached() that is expected to find something.\n\t\t@exception StandardException  Standard Derby Error policy\n\t\t@exception T_Fail Nothing was found.\n\t*/\n",
    "84961": "\t/**\n\t\tA call to find() that is expected to return nothing.\n\n\t\t@exception T_Fail Something was found.\n\t\t@exception StandardException  Standard Derby Error policy\n\t*/\n",
    "84963": "\t/**\n\t\tA call to findCached() that is expected to find something.\n\n\t\t@exception T_Fail Nothing was found.\n\t\t@exception StandardException  Standard Derby Error policy\n\t*/\n",
    "84995": "\t/**\n\t  Emit a message indicating why the test failed.\n\n\t  RESOLVE: Should this be localized?\n\n\t  @param msg the message.\n\t  @return false\n\t*/\n",
    "84996": "\t/**\n\t  Emit a message saying the test passed.\n\t  You may use this to emit messages indicating individual test cases\n\t  within a unit test passed.\n\n\t  <P>RESOLVE:Localize this.\n\t  @param test the test which passed.\n\t  @return true\n\t  */\n",
    "84997": "\t/**\n\t\tEmit a message during a unit test run, indent the message\n\t\tto allow the PASS/FAIL messages to stand out.\n\t*/\n",
    "85040": "\t/**\n\t * T_MultiThreadedIteration method\n\t *\n\t * @exception T_Fail Unexpected behaviour from the API\n\t */\n",
    "85098": "\t/**\n\t\tGet the last page in a container.\n\t\tAlways returns a valid page or null if there is no page in the container.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85100": "\t/**\n\t\tGet a specific page in a container.\n\t\tAlways returns a valid page.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85104": "\t/**\n\t\tAdd a page to a container.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85120": "\t/**\n\t\tLazy people's random file generator:\n\t\tGenerate a random file with specified name and file size\n\n\t\t@exception T_Fail Record handle returned is null.\n\t*/\n",
    "85124": "\t/**\n\t  getValidColumns describes the DataValueDescriptor[] returned by all calls\n      to the getNextRowFromRowSource() call. \n\t*/\n",
    "85127": "\t/**\n\t\tneedsRowLocation returns true iff this the row source expects the\n\t\tdrainer of the row source to call rowLocation after getting a row from\n\t\tgetNextRowFromRowSource.\n\n\t\t@return true iff this row source expects some row location to be\n\t\treturned \n\t\t@see #rowLocation\n\t */\n",
    "85129": "\t/**\n\t\trowLocation  is not implemented here\n\t */\n",
    "85366": "\t/**\n\t  run the test\n\n\t  @exception T_Fail Unexpected behaviour from the API\n\t*/\n",
    "85374": "\t/**\n\t * T_MultiThreadedIteration method\n\t *\n\t * @exception T_Fail Unexpected behaviour from the API\n\t */\n",
    "85419": "\t/**\n\t\tT000 - ensure a transaction starts out idle.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85422": "\t/**\n\t\tT001 - start and commit an empty transaction.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85427": "\t/**\n\t\tT002 - start and abort an empty transaction.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85432": "\t/**\n\t\tT003 - start and commit an empty transaction and then ensure\n\t\tthat the transaction remains open for another commit.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85438": "\t/**\n\t\tT004 - start and abort an empty transaction and then ensure\n\t\tthat the transaction remains open for a commit and another abort.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "85480": "\t/**\n\t\tC010 - Create a container within a transaction, commit and the re-open\n\t\tthe container twice.\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\n\t*/\n",
    "85485": "\t/**\n\t\tC011 - Create a container withina transaction, commit and the re-open\n\t\tthe container in update and non-update mode.\n\t\t\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\n\t*/\n",
    "86122": "\t/**\n\t\tCreate a statement with modified State.\n\t*/\n",
    "86148": "      /**\n\t   *  Print the expected Exception's details if the SQLException SQLState\n\t   * matches the expected SQLState. Otherwise fail\n\t   *\n\t   * @param se  SQLException that was thrown by the test\n\t   * @param expectedSQLState  The SQLState that we expect. \n\t   *\n\t   **/\n",
    "86149": "     /**\n       * We are here because we got an exception when did not expect one.\n       * Hence printing the message and stack trace here.\n       **/\n",
    "86190": "\t/**\n\t * Dump the values in the received result set to output.\n\t */\n",
    "86192": "\t/**\n\t * Create a connect based on the test arguments passed in.\n\t */\n",
    "86244": "\t/**\n\t\tUnlatch an  object.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see LockFactory#unlatch\n\t*/\n",
    "86250": "\t/**\t\n\t\tSet the potentially granted flag, returns true if the\n\t\tflag changed its state.\n\n\t\tMT - single thread required\n\t*/\n",
    "86252": "\t/**\t\n\t\tClear the potentially granted flag.\n\n\t\tMT - single thread required\n\t*/\n",
    "86261": "\t/**\n\t\tWe can return ourselves here because our identity\n\t\tis immutable and what we returned will not be accessed\n\t\tas a Lock, so the count cannot be changed.\n\t*/\n",
    "86264": "\t/**\n\t\tUnlock a group of objects. \n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@param group handle of group that objects were locked with.\n\t\tIf group is\tnull then this call is equivilent to unlockAll().\n\n\t\t@see LockFactory#unlockGroup\n\t*/\n",
    "86275": "\t/**\n\t\tReturns true if locks by anyone are blocking anyone else\n\t*/\n",
    "86278": "\t/**\n\t\tReturn true if locks are held in this group and this space.\n\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@param group handle of group that objects were locked with.\n\n\t\t@see LockFactory#areLocksHeld\n\t*/\n",
    "86280": "\t/**\n\t\tReturn true if locks are held in this space\n\t\t\n\t\t<BR>\n\t\tMT - thread safe\n\n\t\t@see LockFactory#areLocksHeld\n\t*/\n",
    "86286": "\t/**\n\t\tClear a limit set by setLimit.\n\t*/\n",
    "86287": "\t/**\n\t\tReturn the first lock in the wait line, null if the\n\t\tline is empty.\n\t*/\n",
    "86289": "\t/**\n\t\tReturn the lockable object controlled by me.\n\t*/\n",
    "86301": "\t/**\n\t\tAdd the waiters of this lock into this Dictionary object.\n\t\t<BR>\n\t\tEach waiting thread gets two entries in the hashtable\n\t\t<OL>\n\t\t<LI>key=compatibility space - value=ActiveLock\n\t\t<LI>key=ActiveLock - value={LockControl for first waiter|ActiveLock of previosue waiter}\n\t\t</OL>\n\t*/\n",
    "86311": "\t/**\n\t * Remove and return the first lock request from a list of waiters.\n\t *\n\t * @param waiting\tThe list of waiters to pop from\n\t * @param ls\t\tThe LockSet\n\t *\n\t * @return\tThe removed lock request\n\t */\n",
    "86329": "    /**\n     * cpArray helps built the output string (outputRow).\n     * @param toCp the String to be copied into outputRow\n     * @param start the start place\n     * @param end the end place\n     */\n",
    "86343": "\t/**\n\t\tNotify the class manager that the classpath has been modified.\n\n\t\t@exception StandardException thrown on error\n\t*/\n",
    "86362": "\t/**\n\t\tGet a stream directly from a ZipFile.\n\t\tIn this case we can safely return the stream directly.\n\t\tIt's a new stream set up by the zip code to read just\n\t\tthe contents of this entry.\n\t*/\n",
    "86364": "\t/**\n\t\tGet a stream from a zip file that is itself a stream.\n\t\tHere we need to get the size of the zip entry and\n\t\tput a limiting stream around it. Otherwise the\n\t\tcaller would end up reading the entire zip file!\n\t*/\n",
    "86371": "\t/**\n\t\tMake the stream; note that service properties override\n\t\tapplication and system properties.\n\n\t */\n",
    "86372": "\t/**\n\t\tReturn a new header object.\n\t*/\n",
    "86373": "\t/**\n\t\tcreate a HeaderPrintWriter based on the header.\n\t\tWill still need to determine the target type.\n\t */\n",
    "86379": "\t/**\n\t\tUsed when no configuration information exists for a stream.\n\t*/\n",
    "86380": "\t/**\n\t\tUsed when creating a stream creates an error.\n\t*/\n",
    "86384": "\t/**\n\t\tKeep the cached object after a search.\n\n\t*/\n",
    "86392": "\t/**\n\t\tGet the cached object.\n\t*/\n",
    "86414": "\t/**\n\t\tClean all objects in the cache.\n\t*/\n",
    "86417": "\t/**\n\t\tClean all objects that match a partial key.\n\t*/\n",
    "86422": "\t/**\n\t\tMT - synchronization provided by caller\n\n\t\t@exception StandardException Standard Cloudscape error policy.\n\t*/\n",
    "86461": "\t/**\t\n\t\tPut the key-value pair in the Properties set and\n\t\tmark this set as modified.\n\n\t\t@see Hashtable#put\n\t*/\n",
    "86462": "\t/**\t\n\t\tRemove the key-value pair from the Properties set and\n\t\tmark this set as modified.\n\n\t\t@see Hashtable#remove\n\t*/\n",
    "86474": "\t/**\n\t\tShut down a service that was started by this Monitor. Will\n\t\tcause the stop() method to be called on each loaded module.\n\t*/\n",
    "86484": "\t/**\n\t\tReturn the name of the service that the passed in module lives in.\n\t*/\n",
    "86488": "\t/**\n\t\tClear an item's identity. Item must be \n\t\tunkept and valid. This is called for\n\t\tdirty items from the discard code.\n\n\t\tCaller must hold the cache synchronization.\n\n        @return the amount by which this shrinks the cache.\n\t*/\n",
    "86493": "\t/**\n\t\tReturn the PersistentService object for a service.\n\t\tWill return null if the service does not exist.\n\t*/\n",
    "86522": "\t/**\n\t\tShould only be called if reportOn is true\n\t\tapart from report/Exception().\n\t*/\n",
    "86570": "\t/**\n\t\tBoot all the service providers, ie. any module that implemented\n\t\tPersistentService. Upon entry to this call is the hashtable has\n\t\tPersistentService objects that have been created but not booted.\n\t*/\n",
    "86574": "\t/**\n\t\tBoot all persistent services that can be located at run time.\n\n\t\t<BR>\n\t\tThis method enumerates through all the service providers that\n\t\tare active and calls bootPersistentServices(PersistentService)\n\t\tto boot all the services that that provider knows about.\n\t*/\n",
    "86575": "\t/** Get the current PC */\n",
    "86576": "\t/**\n\t * add a field to this class. Fields cannot\n\t * be initialized here, they must be initialized\n\t * in the static initializer code (static fields)\n\t * or in the constructors.\n\t * <p>\n\t * static fields also added to this list,\n\t * with the modifier set appropriately.\n\t */\n",
    "86595": "\t/**\n\t * Return the logical name of the method. The current\n\t * myEntry refers to the sub method we are currently\n\t * overflowing to. Those sub-methods are hidden from any caller.\n\t */\n",
    "86600": "\t/**\n\t * a throwable can be added to the end of\n\t * the list of thrownExceptions.\n\t */\n",
    "86601": "\t/**\n\t * when the method has had all of its parameters\n\t * and thrown exceptions defined, and its statement\n \t * block has been completed, it can be completed and\n\t * its class file information generated.\n\t * <p>\n\t * further alterations of the method will not be\n\t * reflected in the code generated for it.\n\t */\n",
    "86635": "\t/**\n\tReturn the UUID factory for this system.  Returns null\n\tif there isn't one.\n\t@see com.ibm.db2j.system.System\n\t*/\n",
    "86648": "\t/**\n\t\tGet the locale from the ContextManager and then find the bundle\n\t\tbased upon that locale.\n\t*/\n",
    "86663": "\t/**\n\t\tPush the contents of the described static field onto the stack.\t\t\n\t*/\n",
    "86667": "\t/**\n\t * Set the field but don't duplicate its value so\n\t * nothing is left on the stack after this call.\n\t */\n",
    "86669": "\t/**\n\t\tUpon entry the top word(s) on the stack is\n\t\tthe value to be put into the field. Ie.\n\t\twe have\n\t\t<PRE>\n\t\tword\n\t\t</PRE>\n\n\t\tBefore the call we need \n\t\t<PRE>\n\t\tword\n\t\tthis\n\t\tword\n\t\t</PRE>\n\t\tword2,word1 -> word2, word1, word2\n\n\t\tSo that we are left with word after the put.\n\n\t*/\n",
    "86675": "\t/**\n\t\tStart this module. We need a read/write version of the class utilities\n\n\t\t@exception StandardException standard cloudscape policy\n\t */\n",
    "86677": "\t/**\n\t\tStop this module.  In this case, nothing needs to be done.\n\t */\n",
    "86700": "\t/**\n\t\tOpen a temp table several times with different modes and ensure the\n\t\tcorrect behaviour (most severe open wins).\n\n\t\t@exception T_Fail Unexpected behaviour from the API\n\t\t@exception StandardException Unexpected exception from the implementation\n\t*/\n",
    "86718": "  /** Gets the resultset meta data\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86719": "  /** gets the next row\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86721": "  /** closes the resultset\n \t* @exception\tSQLException if there is an error\n\t*/\n",
    "86736": "\t/** virtual method from the abstract class\n\t * @exception\tException on error\n\t */\n",
    "86758": "  /**if columndefinition is true, ignore first row. The way to do that is to just\n  *  look for the record separator\n \t* @exception\tException if there is an error\n\t*/\n",
    "86775": "  /**close the input data file\n \t* @exception\tException if there is an error\n\t*/\n",
    "86834": "  /**returns the number of the current row\n  */\n",
    "86844": "\t/**\n\t * position is 1-based.\n\t * @see ResultDescription#getColumnDescriptor\n\t */\n",
    "86861": "\t/**\n\t\tIs the database active (open).\n\t*/\n",
    "86981": "\t/**\n\t * Get the formatID which corresponds to this class.\n\t   Map to the 5.0 version identifier so that 5.0 will understand\n\t   this object when we write it out in soft upgrade mode.\n\t   CS 5.0 will de-serialize it correctly.\n\t   When we are writing out a 5.1 version number we write out\n\t   the 5.1 version just to ensure no problems.\n\t   \n\t *\n\t *\t@return\tthe formatID of this class\n\t */\n",
    "87063": "\t/**\n\t * Return the savepoint level when the table was dropped\n\t */\n",
    "87076": "\t/**\n\t * Get the PreparedStatement that is associated with this Cacheable\n\t */\n",
    "87090": "\t/**\n\t * Resets the savepoint to the current spot if it is\n\t * set, otherwise, noop.  Used when a commit is\n\t * done on a nested connection.\n\t *\n\t * @see StatementContext#resetSavePoint\n\t * @exception StandardException Thrown on error\n\t */\n",
    "87117": "\t/**\n\t * Indicate that, in the event of a statement-level exception,\n\t * this context is NOT the last one that needs to be rolled\n\t * back--rather, it is nested within some other statement\n\t * context, and that other context needs to be rolled back,\n\t * too.\n\t*/\n",
    "87118": "\t/**\n\t\tSet to indicate statement is system code.\n\t\tFor example a system procedure, view, function etc.\n\t*/\n",
    "87120": "\t/**\n\t\tReturn true if this statement is system code.\n\t*/\n",
    "87135": "\t/**\n\t\tGet the ExecutionFactory to use with this language connection\n\t */\n",
    "87139": "\t/**\n\t\tGet the OptimizerFactory to use with this language connection\n\t */\n",
    "87140": "\t/**\n\t\tGet the TypeCompilerFactory to use with this language connection\n\t */\n",
    "87141": "\t/**\n\t\tGet the DataValueFactory to use with this language connection\n\t */\n",
    "87144": "\t/**\n\t\tthis implementation will not support caching of statements.\n\t */\n",
    "87173": "\t/**\n\t * Start-up method for this instance of the language factory.\n\t * This service is expected to be started and accessed relative \n\t * to a database.\n\t *\n\t * @param startParams\tThe start-up parameters (ignored in this case)\n\n       @exception StandardException Thrown if module cannot be booted.\n\t *\n\t */\n",
    "87202": "\t/**\n\t * Add the activation to those known about by this connection.\n\t */\n",
    "87210": "\t/**\n\t * removes a dependency for a given provider. assumes\n\t * that the dependent removal is being dealt with elsewhere.\n\t * Won't assume that the dependent only appears once in the list.\n\t */\n",
    "87237": "\t/**\n\t\treturn the provider's key for this dependency.\n\t\t@return the provider' key for this dependency\n\t */\n",
    "87238": "\t/**\n\t\treturn the provider for this dependency.\n\t\t@return the provider for this dependency\n\t */\n",
    "87239": "\t/**\n\t\treturn the dependent for this dependency.\n\t\t@return the dependent for this dependency\n\t */\n",
    "87264": "\t/**\n\t\tCheck that there are not output parameters defined\n\t\tby the parameter set. If there are unknown parameter\n\t\ttypes they are forced to input types. i.e. Cloudscape static method\n\t\tcalls with parameters that are array.\n\n\t\t@return true if a declared Java Procedure INOUT or OUT parameter is in the set, false otherwise.\n\t*/\n",
    "87281": "\t/**\n\t\tGet a column from the list\n\t\n\t\t@param position\tThe column to get from the list\n\t */\n",
    "87283": "\t/**\n\t\tPrint the list.\n\t\n\t\t@param depth\t\tThe depth at which to indent the sub-nodes\n\t */\n",
    "87297": "\t/**\n\t * Return the number of activations known for this connection.\n\t * Note that some of these activations may not be in use\n\t * (when a prepared statement is finalized, its activations\n\t * are marked as unused and later closed and removed on\n\t * the next commit/rollback).\n\t */\n",
    "87307": "\t/**\n\t * See if a given cursor is available for use.\n\t * if so return its activation. Returns null if not found.\n\t * For use in execution.\n\t *\n\t * @return the activation for the given cursor, null\n\t *\tif none was found.\n\t */\n",
    "87313": "\t/**\n\t * null operators are defined on DataValueDescriptor.\n\t * Overrides method in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "87439": " /** Get the data value factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87443": "\t/**\n\t\tGet the language factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87448": "\t/**\n\t\tGet the language connection factory to use with this language connection\n\t\tcontext.\n\t */\n",
    "87479": "\t/**\n\t\tEmpty as much of the cache as possible. It is not guaranteed\n\t\tthat the cache is empty after this call, as statements may be kept\n\t\tby currently executing queries, activations that are about to be garbage\n\t\tcollected.\n\t*/\n",
    "87554": "    /**\n\t  *\tReports how many statement levels deep we are.\n\t  *\n\t  *\t@return\ta statement level >= OUTERMOST_STATEMENT\n\t  */\n",
    "87621": "\t/**\n\t\tFinish the data dictionary transaction, if any.\n\n\t\t@exception StandardException\tThrown on error\n\t */\n",
    "87664": "\t/**\n\t * Convert this object to a String.  See comments in QueryTreeNode.java\n\t * for how this should be done for tree printing.\n\t *\n\t * @return\tThis object as a String\n\t */\n",
    "87665": "\t/**\n\t * Mark the column as descending order\n\t */\n",
    "87666": "\t/**\n\t * Get the column order.  Overrides \n\t * OrderedColumn.isAscending.\n\t *\n\t * @return true if ascending, false if descending\n\t */\n",
    "87831": "\t/**\n\t * This is a length operator node.  Overrides this method\n\t * in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "87990": "\t/**\n\t * Determine the type the binary method is called on.\n\t * By default, based on the receiver.\n\t *\n\t * Override in nodes that use methods on super-interfaces of\n\t * the receiver's interface, such as comparisons.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "88021": "\t/**\n\t * Initializer for a ExtractOperatorNode\n\t *\n\t * @param field\t\tThe field to extract\n\t * @param operand\tThe operand\n\t */\n",
    "88329": "\t/**\n\t  *\tGet the package name that this generated class lives in\n\t  *\n\t  *\t@return\tpackage name\n\t  */\n",
    "88330": "\t/**\n\t\tThe base class for activations is BaseActivation\n\t */\n",
    "88994": "\t/**\n\t * This is a length operator node.  Overrides this method\n\t * in UnaryOperatorNode for code generation purposes.\n\t */\n",
    "89015": "\t/**\n\t * Return the length\n\t *\n\t * @return\tThe length of the value this node represents\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "89233": "\t/**\n\t * Prints the sub-nodes of this object.  See QueryTreeNode.java for\n\t * how tree printing is supposed to work.\n\t *\n\t * @param depth\t\tThe depth of this node in the tree\n\t */\n",
    "89234": "\t/**\n\t * Convert this object to a String.  See comments in QueryTreeNode.java\n\t * for how this should be done for tree printing.\n\t *\n\t * @return\tThis object as a String\n\t */\n",
    "89467": "\t/**\n\t\tCheck to see if a database has been upgraded to the required\n\t\tlevel in order to use a language feature. \n\n\t\t@param majorVersion Data Dictionary major version\n\t\t@param feature Non-null to throw an error, null to return the state of the version match.\n\n\t\t@return True if the database has been upgraded to the required level, false otherwise.\n\t*/\n",
    "89612": "\t/**\n\t * Determine the type the binary method is called on.\n\t * By default, based on the receiver.\n\t *\n\t * Override in nodes that use methods on super-interfaces of\n\t * the receiver's interface, such as comparisons.\n\t *\n\t * @exception StandardException\t\tThrown on error\n\t */\n",
    "89786": "\t/**\n\t * The execute method returns a result set that will evaluate the\n\t * statement this activation class is the compiled form of.\n\t * REVISIT: do we need to give the caller the ability to touch it\n\t * directly, or could we wrap the alterations to it in this class?\n\t */\n",
    "89795": "\t/**\n\t * Activations might have need of internal functions\n\t * that are not used by the result sets, but by other\n\t * activation functions. Thus, we make it possible\n\t * for functions to be generated directly as well\n\t * as through the newExprFun interface.  newExprFun\n\t * should be used when a static field pointing to the\n\t * expression function is needed.\n\t * <p>\n\t * The generated function will generally have a generated name\n\t * that can be viewed through the MethodBuilder interface.\n\t * This name is generated to ensure uniqueness from other\n\t * function names in the activation class. If you pass in a function\n\t * name, think carefully about whether it will collide with other names.\n\t *\n\t * @param exprName\tName of function. Usually null, which causes us to\n\t *\t\t\t\t\tgenerate a unique name.\n\t * @param returnType the return type of the function\n\t * @param modifiers the modifiers on the function\n\t *\n\t * @see #newExprFun\n\t */\n",
    "89803": "\t/**\n\t\tPush an expression that is a GeneratedMethod reference to the\n\t\tpassed in method. aka. a \"function pointer\".\n\t*/\n",
    "89804": "\t/**\n\t * Start a user expression.  The difference between a normal expression\n\t * (returned by newExprFun)\n\t * and a user expression is that a user expression catches all exceptions\n\t * (because we don't want random exceptions thrown from user methods to\n\t * propagate to the rest of the system.\n\t *\n\t * @param functionName\tName to give to the function. If null, we'll generate a\n\t *\t\t\t\t\t\tunique name.\n\t * @param returnType\tA String telling the return type from the expression\n\t *\n\t * @return\tA new MethodBuilder\n\t */\n",
    "89806": "\t/**\n\t\tThis utility method returns an expression for CURRENT_DATE.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_DATE,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89807": "\t/**\n\t\tThis utility method returns an expression for CURRENT_TIME.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_TIME,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89809": "\t/**\n\t\tThis utility method generates an expression for CURRENT_TIMESTAMP.\n\t\tGet the expression this way, because the activation needs to \n\t\tgenerate support information for CURRENT_TIMESTAMP,\n\t\tthat would otherwise be painful to create manually.\n\t */\n",
    "89823": "\t/**\n\t\tThis utility method returns the resultSetClosed method reference that the\n\t\tactivation wants called when a result set closes, to let it clean up.\n\t\tThis will be null if none was needed.\n\n\t\tREMIND: because ObjectManager returns exceptions on its invoke() method\n\t\tand close() is not supposed to return exceptions, we may want to\n\t\tmove this to be something done on open() instead of on close().\n\t\tOtherwise, we have to do try/catch/THROWASSERT in the close code,\n\t\twhich looks unfriendly.\n\t */\n",
    "89827": "\t/**\n\t * Generate a reference to the row array that\n\t * all activations use.\n\t * \n\t * @param eb the expression block\n\t *\n\t * @return expression\n\t */\n",
    "89836": "\t/**\n\t * Take the generated class, and turn it into an\n\t * actual class.\n\t * <p> This method assumes, does not check, that\n\t * the class and its parts are all complete.\n \t *\n\t * @param savedBytes place to save generated bytes.\n\t *\tif null, it is ignored\n\t * @exception StandardException thrown when exception occurs\n\t */\n",
    "89838": "\t/**\n\t * Get a \"this\" expression declared as an Activation.\n\t * This is the commonly used type of the this expression.\n\t *\n\t */\n",
    "89839": "\t/**\n\t\tGenerate a Null data value.\n\t\tNothing is required on the stack, a SQL null data value\n\t\tis pushed.\n\t*/\n",
    "89841": "\t/**\n\t\tGenerate a Null data value.\n\t\tThe express value is required on the stack and will be popped, a SQL null data value\n\t\tis pushed.\n\t*/\n",
    "89842": "\t/**\n\t\tGenerate a data value.\n\t\tThe value is to be set in the SQL data value is required\n\t\ton the stack and will be popped, a SQL data value\n\t\tis pushed.\n\t*/\n",
    "89962": "\t/**\n\t * Returns the current SQL text string that is being parsed.\n\t *\n\t * @return\tCurrent SQL text string.\n\t *\n\t */\n",
    "90128": "\t/**\n\t  *\tGet the NodeFactory for this context\n\t  *\n\t  *\t@return\tThe NodeFactory for this context.\n\t  */\n",
    "90195": "\t/**\n\t\tAdd a compile time warning.\n\t*/\n",
    "90197": "\t/**\n\t\tGet the chain of compile time warnings.\n\t*/\n",
    "90348": "\t/**\n\t\tCheck the reliability type of this java value.\n\n\t    @exception StandardException\t\tThrown on error\n\n\t\t@see org.apache.derby.iapi.sql.compile.CompilerContext\n\t*/\n",
    "90419": "\t/**\n\t\tSet the activation for a single execution.\n\n\t\t@see Activation#setSingleExecution\n\t*/\n",
    "90420": "\t/**\n\t\tIs the activation set up for a single execution.\n\n\t\t@see Activation#isSingleExecution\n\t*/\n",
    "90422": "\t/**\n\t\tGet the number of subqueries in the entire query.\n\t\t@return int\t The number of subqueries in the entire query.\n\t */\n",
    "90466": "\t/**\n\t * Gets information from its source. We might want\n\t * to have this take a CursorResultSet in its constructor some day,\n\t * instead of doing a cast here?\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "90528": "\t/**\n     * open a scan on the table. scan parameters are evaluated\n     * at each open, so there is probably some way of altering\n     * their values...\n\t *\n\t * @exception StandardException thrown on failure to open\n     */\n",
    "90536": "\t/**\n\t * This result set has its row location from\n\t * the last fetch done. If it is closed,\n\t * a null is returned.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current row.\n\t * @exception StandardException thrown on failure to get row location\n\t */\n",
    "90671": "\t/**\n\t * Gets information from its source. We might want\n\t * to have this take a CursorResultSet in its constructor some day,\n\t * instead of doing a cast here?\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t * @exception StandardException thrown on failure.\n\t */\n",
    "90739": "\t/**\n\t * A join is combining rows from two sources, so it has no\n\t * single row location to return; just return a null.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return the row location of the current cursor row.\n\t */\n",
    "90740": "\t/**\n\t * A join is combining rows from two sources, so it \n\t * should never be used in a positioned update or delete.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null value.\n\t */\n",
    "90770": "\t/**\n\t\tReport if closed.\n\t */\n",
    "90774": "\t/**\n     * Returns the description of the table's rows\n\t */\n",
    "90797": "    /**\n\t  *\tReports whether these constants are up-to-date. This returns true\n\t  *\tfor homogenous Cloudscape/Cloudsync. For the Plugin, this may\n\t  *\treturn false;\n\t  *\n\t  *\t@return\ttrue if these constants are up-to-date\n\t  *\t\t\tfalse otherwise\n\t  */\n",
    "90915": "\t/**\n     * Returns the description of the table's rows\n\t */\n",
    "90917": "\t/**\n\t\tReturn my cursor name for JDBC. Can be null.\n\t*/\n",
    "90924": "\t/**\n\t * This is not operating against a stored table,\n\t * so it has no row location to report.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null.\n\t */\n",
    "90928": "\t/**\n\t * This is not used in positioned update and delete,\n\t * so just return a null.\n\t *\n\t * @see CursorResultSet\n\t *\n\t * @return a null.\n\t */\n",
    "90977": "\t/**\n\t * reopen this ResultSet.\n\t *\n\t * @exception StandardException thrown if cursor finished.\n\t */\n",
    "90994": "\t/**\n\t\tJust report that it is always closed.\n\t\tRESOLVE: if we don't report that we are closed,\n\t\tthen we will wind up with a dependency problem when\n\t\twe send an invalidateFor on our own Statement.  It\n\t\twill call lcc.verifyNoOpenResultSets(), which is really\n\t\tsupposed to be verify that there are no read only\n\t\tresult sets that are open.\n\t */\n",
    "91015": "\t/**\n\t\tReturn the cursor name, null in this case.\n\n\t\t@see ResultSet#getCursorName\n\t*/\n",
    "91061": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91066": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91071": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91074": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
    "91076": "\t/**\n   * Return the time for all operations performed by this node, and the children\n   * of this node.  The times included open, next, and close.\n\t *\n\t */\n",
    "91077": "\t/**\n   * Return the time for all operations performed by the children of this node.\n\t *\n\t */\n",
    "91080": "\t/**\n   * Return the time for all operations performed by this node, but not the\n   * time for the children of this node.\n\t *\n\t */\n",
    "91088": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91097": "\t/**\n   * Format for display, a name for this node.\n\t *\n\t */\n",
    "91104": "\t/**\n\t * Get the objects to be displayed when this tree object is expanded.\n\t * <P>\n\t * The objects returned can be of any type, including addtional Inspectables.\n   *\n\t * @return java.util.Vector\tA vector of objects.\n\t */\n",
}
